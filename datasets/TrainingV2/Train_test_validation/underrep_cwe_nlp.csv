CWE-ID,Description,CVE
115,"Product sees dangerous file extension in free text of a group discussion, disconnects all users.",CVE-2005-2225
115,Product does not correctly import and process security settings from another product.,CVE-2001-0003
115,"Microsoft MSN Messenger allows remote attackers to cause a denial of service via a plaintext message containing the "".pif"" string, which is interpreted as a malicious file extension and causes users to be kicked from a group conversation.  NOTE: it has been reported that Gaim is also affected, so this may be an issue in the protocol or MSN servers.",CVE-2005-2225
115,"Web Extender Client (WEC) in Microsoft Office 2000, Windows 2000, and Windows Me does not properly process Internet Explorer security settings for NTLM authentication, which allows attackers to obtain NTLM credentials and possibly obtain the password, aka the ""Web Client NTLM Authentication"" vulnerability.",CVE-2001-0003
1191,"chain: JTAG interface is not disabled (CWE-1191) during ROM code execution, introducing a race condition (CWE-362) to extract encryption keys",CVE-2019-18827
1244,JTAG access is disabled after ROM code execution.  This means that JTAG access is possible when the system is running code from ROM before transferring control over to embedded firmware.  This allows an attacker to modify boot flow and successfully bypass secure-boot process.,CVE-2019-18827
1247,Lack of anti-glitch protections allows an attacker to launch physical attack to bypass secure boot and read protected eFuses.,CVE-2019-17391
126,"Chain: ""Heartbleed"" bug receives an inconsistent length parameter (CWE-130) enabling an out-of-bounds read (CWE-126), returning memory that could include private cryptographic keys and other sensitive data.",CVE-2014-0160
126,"Chain: product does not handle when an input string is not NULL terminated, leading to buffer over-read or heap-based buffer overflow.",CVE-2009-2523
141,Attacker inserts field separator into input to specify admin privileges.,CVE-2003-0307
141,"Poster version.two allows remote authenticated users to gain administrative privileges by appending the ""|"" field separator and an ""admin"" value into the email address field.",CVE-2003-0307
142,"Multiple internal space, insufficient quoting - program does not use proper delimiter between values.",CVE-2000-0293
142,"aaa_base in SuSE Linux 6.3, and cron.daily in earlier versions, allow local users to delete arbitrary files by creating files whose names include spaces, which are then incorrectly interpreted by aaa_base when it deletes expired files from the /tmp directory.",CVE-2000-0293
144,Linebreak in field of PHP script allows admin privileges when written to data file.,CVE-2002-0267
144,"preferences.php in Simple Internet Publishing System (SIPS) before 0.3.1 allows remote attackers to gain administrative privileges via a linebreak in the ""theme"" field followed by the Status::admin command, which causes the Status line to be entered into the password file.",CVE-2002-0267
149,Database allows remote attackers to cause a denial of service (application crash) via a MATCH AGAINST query with an opening double quote but no closing double quote.,CVE-2004-0956
149,"MIE. MFV too? bypass AV/security with fields that should not be quoted, duplicate quotes, missing leading/trailing quotes.",CVE-2003-1016
149,MySQL before 4.0.20 allows remote attackers to cause a denial of service (application crash) via a MATCH AGAINST query with an opening double quote but no closing double quote.,CVE-2004-0956
149,"Multiple content security gateway and antivirus products allow remote attackers to bypass content restrictions via MIME messages that use malformed quoting in MIME headers, parameters, and values, including (1) fields that should not be quoted, (2) duplicate quotes, or (3) missing leading or trailing quote characters, which may be interpreted differently by mail clients.",CVE-2003-1016
152,"Server trusts client to expand macros, allows macro characters to be expanded to trigger resultant information exposure.",CVE-2002-0770
152,"Attacker can obtain sensitive information from a database by using a comment containing a macro, which inserts the data during expansion.",CVE-2008-2018
152,"Quake 2 (Q2) server 3.20 and 3.21 allows remote attackers to obtain sensitive server cvar variables, obtain directory listings, and execute Q2 server admin commands via a client that does not expand ""$"" macros, which causes the server to expand the macros and leak the information, as demonstrated using ""say $rcon_password.""",CVE-2002-0770
152,"The AssignUser function in template.class.php in PHPizabi 0.848b C1 HFP3 performs unsafe macro expansions on strings delimited by '{' and '}' characters, which allows remote authenticated users to obtain sensitive information via a comment containing a macro, as demonstrated by a ""{user.password}"" comment in the profile of the admin user.",CVE-2008-2018
153,"Server trusts client to expand macros, allows macro characters to be expanded to trigger resultant information exposure.",CVE-2002-0770
153,"Quake 2 (Q2) server 3.20 and 3.21 allows remote attackers to obtain sensitive server cvar variables, obtain directory listings, and execute Q2 server admin commands via a client that does not expand ""$"" macros, which causes the server to expand the macros and leak the information, as demonstrated using ""say $rcon_password.""",CVE-2002-0770
183,chain: bypass of untrusted deserialization issue (CWE-502) by using an assumed-trusted class (CWE-183),CVE-2019-12799
183,sandbox bypass using a method that is allowed on a whitelist,CVE-2019-10458
183,sandbox bypass using unsafe methods that are allowed on a whitelist,CVE-2017-1000095
186,"MIE. "".php.ns"" bypasses "".php$"" regexp but is still parsed as PHP by Apache. (manipulates an equivalence property under Apache)",CVE-2005-1604
186,"PHP Advanced Transfer Manager (phpATM) 1.21 allows remote attackers to upload arbitrary files via filenames containing multiple file extensions, as demonstrated using a filename ending in ""php.ns"", which allows execution of arbitrary PHP code.",CVE-2005-1604
210,Infoleak of sensitive information in error message (physical access required).,CVE-2005-1745
210,"The UserLogin control in BEA WebLogic Portal 8.1 through Service Pack 3 prints the password to standard output when an incorrect login attempt is made, which could make it easier for attackers to guess the correct password.",CVE-2005-1745
224,"Attacker performs malicious actions on a hard link to a file, obscuring the real target file.",CVE-2002-0725
224,"NTFS file system in Windows NT 4.0 and Windows 2000 SP2 allows local attackers to hide file usage activities via a hard link to the target file, which causes the link to be recorded in the audit trail instead of the target file.",CVE-2002-0725
232,Client crash when server returns unknown driver type.,CVE-2000-1003
232,"NETBIOS client in Windows 95 and Windows 98 allows a remote attacker to cause a denial of service by changing a file sharing service to return an unknown driver type, which causes the client to crash.",CVE-2000-1003
235,"MIE. multiple gateway/security products allow restriction bypass using multiple MIME fields with the same name, which are interpreted differently by clients.",CVE-2003-1014
235,"Multiple content security gateway and antivirus products allow remote attackers to bypass content restrictions via MIME messages that use multiple MIME fields with the same name, which may be interpreted differently by mail clients.",CVE-2003-1014
236,Crash in IRC client via PART message from a channel the user is not in.,CVE-2002-1488
236,Router crash or bad route modification using BGP updates with invalid transitive attribute.,CVE-2001-0650
236,The IRC component of Trillian 0.73 and 0.74 allows remote malicious IRC servers to cause a denial of service (crash) via a PART message with (1) a missing channel or (2) a channel that the Trillian user is not in.,CVE-2002-1488
236,"Cisco devices IOS 12.0 and earlier allow a remote attacker to cause a crash, or bad route updates, via malformed BGP updates with unrecognized transitive attribute.",CVE-2001-0650
241,FTP server crash via PORT command with non-numeric character.,CVE-1999-1156
241,Anti-virus product has assert error when line length is non-numeric.,CVE-2004-0270
241,BisonWare FTP Server 4.1 and earlier allows remote attackers to cause a denial of service via a malformed PORT command that contains a non-numeric character and a large number of carriage returns.,CVE-1999-1156
241,"libclamav in Clam AntiVirus 0.65 allows remote attackers to cause a denial of service (crash) via a uuencoded e-mail message with an invalid line length (e.g., a lowercase character), which causes an assert error in clamd that terminates the calling program.",CVE-2004-0270
27,"Server allows remote attackers to cause a denial of service via certain HTTP GET requests containing a %2e%2e (encoded dot-dot), several ""/../"" sequences, or several ""../"" in a URI.",CVE-2002-0298
27,"ScriptEase MiniWeb Server 0.95 allows remote attackers to cause a denial of service (crash) via certain HTTP GET requests containing (1) a %2e%2e (encoded dot-dot), (2) several /../ (dot dot) sequences, (3) a missing URI, or (4) several ../ in a URI that does not begin with a / (slash) character.",CVE-2002-0298
278,Does not obey specified permissions when exporting.,CVE-2005-1724
278,"NFS on Apple Mac OS X 10.4.x up to 10.4.1 does not properly obey the -network or -mask flags for a filesystem and exports it to everyone, which allows remote attackers to bypass intended access restrictions.",CVE-2005-1724
282,Program runs setuid root but relies on a configuration file owned by a non-root user.,CVE-1999-1125
282,"Oracle Webserver 2.1 and earlier runs setuid root, but the configuration file is owned by the oracle account, which allows any local or remote attacker who obtains access to the oracle account to gain privileges or modify arbitrary files by modifying the configuration file.",CVE-1999-1125
30,"Protection mechanism checks for ""/.."" but doesn't account for Windows-specific ""\.."" allowing read of arbitrary files.",CVE-2002-1987
30,"Directory traversal vulnerability in view_source.jsp in Resin 2.1.2 allows remote attackers to read arbitrary files via a ""\.."" (backslash dot dot).",CVE-2002-1987
300,"chain: incorrect ""goto"" in Apple SSL product bypasses certificate validation, allowing MITM attack (Apple ""goto fail"" bug). CWE-705 (Incorrect Control Flow Scoping) -> CWE-561 (Dead Code) -> CWE-295 (Improper Certificate Validation) -> CWE-393 (Return of Wrong Status Code) -> CWE-300 (Channel Accessible by Non-Endpoint).",CVE-2014-1266
303,Conditional should have been an 'or' not an 'and'.,CVE-2003-0750
303,secure.php in PY-Membres 4.2 and earlier allows remote attackers to bypass authentication by setting the adminpy parameter.,CVE-2003-0750
31,"The administration function in Access Control Server allows remote attackers to read HTML, Java class, and image files outside the web root via a ""..\.."" sequence in the URL to port 2002.",CVE-2002-0160
31,"The administration function in Cisco Secure Access Control Server (ACS) for Windows, 2.6.x and earlier and 3.x through 3.01 (build 40), allows remote attackers to read HTML, Java class, and image files outside the web root via a ..\.. (modified ..) in the URL to port 2002.",CVE-2002-0160
314,Cleartext passwords in registry key.,CVE-2005-2227
314,"Softiacom wMailserver 1.0 stores passwords in plaintext in the Darsite\MAILSRV\Admin key, which allows local users to gain administrator privileges.",CVE-2005-2227
317,Unencrypted passwords stored in GUI dialog may allow local users to access the passwords.,CVE-2002-1848
317,"TightVNC before 1.2.4 running on Windows stores unencrypted passwords in the password text control of the WinVNC Properties dialog, which could allow local users to access passwords.",CVE-2002-1848
328,"Hard-coded hashed values for username and password contained in client-side script, allowing brute-force offline attacks.",CVE-2006-4068
328,"The pswd.js script relies on the client to calculate whether a username and password match hard-coded hashed values for a server, and uses a hashing scheme that creates a large number of collisions, which makes it easier for remote attackers to conduct offline brute force attacks.  NOTE: this script might also allow attackers to generate the server-side ""secret"" URL without determining the original password, but this possibility was not discussed by the original researcher.",CVE-2006-4068
34,"Mail server allows remote attackers to create arbitrary directories via a "".."" or rename arbitrary files via a ""....//"" in user supplied parameters.",CVE-2004-1670
34,"Multiple directory traversal vulnerabilities Merak Mail Server 7.4.5 with Icewarp Web Mail 5.2.7, and possibly other versions, allow remote attackers to (1) create arbitrary directories via a .. (dot dot) in the user parameter to viewaction.html or (2) rename arbitrary files via a ....// (doubled dot dot) in the folderold or folder parameters to folders.html.",CVE-2004-1670
344,"Component for web browser writes an error message to a known location, which can then be referenced by attackers to process HTML/script in a less restrictive context",CVE-2002-0980
344,"The Web Folder component for Internet Explorer 5.5 and 6.0 writes an error message to a known location in the temporary folder, which allows remote attackers to execute arbitrary code by injecting it into the error message, then referring to the error message file via a mhtml: URL.",CVE-2002-0980
349,Does not verify that trusted entity is authoritative for all entities in its response.,CVE-2002-0018
349,"In Microsoft Windows NT and Windows 2000, a trusting domain that receives authorization information from a trusted domain does not verify that the trusted domain is authoritative for all listed SIDs, which allows remote attackers to gain Domain Administrator privileges on the trusting domain by injecting SIDs from untrusted domains into the authorization data that comes from from the trusted domain.",CVE-2002-0018
351,Browser user interface does not distinguish between user-initiated and synthetic events.,CVE-2005-2260
351,"Product does not compare all required data in two separate elements, causing it to think they are the same, leading to loss of ACLs. Similar to Same Name error.",CVE-2005-2801
351,"The browser user interface in Firefox before 1.0.5, Mozilla before 1.7.9, and Netscape 8.0.2 and 7.2 does not properly distinguish between user-generated events and untrusted synthetic events, which makes it easier for remote attackers to perform dangerous actions that normally could only be performed manually by the user.",CVE-2005-2260
351,"xattr.c in the ext2 and ext3 file system code for Linux kernel 2.6 does not properly compare the name_index fields when sharing xattr blocks, which could prevent default ACLs from being applied.",CVE-2005-2801
357,User not sufficiently warned if host key mismatch occurs,CVE-2007-1099
357,"dbclient in Dropbear SSH client before 0.49 does not sufficiently warn the user when it detects a hostkey mismatch, which might allow remote attackers to conduct man-in-the-middle attacks.",CVE-2007-1099
40,FTP server allows a remote attacker to retrieve privileged web server system information by specifying arbitrary paths in the UNC format (\\computername\sharename).,CVE-2001-0687
40,"Broker FTP server 5.9.5 for Windows NT and 9x allows a remote attacker to retrieve privileged web server system information by (1) issuing a CD command (CD C:) followed by the LS command, (2) specifying arbitrary paths in the UNC format (\\computername\sharename).",CVE-2001-0687
408,Tool creates directories before authenticating user.,CVE-2004-2458
408,"Open WebMail 2.30 and earlier, when use_syshomedir is disabled or create_syshomedir is enabled, creates new directories before authenticating, which allows remote attackers to create arbitrary directories.",CVE-2004-2458
414,"Product does not properly check if a lock is present, allowing other attackers to access functionality.",CVE-2004-1056
414,"Direct Rendering Manager (DRM) driver in Linux kernel 2.6 does not properly check the DMA lock, which could allow remote attackers or local users to cause a denial of service (X Server crash) and possibly modify the video output.",CVE-2004-1056
43,Apache + Resin Reveals JSP Source Code ...,BUGTRAQ:20040205
43,Multiple trailing dot allows directory listing,CVE-2004-0281
43,"Caucho Technology Resin 2.1.12 allows remote attackers to gain sensitive information and view the contents of the /WEB-INF/ directory via an HTTP request for ""WEB-INF.."", which is equivalent to ""WEB-INF"" in Windows.",CVE-2004-0281
446,"UI inconsistency; visited URLs list not cleared when ""Clear History"" option is selected.",CVE-1999-1446
446,"Internet Explorer 3 records a history of all URL's that are visited by a user in DAT files located in the Temporary Internet Files and History folders, which are not cleared when the user selects the ""Clear History"" option, and are not visible when the user browses the folders because of tailored displays.",CVE-1999-1446
455,Product does not trigger a fatal error if missing or invalid ACLs are in a configuration file.,CVE-2005-1345
455,"Squid 2.5.STABLE9 and earlier does not trigger a fatal error when it identifies missing or invalid ACLs in the http_access configuration, which could lead to less restrictive ACLs than intended by the administrator.",CVE-2005-1345
48,Filenames with spaces allow arbitrary file deletion when the product does not properly quote them; some overlap with path traversal.,CVE-2000-0293
48,"""+"" characters in query string converted to spaces before sensitive file/extension (internal space), leading to bypass of access restrictions to the file.",CVE-2001-1567
48,"aaa_base in SuSE Linux 6.3, and cron.daily in earlier versions, allow local users to delete arbitrary files by creating files whose names include spaces, which are then incorrectly interpreted by aaa_base when it deletes expired files from the /tmp directory.",CVE-2000-0293
48,"Lotus Domino server 5.0.9a and earlier allows remote attackers to bypass security restrictions and view Notes database files and possibly sensitive Notes template files (.ntf) via an HTTP request with a large number of ""+"" characters before the .nsf file extension, which are converted to spaces by Domino.",CVE-2001-1567
483,"incorrect indentation of ""goto"" statement makes it more difficult to detect an incorrect goto (Apple's ""goto fail"")",CVE-2014-1266
51,Read files with full pathname using multiple internal slash.,CVE-2002-1483
51,"db4web_c and db4web_c.exe programs in DB4Web 3.4 and 3.6 allow remote attackers to read arbitrary files via an HTTP request whose argument is a filename of the form (1) C: (drive letter), (2) //absolute/path (double-slash), or (3) .. (dot-dot).",CVE-2002-1483
52,Directory listings in web server using multiple trailing slash,CVE-2002-1078
52,Abyss Web Server 1.0.3 allows remote attackers to list directory contents via an HTTP GET request that ends in a large number of / (slash) characters.,CVE-2002-1078
54,"ASP.NET allows remote attackers to bypass authentication for .aspx files in restricted directories via a request containing a (1) ""\"" (backslash) or (2) ""%5C"" (encoded backslash), aka ""Path Validation Vulnerability.""",CVE-2004-0847
54,"The Microsoft .NET forms authentication capability for ASP.NET allows remote attackers to bypass authentication for .aspx files in restricted directories via a request containing a (1) ""\"" (backslash) or (2) ""%5C"" (encoded backslash), aka ""Path Validation Vulnerability.""",CVE-2004-0847
56,"List directories using desired path and ""*""",CVE-2004-0696
56,"List files in web server using ""*.ext""",CVE-2002-0433
56,"The ShellExample.cgi script in 4D WebSTAR 5.3.2 and earlier allows remote attackers to list arbitrary directories via a URL with the desired path and a ""*"" (asterisk) character.",CVE-2004-0696
56,"Pi3Web 2.0.0 allows remote attackers to view restricted files via an HTTP request containing a ""*"" (wildcard or asterisk) character.",CVE-2002-0433
561,"chain: incorrect ""goto"" in Apple SSL product bypasses certificate validation, allowing MITM attack (Apple ""goto fail"" bug). CWE-705 (Incorrect Control Flow Scoping) -> CWE-561 (Dead Code) -> CWE-295 (Improper Certificate Validation) -> CWE-393 (Return of Wrong Status Code) -> CWE-300 (Channel Accessible by Non-Endpoint).",CVE-2014-1266
603,Client-side check for a password allows access to a server using crafted XML requests from a modified client.,CVE-2006-0230
603,"Symantec Scan Engine 5.0.0.24, and possibly other versions before 5.1.0.7, uses a client-side check to verify a password, which allows remote attackers to gain administrator privileges via a modified client that sends certain XML requests.",CVE-2006-0230
628,"The method calls the functions with the wrong argument order, which allows remote attackers to bypass intended access restrictions.",CVE-2006-7049
628,"The Method method in WikkaWiki (Wikka Wiki) before 1.1.6.2 calls the strstr and strrpos functions with the wrong argument order, which allows remote attackers to bypass intended access restrictions and access arbitrary PHP files.",CVE-2006-7049
638,Server does not properly validate client certificates when reusing cached connections.,CVE-2007-0408
638,"BEA Weblogic Server 8.1 through 8.1 SP4 does not properly validate client certificates when reusing cached connections, which allows remote attackers to obtain access via an untrusted X.509 certificate.",CVE-2007-0408
663,unsafe calls to library functions from signal handler,CVE-2001-1349
663,SIGCHLD signal to FTP server can cause crash under heavy load while executing non-reentrant functions like malloc/free.,CVE-2004-2259
663,"Sendmail before 8.11.4, and 8.12.0 before 8.12.0.Beta10, allows local users to cause a denial of service and possibly corrupt the heap and gain privileges via race conditions in signal handlers.",CVE-2001-1349
663,"vsftpd before 1.2.2, when under heavy load, allows attackers to cause a denial of service (crash) via a SIGCHLD signal during a malloc or free call, which is not re-entrant.",CVE-2004-2259
680,chain: unchecked message size metadata allows integer overflow (CWE-190) leading to buffer overflow (CWE-119).,CVE-2017-1000121
683,"Application calls functions with arguments in the wrong order, allowing attacker to bypass intended access restrictions.",CVE-2006-7049
683,"The Method method in WikkaWiki (Wikka Wiki) before 1.1.6.2 calls the strstr and strrpos functions with the wrong argument order, which allows remote attackers to bypass intended access restrictions and access arbitrary PHP files.",CVE-2006-7049
688,"Kernel code specifies the wrong variable in first argument, leading to resultant NULL pointer dereference.",CVE-2005-2548
688,"vlan_dev.c in the VLAN code for Linux kernel 2.6.8 allows remote attackers to cause a denial of service (kernel oops from null dereference) via certain UDP packets that lead to a function call with the wrong argument, as demonstrated using snmpwalk on snmpd.",CVE-2005-2548
694,"chain: mobile OS verifies cryptographic signature of file in an archive, but then installs a different file with the same name that is also listed in the archive.",CVE-2013-4787
697,"Proxy performs incorrect comparison of request headers, leading to infoleak",CVE-2016-10003
705,"chain: incorrect ""goto"" in Apple SSL product bypasses certificate validation, allowing MITM attack (Apple ""goto fail"" bug). CWE-705 (Incorrect Control Flow Scoping) -> CWE-561 (Dead Code) -> CWE-295 (Improper Certificate Validation) -> CWE-393 (Return of Wrong Status Code) -> CWE-300 (Channel Accessible by Non-Endpoint).",CVE-2014-1266
72,Server allows remote attackers to read files and resource fork content via HTTP requests to certain special file names related to multiple data streams in HFS+.,CVE-2004-1084
72,"Apache for Apple Mac OS X 10.2.8 and 10.3.6 allows remote attackers to read files and resource fork content via HTTP requests to certain special file names related to multiple data streams in HFS+, which bypass Apache file handles.",CVE-2004-1084
733,"C compiler optimization, as allowed by specifications, removes code that is used to perform checks to detect integer overflows.",CVE-2008-1685
733,"** DISPUTED **  gcc 4.2.0 through 4.3.0 in GNU Compiler Collection, when casts are not used, considers the sum of a pointer and an int to be greater than or equal to the pointer, which might lead to removal of length testing code that was intended as a protection mechanism against integer overflow and buffer overflow attacks, and provide no diagnostic message about this removal. NOTE: the vendor has determined that this compiler behavior is correct according to section 6.5.6 of the C99 standard (aka ISO/IEC 9899:1999).",CVE-2008-1685
758,Change in C compiler behavior causes resultant buffer overflows in programs that depend on behaviors that were undefined in the C standard.,CVE-2006-1902
758,"fold_binary in fold-const.c in GNU Compiler Collection (gcc) 4.1 improperly handles pointer overflow when folding a certain expr comparison to a corresponding offset comparison in cases other than EQ_EXPR and NE_EXPR, which might introduce buffer overflow vulnerabilities into applications that could be exploited by context-dependent attackers.NOTE: the vendor states that the essence of the issue is ""not correctly interpreting an offset to a pointer as a signed value.""",CVE-2006-1902
765,"Attacker provides invalid address to a memory-reading function, causing a mutex to be unlocked twice",CVE-2009-0935
766,variables declared public allows remote read of system properties such as user name and home directory.,CVE-2010-3860
799,Mail server allows attackers to prevent other users from accessing mail by sending large number of rapid requests.,CVE-2002-1876
799,"Microsoft Exchange 2000 allows remote authenticated attackers to cause a denial of service via a large number of rapid requests, which consumes all of the licenses that are granted to Exchange by IIS.",CVE-2002-1876
86,"XSS filter doesn't filter null characters before looking for dangerous tags, which are ignored by web browsers. Multiple Interpretation Error (MIE) and validate-before-cleanse.",CVE-2004-0595
86,"The strip_tags function in PHP 4.x up to 4.3.7, and 5.x up to 5.0.0RC3, does not filter null (\0) characters within tag names when restricting input to allowed tags, which allows dangerous tags to be processed by web browsers such as Internet Explorer and Safari, which ignore null characters and facilitate the exploitation of cross-site scripting (XSS) vulnerabilities.",CVE-2004-0595
87,"XSS using ""&={script}"".",CVE-2002-0738
87,"MHonArc 2.5.2 and earlier does not properly filter Javascript from archived e-mail messages, which could allow remote attackers to execute script in web clients by (1) splitting the SCRIPT tag into smaller pieces, (2) including the script in a SRC argument to an IMG tag, or (3) using ""&={script}"" syntax.",CVE-2002-0738
939,URL scheme has action replace which requires no user prompt and allows remote attackers to perform undesired actions.,CVE-2013-5725
939,URL scheme has action follow and favorite which allows remote attackers to force user to perform undesired actions.,CVE-2013-5726
670,"An elevation of privilege vulnerability in the kernel Qualcomm power driver could enable a local malicious application to execute arbitrary code within the context of the kernel. This issue is rated as Critical due to the possibility of a local permanent device compromise, which may require reflashing the operating system to repair the device. Product: Android. Versions: N/A. Android ID: A-35392981. References: QC-CR#826589.",CVE-2017-0604
769,"The net/http package's Request.ParseMultipartForm method starts writing to temporary files once the request body size surpasses the given ""maxMemory"" limit. It was possible for an attacker to generate a multipart request crafted such that the server ran out of file descriptors.",CVE-2017-1000098
769,"Kibana versions prior to 5.2.1 configured for SSL client access, file descriptors will fail to be cleaned up after certain requests and will accumulate over time until the process crashes.",CVE-2017-8452
1,"In all Qualcomm products with Android releases from CAF using the Linux kernel, the UE can send unprotected MeasurementReports revealing UE location.",CVE-2016-10380
1,"In all Qualcomm products with Android releases from CAF using the Linux kernel, the UE can send unprotected MeasurementReports revealing UE location.",CVE-2016-10381
21,"The filesystem storage backend in Radicale before 1.1 on Windows allows remote attackers to read or write to arbitrary files via a crafted path, as demonstrated by /c:/file/ignore.",CVE-2016-1505
664,"The TrustZone driver in Huawei P9 phones with software Versions earlier than EVA-AL10C00B352 and P9 Lite with software VNS-L21C185B130 and earlier versions and P8 Lite with software ALE-L02C636B150 and earlier versions has an improper resource release vulnerability, which allows attackers to cause a system restart or privilege elevation.",CVE-2016-8763
21,yard before 0.9.20 allows path traversal.,CVE-2019-1020001
21,"routers/ajaxRouter.php in doorGets 7.0 has a web site physical path leakage vulnerability, as demonstrated by an ajax/index.php?uri=1234%5c request.",CVE-2019-11626
216,"A vulnerability in the CLI of Cisco Unified Communications Domain Manager (Cisco Unified CDM) Software could allow an authenticated, local attacker to escape the restricted shell. The vulnerability is due to insufficient input validation of shell commands. An attacker could exploit this vulnerability by executing crafted commands in the shell. A successful exploit could allow the attacker to escape the restricted shell and access commands in the context of the restricted shell user, which does not have root privileges.",CVE-2019-1911
371,"A vulnerability within the Endpoint Learning feature of Cisco Nexus 9000 Series Switches running in Application Centric Infrastructure (ACI) mode could allow an unauthenticated, remote attacker to cause a denial of service (DoS) condition on an endpoint device in certain circumstances. The vulnerability is due to improper endpoint learning when packets are received on a specific port from outside the ACI fabric and destined to an endpoint located on a border leaf when Disable Remote Endpoint Learning has been enabled. This can result in a Remote (XR) entry being created for the impacted endpoint that will become stale if the endpoint migrates to a different port or leaf switch. This results in traffic not reaching the impacted endpoint until the Remote entry can be relearned by another mechanism.",CVE-2019-1977
706,"runc through 1.0.0-rc9 has Incorrect Access Control leading to Escalation of Privileges, related to libcontainer/rootfs_linux.go. To exploit this, an attacker must be able to spawn two containers with custom volume-mount configurations, and be able to run custom images. (This vulnerability does not affect Docker due to an implementation detail that happens to block the attack.)",CVE-2019-19921
216,"runc through 1.0-rc6, as used in Docker before 18.09.2 and other products, allows attackers to overwrite the host runc binary (and consequently obtain host root access) by leveraging the ability to execute a command as root within one of these types of containers: (1) a new container with an attacker-controlled image, or (2) an existing container, to which the attacker previously had write access, that can be attached with docker exec. This occurs because of file-descriptor mishandling, related to /proc/self/exe.",CVE-2019-5736
664,Process lifetime issue in Chrome in Google Chrome on Android prior to 74.0.3729.108 allowed a remote attacker to potentially persist an exploited process via a crafted HTML page.,CVE-2019-5816
21,Absolute path traversal vulnerability in the MapAPI in Infoware MapSuite before 1.0.36 and 1.1.x before 1.1.49 allows remote attackers to read arbitrary files via unspecified vectors.,CVE-2014-2232
670,Ansible prior to 1.5.4 mishandles the evaluation of some strings.,CVE-2014-2686
371,"A vulnerability in the TCP socket code of Cisco IOS and IOS XE Software could allow an unauthenticated, remote attacker to cause an affected device to reload. The vulnerability is due to a state condition between the socket state and the transmission control block (TCB) state. While this vulnerability potentially affects all TCP applications, the only affected application observed so far is the HTTP server. An attacker could exploit this vulnerability by sending specific HTTP requests at a sustained rate to a reachable IP address of the affected software. A successful exploit could allow the attacker to cause the affected device to reload, resulting in a denial of service (DoS) condition on an affected device.",CVE-2018-0282
769,"A vulnerability in the file descriptor handling of Cisco TelePresence Video Communication Server (VCS) Expressway could allow an unauthenticated, remote attacker to cause a denial of service (DoS) condition. The vulnerability is due to exhaustion of file descriptors while processing a high volume of traffic. An attacker could exploit this vulnerability by establishing a high number of concurrent TCP connections to the vulnerable system. An exploit could allow the attacker to cause a restart in a specific process, resulting in a temporary interruption of service. Cisco Bug IDs: CSCvh77056, CSCvh77058, CSCvh95264.",CVE-2018-0358
774,Minio Inc. Minio S3 server version prior to RELEASE.2018-05-16T23-35-33Z contains a Allocation of Memory Without Limits or Throttling (similar to CWE-774) vulnerability in write-to-RAM that can result in Denial of Service. This attack appear to be exploitable via Sending V4-(pre)signed requests with large bodies . This vulnerability appears to have been fixed in after commit 9c8b7306f55f2c8c0a5c7cea9a8db9d34be8faa7.,CVE-2018-1000538
706,"mainproc.c in GnuPG before 2.2.8 mishandles the original filename during decryption and verification actions, which allows remote attackers to spoof the output that GnuPG sends on file descriptor 2 to other programs that use the ""--status-fd 2"" option. For example, the OpenPGP data might represent an original filename that contains line feed characters in conjunction with GOODSIG or VALIDSIG status codes.",CVE-2018-12020
769,"A null-pointer dereference vulnerability was found in libtirpc before version 0.3.3-rc3. The return value of makefd_xprt() was not checked in all instances, which could lead to a crash when the server exhausted the maximum number of available file descriptors. A remote attacker could cause an rpc-based application to crash by flooding it with new connections.",CVE-2018-14622
405,A vulnerability in the lservnt.exe component of Sentinel License Manager version 8.5.3.35 (fixed in 8.5.3.2403) causes UDP amplification.,CVE-2018-15492
398,"NUUO CMS all versions 3.1 and prior, The application uses insecure and outdated software components for functionality, which could allow arbitrary code execution.",CVE-2018-17890
706,"In OpenSSH 7.9, scp.c in the scp client allows remote SSH servers to bypass intended access restrictions via the filename of . or an empty filename. The impact is modifying the permissions of the target directory on the client side.",CVE-2018-20685
706,Making URLs clickable and allowing them to be styled in DevTools in Google Chrome prior to 66.0.3359.117 allowed a remote attacker to bypass navigation restrictions via a crafted HTML page.,CVE-2018-6112
102,"The application uses multiple validation forms with the same name, which might cause the Struts Validator to validate a form that the programmer does not expect.",
102,"If two validation forms have the same name, the Struts Validator arbitrarily chooses one of the forms to use for input validation and discards the other. This decision might not correspond to the programmer's expectations, possibly leading to resultant weaknesses. Moreover, it indicates that the validation logic is not up-to-date, and can indicate that other, more subtle validation errors are present.",
1022,"The web application produces links to untrusted external sites outside of its sphere of control, but it does not properly prevent the external site from modifying  security-critical properties of the window.opener object, such as the location property.",
1022,"When a user clicks a link to an external site (""target""), the target=""_blank"" attribute causes the target site's contents to be opened in a new window or tab, which runs in the same process as the original page. The window.opener object records information about the original page that offered the link.  If an attacker can run script on the target page, then they could read or modify certain properties of the window.opener object, including the location property - even if the original and target site are not the same origin.  An attacker can modify the location property to automatically redirect the user to a malicious site, e.g. as part of a phishing attack. Since this redirect happens in the original window/tab - which is not necessarily visible, since the browser is focusing the display on the new target page - the user might not notice any suspicious redirection.",
1022,The user may be redirected to an untrusted page that contains undesired content or malicious script code.,
1022,This weakness is introduced during the design of an application when the architect does not specify that a linked external document should not be able to alter the location of the calling page.,
1022,This weakness is introduced during the coding of an application when the developer does not include the noopener and/or noreferrer value for the rel attribute.,
1023,"The software performs a comparison between entities that must consider multiple factors or characteristics of each entity, but the comparison does not include one or more of these factors.",
1023,"  An incomplete comparison can lead to resultant weaknesses, e.g., by operating on the wrong object or making a security decision without considering a required factor.   ",
1024,"The software performs a comparison between two entities, but the entities are of different, incompatible types that cannot be guaranteed to provide correct results when they are directly compared.",
1024,"In languages that are strictly typed but support casting/conversion, such as C or C++, the programmer might assume that casting one entity to the same type as another entity will ensure that the comparison will be performed correctly, but this cannot be guaranteed.  In languages that are not strictly typed, such as PHP or JavaScript, there may be implicit casting/conversion to a type that the programmer is unaware of, causing unexpected results; for example, the string ""123"" might be converted to a number type.  See examples.",
1025,"The code performs a comparison between two entities, but the comparison examines the wrong factors or characteristics of the entities, which can lead to incorrect results and resultant weaknesses.",
1025,"This can lead to incorrect results and resultant weaknesses.  For example, the code might inadvertently compare references to objects, instead of the relevant contents of those objects, causing two ""equal"" objects to be considered unequal.",
103,"The application has a validator form that either does not define a validate() method, or defines a validate() method but does not call super.validate().",
103,"If you do not call super.validate(), the Validation Framework cannot check the contents of the form against a validation form. In other words, the validation framework will be disabled for the given form.",
103,"The Struts Validator uses a form's validate() method to check the contents of the form properties against the constraints specified in the associated validation form. That means the following classes have a validate() method that is part of the validation framework: ValidatorForm, ValidatorActionForm, DynaValidatorForm, and DynaValidatorActionForm. If you create a class that extends one of these classes, and if your class implements custom validation logic by overriding the validate() method, you must call super.validate() in your validate() implementation.",
103,"Disabling the validation framework for a form exposes the application to numerous types of attacks. Unchecked input is the root cause of vulnerabilities like cross-site scripting, process control, and SQL injection.",
103,"Although J2EE applications are not generally susceptible to memory corruption attacks, if a J2EE application interfaces with native code that does not perform array bounds checking, an attacker may be able to use an input validation mistake in the J2EE application to launch a buffer overflow attack.",
1038,"The product uses a mechanism that automatically optimizes code, e.g. to improve a characteristic such as performance, but the optimizations can have an unintended side effect that might violate an intended security assumption.",
1038,The optimizations alter the order of execution resulting in side effects that were not intended by the original developer.,
1038,Optimizations built into the design of a product can have unintended consequences during execution.,
104,"If a form bean does not extend an ActionForm subclass of the Validator framework, it can expose the application to other weaknesses related to insufficient input validation.",
104,"In order to use the Struts Validator, a form must extend one of the following: ValidatorForm, ValidatorActionForm, DynaValidatorActionForm, and DynaValidatorForm. You must extend one of these classes because the Struts Validator ties in to your application by implementing the validate() method in these classes. Forms derived from the ActionForm and DynaActionForm classes cannot use the Struts Validator.",
104,"Bypassing the validation framework for a form exposes the application to numerous types of attacks. Unchecked input is an important component of vulnerabilities like cross-site scripting, process control, and SQL injection.",
104,"Although J2EE applications are not generally susceptible to memory corruption attacks, if a J2EE application interfaces with native code that does not perform array bounds checking, an attacker may be able to use an input validation mistake in the J2EE application to launch a buffer overflow attack.",
1041,"The software has multiple functions, methods, procedures, macros, etc. that  contain the same code.",
1042,"The code contains a member element that is declared as static (but not final), in which  its parent class element   is not a singleton class - that is, a class element that can be used only once in  the 'to' association of a Create action.",
1043,The software uses a data element that has an excessively large  number of sub-elements with non-primitive data types such as structures or aggregated objects.,
1043,"This issue can make the software perform more slowly.  If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.",
1043,"While the interpretation of ""excessively large"" may vary for each product or developer, CISQ recommends a default of 5 sub-elements.",
1044,The software's architecture contains too many - or too few -  horizontal layers.,
1044,"This issue makes it more difficult to maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.",
1044,"While the interpretation of ""expected range"" may vary for each product or developer, CISQ recommends a default minimum of 4 layers and maximum of 8 layers.",
1045,"A parent class has a virtual destructor method, but the parent has a child class that does not have a virtual destructor.",
1046,The software creates an immutable text string using string concatenation operations.,
1047,"The software contains modules in which one module has references that cycle back to itself, i.e., there are circular dependencies.",
1047,"As an example, with Java, this weakness might indicate cycles between packages.",
1047,"This issue makes it more difficult to maintain the software due to insufficient modularity, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.",
1047,"This issue can prevent the software from running reliably.  If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.",
1048,"The code contains callable control elements that    contain an excessively large number of references to other    application objects external to the context of the callable,    i.e. a Fan-Out value that is excessively large.",
1048,"While the interpretation of ""excessively large Fan-Out value"" may vary for each product or developer, CISQ recommends a default of 5 referenced objects.",
1048,"This issue makes it more difficult to maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.",
1049,The software performs a data query with a large number of joins  and sub-queries on a large data table.,
1049,"This issue can make the software perform more slowly.  If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.",
1049,"While the interpretation of ""large data table"" and ""large number of joins or sub-queries"" may vary for each product or developer, CISQ recommends a default of 1 million rows for a ""large"" data table, a default minimum of 5 joins, and a default minimum of 3 sub-queries.",
105,"The application has a form field that is not validated by a corresponding validation form, which can introduce other weaknesses related to insufficient input validation.",
105,"Omitting validation for even a single input field may give attackers the leeway they need to compromise the application. Although J2EE applications are not generally susceptible to memory corruption attacks, if a J2EE application interfaces with native code that does not perform array bounds checking, an attacker may be able to use an input validation mistake in the J2EE application to launch a buffer overflow attack.",
105,"If unused fields are not validated, shared business logic in an action may allow attackers to bypass the validation checks that are performed for other uses of the form.",
105,"Some applications use the same ActionForm for more than one purpose. In situations like this, some fields may go unused under some action mappings.",
1050,"The software has a loop body or loop condition that contains a control element that directly or  indirectly consumes platform resources, e.g. messaging, sessions, locks, or file  descriptors.",
1051,The software initializes data using hard-coded values that act as network resource identifiers.,
1052,The software initializes a data element using a hard-coded  literal that is not a simple integer or static constant element.,
1053,The product does not have documentation that represents how it is designed.,
1054,"The code at one architectural layer invokes code that resides  at a deeper layer than the adjacent layer, i.e., the invocation skips at least one  layer, and the invoked code is not part of a vertical utility layer that can be referenced from any horizontal layer.",
1055,The software contains a class with inheritance from more than  one concrete class.,
1056,A named-callable or method control element has a signature that  supports a variable (variadic) number of parameters or arguments.,
1056,"This issue can prevent the software from running reliably.  If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.",
1056,"With variadic arguments, it can be difficult or inefficient for manual analysis to be certain of which function/method is being invoked.",
1057,"The software uses a dedicated, central data manager component as required by design, but it contains code that performs data-access operations that do not use this data manager.",
1058,The code contains a function or method that  operates in a multi-threaded environment but owns an unsafe non-final        static storable or member data element.,
1059,"The documentation, whether on paper or in electronic form, does  not contain descriptions of all the relevant elements of the product, such as  its usage, structure, interfaces, design, implementation, configuration,  operation, etc.",
106,"When an application does not use an input validation framework such as the Struts Validator, there is a greater risk of introducing weaknesses related to insufficient input validation.",
106,"Unchecked input is the leading cause of vulnerabilities in J2EE applications. Unchecked input leads to cross-site scripting, process control, and SQL injection vulnerabilities, among others.",
106,"Although J2EE applications are not generally susceptible to memory corruption attacks, if a J2EE application interfaces with native code that does not perform array bounds checking, an attacker may be able to use an input validation mistake in the J2EE application to launch a buffer overflow attack.",
1060,The software performs too many data queries without using efficient data processing functionality such as stored procedures.,
1060,"This issue can make the software perform more slowly due to computational expense.  If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.",
1060,"While the interpretation of ""too many data queries"" may vary for each product or developer, CISQ recommends a default maximum of 5 data queries for an inefficient function/procedure.",
1061,"The software does not sufficiently hide the internal representation and implementation details of data or methods, which might allow external components or modules to modify data unexpectedly, invoke unexpected functionality, or introduce dependencies that the programmer did not intend.",
1062,"The code has a parent class that contains references to a child class, its methods, or its members.",
1063,A static code block creates an instance of a class.,
1063,This pattern identifies situations where a storable data element or member data element is initialized with a value in a block of code which is declared as static.,
1063,"This issue can make the software perform more slowly by performing initialization before it is needed.  If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.",
1064,"The software contains a function, subroutine, or method whose signature has an unnecessarily large number of  parameters/arguments.",
1064,"This issue makes it more difficult to understand and/or maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.",
1064,"While the interpretation of ""large number of parameters."" may vary for each product or developer, CISQ recommends a default maximum of 7 parameters/arguments.",
1065,"The application uses deployed components from application servers, but it also uses low-level functions/methods for management of resources, instead of the API provided by the application server.",
1066,The software contains a serializable data element that does not  have an associated serialization method.,
1066,"This issue can prevent the software from running reliably, e.g. by triggering an exception.  If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.",
1066,"As examples, the serializable nature of a data element comes from a serializable SerializableAttribute attribute in .NET and the inheritance from the java.io.Serializable interface in Java.",
1067,The software contains a data query against an SQL table or view  that is configured in a way that does not utilize an index and may cause  sequential searches to be performed.,
1068,The implementation of the product is not consistent with the  design as described within the relevant documentation.,
1069,"An invokable code block contains an exception handling block that does not contain any code, i.e. is empty.",
107,An unused validation form indicates that validation logic is not up-to-date.,
107,It is easy for developers to forget to update validation logic when they remove or rename action form mappings. One indication that validation logic is not being properly maintained is the presence of an unused validation form.,
1070,"The software contains a serializable, storable data element such as a field or member,  but the data element contains member elements that are not  serializable.",
1070,"This issue can prevent the software from running reliably.  If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.",
1070,"As examples, the serializable nature of a data element comes from a serializable SerializableAttribute attribute in .NET and the inheritance from the java.io.Serializable interface in Java.",
1071,"The source code contains a block that does not contain any code, i.e., the block is empty.",
1072,The software accesses a data resource through a database without using a  connection pooling capability.,
1073,"The software contains a client with a function or method that contains a large number of data accesses/queries that are sent through a data manager, i.e., does not use efficient database capabilities.",
1073,"This issue can make the software perform more slowly.  If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.",
1073,"While the interpretation of ""large number of data accesses/queries"" may vary for each product or developer, CISQ recommends a default maximum of 2 data accesses per function/method.",
1074,"A class has an inheritance level that is too high, i.e., it  has a large number of parent classes.",
1074,"This issue makes it more difficult to understand and maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.",
1074,"While the interpretation of ""large number of parent classes"" may vary for each product or developer, CISQ recommends a default maximum of 7 parent classes.",
1075,"The software performs unconditional control transfer (such as a  ""goto"") in code outside of a branching structure such as a switch  block.",
1076,"The product's architecture, source code, design, documentation,  or other artifact does not follow required conventions.",
1077,"The code performs a comparison such as an   equality test between two float (floating point) values, but   it uses comparison operators that do not account for the   possibility of loss of precision.",
1077,"Numeric calculation using floating point values   can generate imprecise results because of rounding errors.   As a result, two different calculations might generate   numbers that are mathematically equal, but have slightly   different bit representations that do not translate to the   same mathematically-equal values.  As a result, an equality   test or other comparison might produce unexpected   results.",
1077,"This issue can prevent the software from running reliably.  If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.",
1078,"The source code does not follow   desired style or formatting for indentation, white   space, comments, etc.",
1079,"A parent class contains one or more child classes, but the parent class does not have a virtual destructor method.",
108,Every Action Form must have a corresponding validation form.,
108,"If a Struts Action Form Mapping specifies a form, it must have a validation form defined under the Struts Validator.",
108,"If an action form mapping does not have a validation form defined, it may be vulnerable to a number of attacks that rely on unchecked input. Unchecked input is the root cause of some of today's worst and most common software security problems. Cross-site scripting, SQL injection, and process control vulnerabilities all stem from incomplete or absent input validation.",
108,"Although J2EE applications are not generally susceptible to memory corruption attacks, if a J2EE application interfaces with native code that does not perform array bounds checking, an attacker may be able to use an input validation mistake in the J2EE application to launch a buffer overflow attack.",
1080,A source code file has too many lines of  code.,
1080,"This issue makes it more difficult to understand and/or maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.",
1080,"While the interpretation of ""too many lines of code"" may vary for each product or developer, CISQ recommends a default threshold value of 1000.",
1082,The code contains a class instance that calls the method or function to delete or destroy itself.,
1082,"For example, in C++, ""delete this"" will cause the object to delete itself.",
1082,"This issue can prevent the software from running reliably.  If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.",
1083,"The software is intended to manage data access through a particular data manager component such as a relational or non-SQL database, but it contains code that performs data access operations without using that component.",
1083,"When the software has a data access component, the design may be intended to handle all data access operations through that component.  If a data access operation is performed outside of that component, then this may indicate a violation of the intended design.",
1083,"This issue can prevent the software from running reliably.  If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.",
1084,A function or method contains too many  operations that utilize a data manager or file resource.,
1084,"This issue makes it more difficult to maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.",
1084,"While the interpretation of ""too many operations"" may vary for each product or developer, CISQ recommends a default maximum of 7 operations for the same data manager or file.",
1085,"A function, method, procedure, etc. contains an excessive amount of code that has been  commented out within its body.",
1085,"This issue makes it more difficult to maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.",
1085,"While the interpretation of ""excessive volume"" may vary for each product or developer, CISQ recommends a default threshold of 2% of commented code.",
1086,A class contains an unnecessarily large number of  children.,
1086,"This issue makes it more difficult to understand and maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.",
1086,"While the interpretation of ""large number of children"" may vary for each product or developer, CISQ recommends a default maximum of 10 child classes.",
1087,"A class contains a virtual method, but the method does not have an associated virtual destructor.",
1088,"The code has a synchronous call to a remote resource, but there is no timeout for the call, or the timeout is set to infinite.",
1089,The software uses a large data table that contains an excessively large number of  indices.,
1089,"This issue can make the software perform more slowly.  If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.",
1089,"While the interpretation of ""large data table"" and ""excessively large number of indices"" may vary for each product or developer, CISQ recommends a default threshold of 1000000 rows for a ""large"" table and a default threshold of 3 indices.",
109,"Automatic filtering via a Struts bean has been turned off, which disables the Struts Validator and custom validation logic. This exposes the application to other weaknesses related to insufficient input validation.",
1090,A method for a class performs an operation that directly  accesses a member element from another class.,
1091,The software contains a method that accesses an object but does not later invoke  the element's associated finalize/destructor method.,
1092,The software uses the same control element across multiple  architectural layers.,
1093,The software uses an unnecessarily complex internal representation for its data structures or interrelationships between those structures.,
1094,"The software contains an index range scan for a large data table,  but the scan can cover a large number of rows.",
1094,"This issue can make the software perform more slowly.  If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.",
1094,"While the interpretation of ""large data table"" and ""excessive index range"" may vary for each product or developer, CISQ recommends a threshold of 1000000 table rows and a threshold of 10 for the index range.",
1095,The software uses a loop with a control flow condition based on  a value that is updated within the body of the loop.,
1096,The software implements a Singleton design pattern but does not use appropriate locking or other synchronization mechanism to ensure that the singleton class is only instantiated once.,
1097,The software uses a storable data element that does not have  all of the associated functions or methods that are necessary to support  comparison.,
1097,"For example, with Java, a class that is made persistent requires both hashCode() and equals() methods to be defined.",
1097,"This issue can prevent the software from running reliably, due to incorrect or unexpected comparison results.  If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.",
1098,The code contains a data element with a pointer that does not have an associated copy or constructor method.,
1099,"The product's code, documentation, or other artifacts do not  consistently use the same naming conventions for variables, callables, groups of  related callables, I/O capabilities, data types, file names, or similar types of  elements.",
11,Debugging messages help attackers learn about the system and plan a form of attack.,
11,ASP .NET applications can be configured to produce debug binaries. These binaries give detailed debugging messages and should not be used in production environments. Debug binaries are meant to be used in a development or testing environment and can pose a security risk if they are deployed to production.,
11,The debug attribute of the <compilation> tag defines whether compiled binaries should include debugging information. The use of debug binaries causes an application to provide as much information about itself as possible to the user.,
11,"Attackers can leverage the additional information they gain from debugging output to mount attacks targeted on the framework, database, or other resources used by the application.",
110,Validation fields that do not appear in forms they are associated with indicate that the validation logic is out of date.,
110,It is easy for developers to forget to update validation logic when they make changes to an ActionForm class. One indication that validation logic is not being properly maintained is inconsistencies between the action form and the validation form.,
110,"Although J2EE applications are not generally susceptible to memory corruption attacks, if a J2EE application interfaces with native code that does not perform array bounds checking, an attacker may be able to use an input validation mistake in the J2EE application to launch a buffer overflow attack.",
110,"It is critically important that validation logic be maintained and kept in sync with the rest of the application. Unchecked input is the root cause of some of today's worst and most common software security problems. Cross-site scripting, SQL injection, and process control vulnerabilities all stem from incomplete or absent input validation.",
1100,The product or code does not isolate system-dependent  functionality into separate standalone modules.,
1101,The product uses automatically-generated code that cannot be  executed without a specific runtime support component.,
1102,"The code uses a data representation that relies on low-level  data representation or constructs that may vary across different processors,  physical machines, OSes, or other physical components.",
1103,The product relies on third-party software components that do  not provide equivalent functionality across all desirable  platforms.,
1104,The product relies on third-party components that are not  actively supported or maintained by the original developer or a trusted proxy  for the original developer.,
1104,"Reliance on components that are no longer maintained can make it difficult or impossible to fix significant bugs, vulnerabilities, or quality issues. In effect, unmaintained code can become obsolete.",
1104,"This issue makes it more difficult to maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.",
1105,"The product or code uses machine-dependent functionality, but  it does not sufficiently encapsulate or isolate this functionality from  the rest of the code.",
1106,"The source code uses literal constants that may need to change  or evolve over time, instead of using symbolic constants.",
1107,"The source code uses symbolic constants, but it does not  sufficiently place the definitions of these constants into a more centralized or  isolated location.",
1108,"The code is structured in a way that relies too much on using  or setting global variables throughout various points in the code, instead of  preserving the associated information in a narrower, more local  context.",
1109,"The code contains a callable, block, or other code element in  which the same variable is used to control more than one unique task or store  more than one instance of data.",
1109,"Use of the same variable for multiple purposes can make it more difficult for a person to read or understand the code, potentially hiding other quality issues.",
1109,"This issue makes it more difficult to maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.",
111,"When a Java application uses the Java Native Interface (JNI) to call code written in another programming language, it can expose the application to weaknesses in that code, even if those weaknesses cannot occur in Java.",
111,"Many safety features that programmers may take for granted simply do not apply for native code, so you must carefully review all such code for potential problems. The languages used to implement native code may be more susceptible to buffer overflows and other attacks. Native code is unprotected by the security features enforced by the runtime environment, such as strong typing and array bounds checking.",
1110,"The product's design documentation does not adequately describe  control flow, data flow, system initialization, relationships between tasks,  components, rationales, or other important aspects of the  design.",
1111,"The product's documentation does not adequately define inputs,  outputs, or system/software interfaces.",
1112,The document does not fully define all mechanisms that are used  to control or influence how product-specific programs are  executed.,
1113,The source code uses comment styles or formats that are  inconsistent or do not follow expected standards for the  product.,
1114,The source code contains whitespace that is inconsistent across  the code or does not follow expected standards for the  product.,
1115,The source code contains elements such as source files   that do not consistently provide a prologue or header that has been  standardized for the project.,
1115,"The lack of a prologue can make it more difficult to accurately and quickly understand the associated code. Standard prologues or headers may contain information such as module name, version number, author, date, purpose, function, assumptions, limitations, accuracy considerations, etc.",
1115,"This issue makes it more difficult to maintain the software due to insufficient analyzability, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.",
1116,The source code contains comments that do not accurately  describe or explain aspects of the portion of the code with which the comment is  associated.,
1116,"When a comment does not accurately reflect the associated code elements, this can introduce confusion to a reviewer (due to inconsistencies) or make it more difficult and less efficient to validate that the code is implementing the intended behavior correctly.",
1116,"This issue makes it more difficult to maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.",
1117,"The code contains a function or method whose signature and/or associated  inline documentation does not sufficiently describe the callable's inputs, outputs,  side effects, assumptions, or return codes.",
1118,"The documentation does not sufficiently describe the techniques  that are used for error handling, exception processing, or similar  mechanisms.",
1119,"The code uses too many unconditional branches (such as  ""goto"").",
112,The software accepts XML from an untrusted source but does not validate the XML against the proper schema.,
112,"Most successful attacks begin with a violation of the programmer's assumptions. By accepting an XML document without validating it against a DTD or XML schema, the programmer leaves a door open for attackers to provide unexpected, unreasonable, or malicious input.",
1120,"The code is too complex, as calculated using a well-defined,  quantitative measure.",
1120,"This issue makes it more difficult to understand and/or maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.",
1120,"This issue can make the software perform more slowly.  If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.",
1121,The code contains McCabe cyclomatic complexity that exceeds a  desirable maximum.,
1122,The code is structured in a way that a Halstead complexity  measure exceeds a desirable maximum.,
1122,"A variety of Halstead complexity measures exist, such as program vocabulary size or volume.",
1122,"This issue makes it more difficult to understand and/or maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.",
1123,The product uses too much self-modifying  code.,
1124,The code contains a callable or other code grouping in which  the nesting / branching is too deep.,
1125,The product has an attack surface whose quantitative  measurement exceeds a desirable maximum.,
1126,"The source code declares a variable in one scope, but the  variable is only used within a narrower scope.",
1127,"The code is compiled without sufficient warnings enabled, which  may prevent the detection of subtle bugs or quality  issues.",
114,Executing commands or loading libraries from an untrusted source or in an untrusted environment can cause an application to execute malicious commands (and payloads) on behalf of an attacker.,
114,"Process control vulnerabilities take two forms: 1. An attacker can change the command that the program executes: the attacker explicitly controls what the command is. 2. An attacker can change the environment in which the command executes: the attacker implicitly controls what the command means. Process control vulnerabilities of the first type occur when either data enters the application from an untrusted source and the data is used as part of a string representing a command that is executed by the application. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.",
114,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,
115,"The software misinterprets an input, whether from an attacker or another product, in a security-relevant fashion.",
1164,"The program contains code that is not essential for execution,   i.e. makes no state changes and has no side effects that alter   data or control flow, such that removal of the code would have no impact   to functionality or correctness.",
1173,"The application does not use, or incorrectly uses, an input validation framework that is provided by the source language or an independent library.",
1173,"Many modern coding languages provide developers with input validation frameworks to make the task of input validation easier and less error-prone. These frameworks will automatically check all input against specified criteria and direct execution to error handlers when invalid input is received. The improper use (i.e., an incorrect implementation or missing altogether) of these frameworks is not directly exploitable, but can lead to an exploitable condition if proper input validation is not performed later in the application. Not using provided input validation frameworks can also hurt the maintainability of code as future developers may not recognize the downstream input validation being used in the place of the validation framework.",
1173,"Unchecked input leads to cross-site scripting, process control, and SQL injection vulnerabilities, among others.",
1173,This weakness may occur when software designers choose to not leverage input validation frameworks provided by the source language.,
1173,This weakness may occur when developers do not correctly use a provided input validation framework.,
1174,"The ASP.NET application does not use, or incorrectly uses, the model validation framework.",
1174,"Unchecked input leads to cross-site scripting, process control, and SQL injection vulnerabilities, among others.",
1176,"The program performs CPU computations using    algorithms that are not as efficient as they could be for the    needs of the developer, i.e., the computations can be    optimized further.",
1177,"The software uses a function, library, or third party component   that has been explicitly prohibited, whether by the developer or   the customer.",
1177,"The developer - or customers - may wish to restrict or eliminate use of a function, library, or third party component for any number of reasons, including real or suspected vulnerabilities; difficulty to use securely; export controls or license requirements; obsolete or poorly-maintained code; internal code being scheduled for deprecation; etc.",
1177,"To reduce risk of vulnerabilities, the developer might maintain a list of ""banned"" functions that programmers must avoid using because the functions are difficult or impossible to use securely.  This issue can also make the software more costly and difficult to maintain.",
1189,The product does not properly isolate shared resources between trusted and untrusted agents.,
1189,"If shared resources are being used by a trusted user, it may be possible for untrusted agents to modify the functionality of the shared resource for the trusted user.",
1189,The functionality of the shared resource may be intentionally degraded.,
1190,"The product enables a Direct Memory Access (DMA) capable device before the security configuration settings are established, which allows an attacker to extract data from or gain privileges on the product.",
1190,DMA devices have direct write access to main memory and      due to time of attack will be able to bypass OS or Bootloader      access control.,
1191,"The chip does not implement or does not correctly    enforce access control on the debug interface, thus allowing an    attacker to exercise the debug interface to access a portion of    the chip internal registers that typically would not be    exposed.",
1192,"The System-on-Chip (SoC) does not have unique, immutable identifiers for each of its components.",
1192,"A System-on-Chip (SoC) comprises several components (IP) with varied    trust requirements. It is required that each IP is identified    uniquely and should distinguish itself from other entities in    the SoC without any ambiguity. The unique secured identity is    required for various purposes. Most of the time the identity is used    to route a transaction or perform certain actions (i.e.    resetting, retrieving a sensitive information, and acting upon or on    behalf of), etc.",
1192,There are several variants of this weakness:,
1193,The product enables components that contain untrusted firmware before memory and fabric access controls have been enabled.,
1193,An untrusted component can master transactions on the HW bus and target memory or other assets to compromise the SoC boot firmware.,
12,An ASP .NET application must enable custom error pages in order to prevent attackers from mining information from the framework's built-in responses.,
12,The mode attribute of the <customErrors> tag defines whether custom or default error pages are used.,
12,"Default error pages gives detailed information about the error that occurred, and should not be used in production environments. Attackers can leverage the additional information provided by a default error page to mount attacks targeted on the framework, database, or other resources used by the application.",
1209,"The reserved bits in a hardware design are not disabled prior to production. Typically, reserved bits are used for future capabilities and should not support any functional logic in the design. However, designers might covertly use these bits to debug or further develop new capabilities in production hardware. Adversaries with access to these bits will write to them in hopes of compromising hardware state.",
1209,This type of weakness all depends on the capabilities of the logic being controlled or configured by the reserved bits,
1209,The Designer and Implementer have to make a conscious choice to do this,
1209,The Designer and Implementer have to make a conscious choice to do this,
1209,"If documentation labels anything ""for future use"", ""reserved"", or the like, such labeling could indicate to an attacker a potential attack point",
121,"A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function).",
121,"There are generally several security-critical data on an execution stack that can lead to arbitrary code execution. The most prominent is the stored return address, the memory address at which execution should continue once the current function is finished executing. The attacker can overwrite this value with some memory address to which the attacker also has write access, into which they place arbitrary code to be run with the full privileges of the vulnerable program. Alternately, the attacker can supply the address of an important call, for instance the POSIX system() call, leaving arguments to the call on the stack. This is often called a return into libc exploit, since the attacker generally forces the program to jump at return time into an interesting routine in the C standard library (libc). Other important data commonly on the stack include the stack pointer and frame pointer, two values that indicate offsets for computing memory addresses. Modifying those values can often be leveraged into a ""write-what-where"" condition.",
121,"Buffer overflows generally lead to crashes. Other attacks leading to lack of availability are possible, including putting the program into an infinite loop.",
121,"Buffer overflows often can be used to execute arbitrary code, which is usually outside the scope of a program's implicit security policy.",
121,"When the consequence is arbitrary code execution, this can often be used to subvert any other security service.",
1220,"The product implements access controls via a policy or other feature with the intention to disable or restrict accesses (reads and/or writes) to assets in a system from untrusted agents. However, implemented access controls lack required granularity, which renders the control policy too broad because it allows accesses from unauthorized agents to the security-sensitive assets.",
1220,"Integrated circuits and hardware engines can expose accesses to assets (device configuration, keys, etc.) to trusted firmware or a software module (commonly set by BIOS/bootloader). This access is typically access-controlled. Upon a power reset, the hardware or system usually starts with default values in registers, and the trusted firmware (Boot firmware) configures the necessary access-control protection.",
1220,"A common weakness that can exist in such protection schemes is that access controls or policies are not granular enough. This condition allows agents beyond trusted agents to access assets and could lead to a loss of functionality or the ability to set up the device securely. This further results in security risks from leaked, sensitive, key material to modification of device configuration.",
1220,Such issues could be introduced during hardware architecture and design and identified later during Testing or System Configuration phases.,
1220,Such issues could be introduced during hardware implementation and identified later during Testing or System Configuration phases.,
1221,Hardware description language code incorrectly defines register defaults or hardware IP parameters to insecure values.,
1221,"Integrated circuits and hardware IP software programmable controls and settings are commonly stored in register circuits. These register contents have to be initialized at hardware reset to defined default values that are hard coded in the hardware description language (HDL) code of the hardware unit. Hardware descriptive languages also support definition of parameter variables, which can be defined in code during instantiation of the hardware IP module. Such parameters are generally used to configure a specific instance of a hardware IP in the design.",
1221,"The system security settings of a hardware design can be affected by incorrectly defined default values or IP parameters. The hardware IP would be in an insecure state at power reset, and this can be exposed or exploited by untrusted software running on the system. Both register defaults and parameters are hardcoded values, which cannot be changed using software or firmware patches but must be changed in hardware silicon. Thus, such security issues are considerably more difficult to address later in the lifecycle. Hardware designs can have a large number of such parameters and register defaults settings, and it is important to have design tool support to check these settings in an automated way and be able to identify which settings are security sensitive.",
1221,"Degradation of system functionality, or loss of access control enforcement",
1221,"Such issues could be introduced during implementation of hardware design, since IP parameters and defaults are defined in HDL code and identified later during Testing or System Configuration phases.",
1222,The product defines a large address region protected from modification by the same register lock control bit. This results in a conflict between the functional requirement that some addresses need to be writable by software during operation and the security requirement that the system configuration lock bit must be set during the boot process.,
1222,"Integrated circuits and hardware IPs can expose the device configuration controls that need to be programmed after device power reset by a trusted firmware or software module (commonly set by BIOS/bootloader) and then locked from any further modification. In hardware design, this is commonly implemented using a programmable lock bit which enables/disables writing to a protected set of registers or address regions. When the programmable lock bit is set, the relevant address region can be implemented as a hardcoded value in hardware logic that cannot be changed later.",
1222,"A problem can arise wherein the protected region definition is not granular enough. After the programmable lock bit has been set, then this new functionality cannot be implemented without change to the hardware design.",
1222,System security configuration cannot be defined in a way that does not conflict with functional requirements of device.,
1222,Such issues are introduced during hardware architecture and design since software controls and configuration are defined during these phases and identified later during Testing or System Configuration phases.,
1223,"A write-once register in hardware design is programmable by an untrusted software component earlier than the trusted software component, resulting in a race condition issue.",
1223,"Integrated circuits and hardware IP software programmable controls and settings are commonly stored in register circuits. These register contents have to be initialized at hardware reset to defined default values that are hard coded in the hardware description language (HDL) code of the hardware unit. A common security protection method used to protect register settings from modification by software is to make them write-once. This means the hardware implementation only allows writing to such registers once, and they become read-only after having been written once by software. This is useful to allow initial boot software to configure systems settings to secure values while blocking runtime software from modifying such hardware settings.",
1223,"Implementation issues in hardware design of such controls can expose such registers to a race condition security flaw. For example, consider a hardware design that has two different software/firmware modules executing in parallel. One module is trusted (module A) and another is untrusted (module B). In this design it could be possible for Module B to send write cycles to the write-once register before Module A. Since the field is write-once the programmed value from Module A will be ignored and the pre-empted value programmed by Module B will be used by hardware.",
1223,System configuration cannot be programmed in a secure way,
1223,This weakness can appear in designs that use register write-once attributes with two or more software/firmware modules with varying levels of trust executing in parallel.,
1224,"The hardware design control register ""sticky bits"" or write-once bit fields are improperly implemented, such that they can be reprogrammed by software.",
1224,"Integrated circuits and hardware IP software programmable controls and settings are commonly stored in register circuits. These register contents have to be initialized at hardware reset to define default values that are hard coded in the hardware description language (HDL) code of the hardware unit. A common security protection method used to protect register settings from modification by software is to make the settings write-once or ""sticky."" This allows writing to such registers only once, whereupon they become read-only. This is useful to allow initial boot software to configure systems settings to secure values while blocking runtime software from modifying such hardware settings.",
1224,"Failure to implement write-once restrictions in hardware design can expose such registers to being re-programmed by software and written multiple times. For example, write-once fields could be implemented to only be write-protected if they have been set to value ""1"", wherein they would work as ""write-1-once"" and not ""write-once"".",
1224,System configuration cannot be programmed in a secure way,
1224,"Such issues could be introduced during implementation of hardware design, since IP parameters and defaults are defined in HDL code and identified later during Testing or System Configuration phases.",
1229,"The product manages resources or behaves in a way that indirectly creates a new, distinct resource that can be used by attackers in violation of the intended policy.",
1230,"The product prevents direct access to a resource containing sensitive information, but it does not sufficiently limit access to metadata that is derived from the original, sensitive information.",
1231,The product incorrectly implements register lock bit protection features such that protected controls can be programmed even after the lock has been set.,
1231,Registers protected by lock bit can be modified even when lock is set.,
1231,Such issues could be introduced during hardware architecture and design and identified later during Testing or System Configuration phases.,
1231,Such issues could be introduced during implementation and identified later during Testing or System Configuration phases.,
1233,The product implements a register lock bit protection feature that permits security sensitive controls to modify the protected configuration.,
1233,System Configuration protected by the lock bit can be modified even when the lock is set.,
1233,Such issues could be introduced during hardware architecture and design and identified later during Testing or System Configuration phases.,
1233,Such issues could be introduced during implementation and identified later during Testing or System Configuration phases.,
1234,The product implements register lock bit protection features that may permit security sensitive controls to modify system configuration after the lock is set through internal modes or debug features.,
1234,System Configuration protected by lock bit can be modified even when lock is set.,
1234,Such issues could be introduced during hardware architecture and design and identified later during Testing or System Configuration phases.,
1234,Such issues could be introduced during implementation and identified later during Testing or System Configuration phases.,
1235,"The code uses boxed primitives, which may introduce inefficiencies into performance-critical operations.",
1235,"Languages such as Java and C# support automatic conversion through their respective compilers from primitive types into objects of the corresponding wrapper classes, and vice versa. For example, a compiler might convert an int to Integer (called autoboxing) or an Integer to int (called unboxing). This eliminates forcing the programmer to perform these conversions manually, which makes the code cleaner.",
1235,"However, this feature comes at a cost of performance and can lead to resource exhaustion and impact availability when used with generic collections. Therefore, they should not be used for scientific computing or other performance critical operations. They are only suited to support ""impedance mismatch"" between reference types and primitives.",
1235,"Incorrect autoboxing/unboxing would result in reduced performance, which sometimes can lead to resource consumption issues.",
1235,The programmer may use boxed primitives when not strictly necessary.,
1241,The product requires a true random number but uses an algorithm that is predictable and generates a pseudo-random number.,
1241,Predicatable random numbers can render the protection mechanisms in place ineffective,
1241,This weakness is primarily introduced during the architecture and design phase an incorrect algorithm is defined.,
1241,"In many cases, the design originally defines a proper cryptography primative, but this is then changed during implementation due to unforseen constraints.",
1242,The chip includes chicken bits or undocumented features that can create entry points for unauthorized actors.,
1243,The product exposes security-sensitive values stored in fuses during debug.,
1244,"The product's physical debug and test interface protection does not block untrusted agents, resulting in unauthorized access to and potentially control of sensitive assets.",
1245,"Faulty finite state machines (FSMs) in the hardware logic allow an attacker to put the system in an undefined state, to cause a denial of service (DoS) or gain privileges on the victim's system.",
1246,The product does not implement or incorrectly handles the implementation of write operations in limited-write non-volatile memories.,
1247,The product does not contain the necessary additional circuitry or sensors to detect and mitigate voltage and clock glitches.,
1248,The security-sensitive hardware module contains semiconductor defects. ,
1250,The product has or supports multiple distributed components or sub-systems that are each required to keep their own local copy of shared data - such as state or cache - but the product does not ensure that all local copies remain consistent with each other.,
1250,"In highly distributed environments, or on systems with distinct physical components that operate independently, there is often a need for each component to store and update its own local copy of key data such as state or cache, so that all components have the same ""view"" of the overall system and operate in a coordinated fashion.  For example, users of a social media service or a massively multiplayer online game might be using their own personal computers while also interacting with different physical hosts in a globally distributed service, but all participants must be able to have the same ""view"" of the world.  Alternately, a processor's Memory Management Unit (MMU) might have ""shadow"" MMUs to distribute its workload, and all shadow MMUs are expected to have the same accessible ranges of memory.",
1250,"In such environments, it becomes critical for the product to ensure that this ""shared state"" is consistently modified across all distributed systems. If state is not consistently maintained across all systems, then critical transactions might take place out of order, or some users might not get the same data as other users.  When this inconsistency affects correctness of operations, it can introduce vulnerabilities in mechanisms that depend on consistent state.",
1252,The CPU is not configured to provide hardware support for exclusivity of write and execute operations on memory. This allows an attacker to execute data from all of memory.,
126,The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations after the targeted buffer.,
126,This typically occurs when the pointer or its index is incremented to a position beyond the bounds of the buffer or when pointer arithmetic results in a position outside of the valid memory location to name a few. This may result in exposure of sensitive information or possibly a crash.,
126,"By reading out-of-bounds memory, an attacker might be able to get secret values, such as memory addresses, which can be bypass protection mechanisms such as ASLR in order to improve the reliability and likelihood of exploiting a separate weakness to achieve code execution instead of just denial of service.",
127,The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations prior to the targeted buffer.,
127,"This typically occurs when the pointer or its index is decremented to a position before the buffer, when pointer arithmetic results in a position before the beginning of the valid memory location, or when a negative index is used. This may result in exposure of sensitive information or possibly a crash.",
127,"By reading out-of-bounds memory, an attacker might be able to get secret values, such as memory addresses, which can be bypass protection mechanisms such as ASLR in order to improve the reliability and likelihood of exploiting a separate weakness to achieve code execution instead of just denial of service.",
128,"Wrap around errors occur whenever a value is incremented past the maximum value for its type and therefore ""wraps around"" to a very small, negative, or undefined value.",
128,"Due to how addition is performed by computers, if a primitive is incremented past the maximum value possible for its storage space, the system will not recognize this, and therefore increment each bit as if it still had extra space. Because of how negative numbers are represented in binary, primitives interpreted as signed may ""wrap"" to very large negative values.",
128,"This weakness will generally lead to undefined behavior and therefore crashes. In the case of overflows involving loop index variables, the likelihood of infinite loops is also high.",
128,"If the value in question is important to data (as opposed to flow), simple data corruption has occurred. Also, if the wrap around results in other conditions such as buffer overflows, further memory corruption may occur.",
128,This weakness can sometimes trigger buffer overflows which can be used to execute arbitrary code. This is usually outside the scope of a program's implicit security policy.,
13,Storing a plaintext password in a configuration file allows anyone who can read the file access to the password-protected resource making them an easy target for attackers.,
132,This entry has been deprecated because it was a duplicate of CWE-170. All content has been transferred to CWE-170.,
135,The software does not correctly calculate the length of strings that can contain wide or multi-byte characters.,
135,"This weakness may lead to a buffer overflow. Buffer overflows often can be used to execute arbitrary code, which is usually outside the scope of a program's implicit security policy. This can often be used to subvert any other security service.",
135,"Out of bounds memory access will very likely result in the corruption of relevant memory, and perhaps instructions, possibly leading to a crash. Other attacks leading to lack of availability are possible, including putting the program into an infinite loop.",
135,"In the case of an out-of-bounds read, the attacker may have access to sensitive information. If the sensitive information contains system details, such as the current buffers position in memory, this knowledge can be used to craft further attacks, possibly with more severe consequences.",
14,"Sensitive memory is cleared according to the source code, but compiler optimizations leave the memory untouched when it is not read from again, aka ""dead store removal.""",
14,This compiler optimization error occurs when:,
14,"This weakness will allow data that has not been cleared from memory to be read. If this data contains sensitive password information, then an attacker can read the password and use the information to bypass protection mechanisms.",
140,The software does not neutralize or incorrectly neutralizes delimiters.,
141,"The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as parameter or argument delimiters when they are sent to a downstream component.",
141,"As data is parsed, an injected/absent/malformed delimiter may cause the process to take unexpected actions.",
142,"The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as value delimiters when they are sent to a downstream component.",
142,"As data is parsed, an injected/absent/malformed delimiter may cause the process to take unexpected actions.",
144,"The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as line delimiters when they are sent to a downstream component.",
144,"As data is parsed, an injected/absent/malformed delimiter may cause the process to take unexpected actions.",
145,"The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as section delimiters when they are sent to a downstream component.",
145,"As data is parsed, an injected/absent/malformed delimiter may cause the process to take unexpected actions.",
145,"One example of a section delimiter is the boundary string in a multipart MIME message. In many cases, doubled line delimiters can serve as a section delimiter.",
146,"The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as expression or command delimiters when they are sent to a downstream component.",
146,"As data is parsed, an injected/absent/malformed delimiter may cause the process to take unexpected actions.",
148,"The application does not properly handle when a leading character or sequence (""leader"") is missing or malformed, or if multiple leaders are used when only one should be allowed.",
149,"Quotes injected into an application can be used to compromise a system. As data are parsed, an injected/absent/duplicate/malformed use of quotes may cause the process to take unexpected actions.",
15,One or more system settings or configuration elements can be externally controlled by a user.,
15,"Allowing external control of system settings can disrupt service or cause an application to behave in unexpected, and potentially malicious ways.",
15,"Setting manipulation vulnerabilities occur when an attacker can control values that govern the behavior of the system, manage specific resources, or in some way affect the functionality of the application.",
15,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,
152,"The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as macro symbols when they are sent to a downstream component.",
153,"The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as substitution characters when they are sent to a downstream component.",
159,"The product does not properly filter, remove, quote, or otherwise manage the invalid use of special elements in user-controlled input, which could cause adverse effect on its behavior and integrity.",
160,"The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes leading special elements that could be interpreted in unexpected ways when they are sent to a downstream component.",
160,"As data is parsed, improperly handled leading special elements may cause the process to take unexpected actions that result in an attack.",
161,"The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes multiple leading special elements that could be interpreted in unexpected ways when they are sent to a downstream component.",
161,"As data is parsed, improperly handled multiple leading special elements may cause the process to take unexpected actions that result in an attack.",
162,"The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes trailing special elements that could be interpreted in unexpected ways when they are sent to a downstream component.",
162,"As data is parsed, improperly handled trailing special elements may cause the process to take unexpected actions that result in an attack.",
163,"The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes multiple trailing special elements that could be interpreted in unexpected ways when they are sent to a downstream component.",
163,"As data is parsed, improperly handled multiple trailing special elements may cause the process to take unexpected actions that result in an attack.",
164,"The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes internal special elements that could be interpreted in unexpected ways when they are sent to a downstream component.",
164,"As data is parsed, improperly handled internal special elements may cause the process to take unexpected actions that result in an attack.",
165,"The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes multiple internal special elements that could be interpreted in unexpected ways when they are sent to a downstream component.",
165,"As data is parsed, improperly handled multiple internal special elements may cause the process to take unexpected actions that result in an attack.",
168,The software does not properly handle input in which an inconsistency exists between two or more special characters or reserved words.,
168,"An example of this problem would be if paired characters appear in the wrong order, or if the special characters are not properly nested.",
173,The software does not properly handle when an input uses an alternate encoding that is valid for the control sphere to which the input is being sent.,
175,The software does not properly handle when the same input uses several different (mixed) encodings.,
183,"The product implements a protection mechanism that relies on a list of inputs (or properties of inputs) that are explicitly allowed by policy because the inputs are assumed to be safe, but the list is too permissive - that is, it allows an input that is unsafe, leading to resultant weaknesses.",
186,"A regular expression is overly restrictive, which prevents dangerous values from being detected.",
186,"This weakness is not about regular expression complexity. Rather, it is about a regular expression that does not match all values that are intended. Consider the use of a regexp to identify acceptable values or to spot unwanted terms. An overly restrictive regexp misses some potentially security-relevant values leading to either false positives *or* false negatives, depending on how the regexp is being used within the code. Consider the expression /[0-8]/ where the intention was /[0-9]/.  This expression is not ""complex"" but the value ""9"" is not matched when maybe the programmer planned to check for it.",
188,"The software makes invalid assumptions about how protocol data or memory is organized at a lower level, resulting in unintended program behavior.",
188,"When changing platforms or protocol versions, in-memory organization of data may change in unintended ways. For example, some architectures may place local variables A and B right next to each other with A on top; some may place them next to each other with B on top; and others may add some padding to each. The padding size may vary to ensure that each variable is aligned to a proper word size.",
188,"In protocol implementations, it is common to calculate an offset relative to another field to pick out a specific piece of data. Exceptional conditions, often involving new protocol versions, may add corner cases that change the data layout in an unusual way. The result can be that an implementation accesses an unintended field in the packet, treating data of one type as data of another type.",
188,Can result in unintended modifications or exposure of sensitive memory.,
192,"Integer coercion refers to a set of flaws pertaining to the type casting, extension, or truncation of primitive data types.",
192,"Several flaws fall under the category of integer coercion errors. For the most part, these errors in and of themselves result only in availability and data integrity issues. However, in some circumstances, they may result in other, more complicated security related flaws, such as buffer overflow conditions.",
192,Integer coercion often leads to undefined states of execution resulting in infinite loops or crashes.,
192,"In some cases, integer coercion errors can lead to exploitable buffer overflow conditions, resulting in the execution of arbitrary code.",
192,Integer coercion errors result in an incorrect value being stored for the variable in question.,
196,"The software uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value if the value of the unsigned primitive can not be represented using a signed primitive.",
196,"Although less frequent an issue than signed-to-unsigned conversion, unsigned-to-signed conversion can be the perfect precursor to dangerous buffer underwrite conditions that allow attackers to move down the stack where they otherwise might not have access in a normal buffer overflow condition. Buffer underwrites occur frequently when large unsigned values are cast to signed values, and then used as indexes into a buffer or for pointer arithmetic.",
196,"Incorrect sign conversions generally lead to undefined behavior, and therefore crashes.",
196,"If a poor cast lead to a buffer overflow or similar condition, data integrity may be affected.",
196,Improper signed-to-unsigned conversions without proper checking can sometimes trigger buffer overflows which can be used to execute arbitrary code. This is usually outside the scope of a program's implicit security policy.,
198,"The software receives input from an upstream component, but it does not account for byte ordering (e.g. big-endian and little-endian) when processing the input, causing an incorrect number or value to be used.",
201,"The code transmits data to another actor, but the data contains sensitive information that should not be accessible to the actor that is receiving the data.",
201,"Sensitive information could include data that is sensitive in and of itself (such as credentials or private messages), or otherwise useful in the further exploitation of the system (such as internal file system structure). ",
201,Sensitive data may be exposed to attackers.,
201,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,
202,"When trying to keep information confidential, an attacker can often infer some of the information by using statistics.",
202,"In situations where data should not be tied to individual users, but a large number of users should be able to make queries that ""scrub"" the identity of users, it may be possible to get information about a user -- e.g., by specifying search terms that are known to be unique to that user.",
202,Sensitive information may possibly be leaked through data queries accidentally.,
210,The software identifies an error condition and creates its own diagnostic or error messages that contain sensitive information.,
210,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,
216,"This entry has been deprecated, as it was not effective as a weakness and was structured more like a category. In addition, the name is inappropriate, since the ""container"" term is widely understood by developers in different ways than originally intended by PLOVER, the original source for this entry.",
217,This weakness has been deprecated because it incorporated and confused multiple weaknesses. The issues formerly covered in this weakness can be found at CWE-766 and CWE-767.,
218,This weakness has been deprecated because it was a duplicate of CWE-493. All content has been transferred to CWE-493.,
220,"The application stores sensitive data under the FTP server root with insufficient access control, which might make it accessible to untrusted parties.",
220,"Various Unix FTP servers require a password file that is under the FTP root, due to use of chroot.",
220,COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.,
221,"The software does not record, or improperly records, security-relevant information that leads to an incorrect decision or hampers later analysis.",
221,"This can be resultant, e.g. a buffer overflow might trigger a crash before the product can log the event.",
224,"The software records security-relevant information according to an alternate name of the affected entity, instead of the canonical name.",
224,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,
225,This weakness can be found at CWE-199.,
228,The product does not handle or incorrectly handles input that is not syntactically well-formed with respect to the associated specification.,
228,"If an input is syntactically invalid, then processing the input could place the system in an unexpected state that could lead to a crash, consume available system resources or other unintended behaviors.",
229,"The software does not properly handle when the expected number of values for parameters, fields, or arguments is not provided in input, or if those values are undefined.",
231,The software does not handle or incorrectly handles when more values are provided than expected.,
231,This typically occurs in situations when only one value is expected.,
232,"The software does not handle or incorrectly handles when a value is not defined or supported for the associated parameter, field, or argument name.",
233,"The software does not properly handle when the expected number of parameters, fields, or arguments is not provided in input, or if those parameters are undefined.",
235,"The software does not handle or incorrectly handles when the number of parameters, fields, or arguments with the same name exceeds the expected amount.",
235,This typically occurs in situations when only one element is expected to be specified.,
236,"The software does not handle or incorrectly handles when a particular parameter, field, or argument name is not defined or supported by the product.",
237,The software does not handle or incorrectly handles inputs that are related to complex structures.,
238,The software does not handle or incorrectly handles when a particular structural element is not completely specified.,
24,"The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize ""../"" sequences that can resolve to a location that is outside of that directory.",
24,This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.,
24,"The ""../"" manipulation is the canonical manipulation for operating systems that use ""/"" as directory separators, such as UNIX- and Linux-based systems. In some cases, it is useful for bypassing protection schemes in environments for which ""/"" is supported but not the primary separator, such as Windows, which uses ""\"" but can also accept ""/"".",
240,"The software does not handle or incorrectly handles when two or more structural elements should be consistent, but are not.",
241,"The software does not handle or incorrectly handles when a particular element is not the expected type, e.g. it expects a digit (0-9) but is provided with a letter (A-Z).",
242,The program calls a function that can never be guaranteed to work safely.,
242,"Certain functions behave in dangerous ways regardless of how they are used. Functions in this category were often implemented without taking security concerns into account. The gets() function is unsafe because it does not perform bounds checking on the size of its input. An attacker can easily send arbitrarily-sized input to gets() and overflow the destination buffer. Similarly, the >> operator is unsafe to use when reading into a statically-allocated character array because it does not perform bounds checking on the size of its input. An attacker can easily send arbitrarily-sized input to the >> operator and overflow the destination buffer.",
243,"The program uses the chroot() system call to create a jail, but does not change the working directory afterward. This does not prevent access to files outside of the jail.",
243,"Improper use of chroot() may allow attackers to escape from the chroot jail. The chroot() function call does not change the process's current working directory, so relative paths may still refer to file system resources outside of the chroot jail after chroot() has been called.",
243,"The chroot() system call allows a process to change its perception of the root directory of the file system. After properly invoking chroot(), a process cannot access any files outside the directory tree defined by the new root directory. Such an environment is called a chroot jail and is commonly used to prevent the possibility that a processes could be subverted and used to access unauthorized files. For instance, many FTP servers run in chroot jails to prevent an attacker who discovers a new vulnerability in the server from being able to download the password file or other sensitive files on the system.",
243,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,
244,"Using realloc() to resize buffers that store sensitive information can leave the sensitive information exposed to attack, because it is not removed from memory.",
244,"When sensitive data such as a password or an encryption key is not removed from memory, it could be exposed to an attacker using a ""heap inspection"" attack that reads the sensitive data using memory dumps or other methods. The realloc() function is commonly used to increase the size of a block of allocated memory. This operation often requires copying the contents of the old memory block into a new and larger block. This operation leaves the contents of the original block intact but inaccessible to the program, preventing the program from being able to scrub sensitive data from memory. If an attacker can later examine the contents of a memory dump, the sensitive data could be exposed.",
244,Be careful using vfork() and fork() in security sensitive code. The process state will not be cleaned up and will contain traces of data from past use.,
245,"The J2EE application directly manages connections, instead of using the container's connection management facilities.",
245,"The J2EE standard forbids the direct management of connections. It requires that applications use the container's resource management facilities to obtain connections to resources. Every major web application container provides pooled database connection management as part of its resource management framework. Duplicating this functionality in an application is difficult and error prone, which is part of the reason it is forbidden under the J2EE standard.",
246,The J2EE application directly uses sockets instead of using framework method calls.,
246,The J2EE standard permits the use of sockets only for the purpose of communication with legacy systems when no higher-level protocol is available. Authoring your own communication protocol requires wrestling with difficult security issues.,
246,"Without significant scrutiny by a security expert, chances are good that a custom communication protocol will suffer from security problems. Many of the same issues apply to a custom implementation of a standard protocol. While there are usually more resources available that address security concerns related to implementing a standard protocol, these resources are also available to attackers.",
247,This entry has been deprecated because it was a duplicate of CWE-350. All content has been transferred to CWE-350.,
248,"An exception is thrown from a function, but it is not caught.",
248,"When an exception is not caught, it may cause the program to crash or expose sensitive information.",
248,"An uncaught exception could cause the system to be placed in a state that could lead to a crash, exposure of sensitive information or other unintended behaviors.",
249,This entry has been deprecated because of name confusion and an accidental combination of multiple weaknesses. Most of its content has been transferred to CWE-785.,
25,"The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize ""/../"" sequences that can resolve to a location that is outside of that directory.",
25,This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.,
25,"Sometimes a program checks for ""../"" at the beginning of the input, so a ""/../"" can bypass that check.",
253,"The software incorrectly checks a return value from a function, which prevents the software from detecting errors or exceptional conditions.",
253,Important and common functions will return some value about the success of its actions. This will alert the program whether or not to handle any errors caused by that function.,
253,An unexpected return value could place the system in a state that could lead to a crash or other unintended behaviors.,
256,Storing a password in plaintext may result in a system compromise.,
256,Password management issues occur when a password is stored in plaintext in an application's properties or configuration file. Storing a plaintext password in a configuration file allows anyone who can read the file access to the password-protected resource.,
256,OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.,
256,"Developers sometimes believe that they cannot defend the application from someone who has access to the configuration, but this belief makes an attacker's job easier.",
257,"The storage of passwords in a recoverable format makes them subject to password reuse attacks by malicious users. In fact, it should be noted that recoverable encrypted passwords provide no significant benefit over plaintext passwords since they are subject not only to reuse by malicious attackers but also by malicious insiders. If a system administrator can recover a password directly, or use a brute force search on the available information, the administrator can use the password on other accounts.",
257,User's passwords may be revealed.,
257,Revealed passwords may be reused elsewhere to impersonate the users in question.,
257,COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.,
258,Using an empty string as a password is insecure.,
258,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,
26,"The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize ""/dir/../filename"" sequences that can resolve to a location that is outside of that directory.",
26,This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.,
26,"The '/dir/../filename' manipulation is useful for bypassing some path traversal protection schemes. Sometimes a program only checks for ""../"" at the beginning of the input, so a ""/../"" can bypass that check.",
260,The software stores a password in a configuration file that might be accessible to actors who do not know the password.,
260,"This can result in compromise of the system for which the password is used. An attacker could gain access to this file and learn the stored password or worse yet, change the password to one of their choosing.",
260,OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.,
261,Obscuring a password with a trivial encoding does not protect the password.,
261,"Password management issues occur when a password is stored in plaintext in an application's properties or configuration file. A programmer can attempt to remedy the password management problem by obscuring the password with an encoding function, such as base 64 encoding, but this effort does not adequately protect the password.",
261,COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.,
262,"If no mechanism is in place for managing password aging, users will have no incentive to update passwords in a timely manner.",
262,"Security experts have often recommended that users change their passwords regularly and avoid reusing passwords. Although this can be an effective mitigation, if the expiration window is too short, it can cause users to generate poor or predictable passwords. As such, it is important to discourage creating similar passwords. It is also useful to have a password aging mechanism that notifies users when passwords are considered old and requests that they replace them with new, strong passwords. Companion documentation which stresses how important this practice is can help users understand and better support this approach.",
262,"As passwords age, the probability that they are compromised grows.",
262,COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.,
263,Allowing password aging to occur unchecked can result in the possibility of diminished password integrity.,
263,"Just as neglecting to include functionality for the management of password aging is dangerous, so is allowing password aging to continue unchecked. Passwords must be given a maximum life span, after which a user is required to update with a new and different password.",
263,"As passwords age, the probability that they are compromised grows.",
263,COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.,
27,"The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize multiple internal ""../"" sequences that can resolve to a location that is outside of that directory.",
27,This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.,
27,"The 'directory/../../filename' manipulation is useful for bypassing some path traversal protection schemes. Sometimes a program only removes one ""../"" sequence, so multiple ""../"" can bypass that check. Alternately, this manipulation could be used to bypass a check for ""../"" at the beginning of the pathname, moving up more than one directory level.",
272,The elevated privilege level required to perform operations such as chroot() should be dropped immediately after the operation is performed.,
272,"An attacker may be able to access resources with the elevated privilege that could not be accessed with the attacker's original privileges. This is particularly likely in conjunction with another flaw, such as a buffer overflow.",
272,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,
278,"A product inherits a set of insecure permissions for an object, e.g. when copying from an archive file, without user awareness or involvement.",
282,"The software assigns the wrong ownership, or does not properly verify the ownership, of an object or resource.",
282,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,
286,The software does not properly manage a user within its environment.,
286,Users can be assigned to the wrong group (class) of permissions resulting in unintended access rights to sensitive objects.,
286,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,
291,The software uses an IP address for authentication.,
291,"IP addresses can be easily spoofed. Attackers can forge the source IP address of the packets they send, but response packets will return to the forged IP address. To see the response packets, the attacker has to sniff the traffic between the victim machine and the forged IP address. In order to accomplish the required sniffing, attackers typically attempt to locate themselves on the same subnet as the victim machine. Attackers may be able to circumvent this requirement by using source routing, but source routing is disabled across much of the Internet today. In summary, IP address verification can be a useful part of an authentication scheme, but it should not be the single factor required for authentication.",
291,"Malicious users can fake authentication information, impersonating any IP address.",
291,COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.,
292,This entry has been deprecated because it was a duplicate of CWE-350. All content has been transferred to CWE-350.,
293,"The referer field in HTTP requests can be easily modified and, as such, is not a valid means of message integrity checking.",
293,"The referer field in HTML requests can be simply modified by malicious users, rendering it useless as a means of checking the validity of the request in question.",
293,"Actions, which may not be authorized otherwise, can be carried out as if they were validated by the server referred to.",
293,COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.,
30,"The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '\dir\..\filename' (leading backslash dot dot) sequences that can resolve to a location that is outside of that directory.",
30,This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.,
30,"This is similar to CWE-26, except using ""\"" instead of ""/"". The '\dir\..\filename' manipulation is useful for bypassing some path traversal protection schemes. Sometimes a program only checks for ""..\"" at the beginning of the input, so a ""\..\"" can bypass that check.",
300,"The product does not adequately verify the identity of actors at both ends of a communication channel, or does not adequately ensure the integrity of the channel, in a way that allows the channel to be accessed or influenced by an actor that is not an endpoint.",
300,"In order to establish secure communication between two parties, it is often important to adequately verify the identity of entities at each end of the communication channel. Inadequate or inconsistent verification may result in insufficient or incorrect identification of either communicating entity. This can have negative consequences such as misplaced trust in the entity at the other end of the channel. An attacker can leverage this by interposing between the communicating entities and masquerading as the original entity. In the absence of sufficient verification of identity, such an attacker can eavesdrop and potentially modify the communication between the original entities.",
300,An attacker could pose as one of the entities and read or possibly modify the communication.,
300,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,
303,"The requirements for the software dictate the use of an established authentication algorithm, but the implementation of the algorithm is incorrect.",
303,This incorrect implementation may allow authentication to be bypassed.,
303,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,
308,The use of single-factor authentication can lead to unnecessary risk of compromise when compared with the benefits of a dual-factor authentication scheme.,
308,"While the use of multiple authentication schemes is simply piling on more complexity on top of authentication, it is inestimably valuable to have such measures of redundancy. The use of weak, reused, and common passwords is rampant on the internet. Without the added protection of multiple authentication schemes, a single mistake can result in the compromise of an account. For this reason, if multiple schemes are possible and also easy to use, they should be implemented and required.",
308,"If the secret in a single-factor authentication scheme gets compromised, full authentication is possible.",
308,COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.,
309,"The use of password systems as the primary means of authentication may be subject to several flaws or shortcomings, each reducing the effectiveness of the mechanism.",
309,"Password systems are the simplest and most ubiquitous authentication mechanisms. However, they are subject to such well known attacks,and such frequent compromise that their use in the most simple implementation is not practical.",
309,A password authentication mechanism error will almost always result in attackers being authorized as valid users.,
31,"The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize 'dir\..\..\filename' (multiple internal backslash dot dot) sequences that can resolve to a location that is outside of that directory.",
31,This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.,
31,"The 'dir\..\..\filename' manipulation is useful for bypassing some path traversal protection schemes. Sometimes a program only removes one ""..\"" sequence, so multiple ""..\"" can bypass that check. Alternately, this manipulation could be used to bypass a check for ""..\"" at the beginning of the pathname, moving up more than one directory level.",
314,The application stores sensitive information in cleartext in the registry.,
314,"Attackers can read the information by accessing the registry key. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information.",
314,OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.,
317,The application stores sensitive information in cleartext within the GUI.,
317,"An attacker can often obtain data from a GUI, even if hidden, by using an API to directly access GUI objects such as windows and menus. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information.",
317,OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.,
321,The use of a hard-coded cryptographic key significantly increases the possibility that encrypted data may be recovered.,
321,"If hard-coded cryptographic keys are used, it is almost certain that malicious users will gain access through the account in question.",
321,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,
322,The software performs a key exchange with an actor without verifying the identity of that actor.,
322,"Performing a key exchange will preserve the integrity of the information sent between two entities, but this will not guarantee that the entities are who they claim they are. This may enable an attacker to impersonate an actor by modifying traffic between the two entities.  Typically, this involves a victim client that contacts a malicious server that is impersonating a trusted server. If the client skips authentication or ignores an authentication failure, the malicious server may request authentication information from the user. The malicious server can then use this authentication information to log in to the trusted server using the victim's credentials, sniff traffic between the victim and trusted server, etc.",
322,"No authentication takes place in this process, bypassing an assumed protection of encryption.",
322,The encrypted communication between a user and a trusted host may be subject to sniffing by any actor in the communication path.,
322,OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.,
323,Nonces should be used for the present occasion and only once.,
323,Nonces are often bundled with a key in a communication exchange to produce a new session key for each exchange.,
323,"Potentially a replay attack, in which an attacker could send the same data twice, could be crafted if nonces are allowed to be reused. This could allow a user to send a message which masquerades as a valid message from a valid user.",
323,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,
324,"The product uses a cryptographic key or password past its expiration date, which diminishes its safety significantly by increasing the timing window for cracking attacks against that key.",
324,"While the expiration of keys does not necessarily ensure that they are compromised, it is a significant concern that keys which remain in use for prolonged periods of time have a decreasing probability of integrity. For this reason, it is important to replace keys within a period of time proportional to their strength.",
324,"The cryptographic key in question may be compromised, providing a malicious user with a method for authenticating as the victim.",
324,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,
328,"The product uses a hashing algorithm that produces a hash value that can be used to determine the original input, or to find an input that can produce the same hash, more efficiently than brute force techniques.",
328,"This weakness is especially dangerous when the hash is used in security algorithms that require the one-way property to hold. For example, if an authentication system takes an incoming password and generates a hash, then compares the hash to another hash that it has stored in its authentication database, then the ability to create a collision could allow an attacker to provide an alternate password that produces the same target hash, bypassing authentication.",
328,COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.,
329,Not using a random initialization Vector (IV) with Cipher Block Chaining (CBC) Mode causes algorithms to be susceptible to dictionary attacks.,
329,"CBC is the most commonly used mode of operation for a block cipher. It solves electronic code book's dictionary problems by XORing the ciphertext with plaintext. If it used to encrypt multiple data streams, dictionary attacks are possible, provided that the streams have a common beginning sequence.",
329,"If the CBC is not properly initialized, data that is encrypted can be compromised and therefore be read.",
329,"If the CBC is not properly initialized, encrypted data could be tampered with in transfer.",
329,Cryptographic based authentication systems could be defeated.,
333,True random number generators (TRNG) generally have a limited source of entropy and therefore can fail or block.,
333,The rate at which true random numbers can be generated is limited. It is important that one uses them only when they are needed for security.,
333,A program may crash or block if it runs out of random numbers.,
333,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,
336,A Pseudo-Random Number Generator (PRNG) uses the same seed each time the product is initialized.,
336,"If an attacker can guess (or knows) the seed, then the attacker may be able to determine the random numbers that will be produced from the PRNG.",
336,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,
337,"A Pseudo-Random Number Generator (PRNG) is initialized from a predictable seed, such as the process ID or system time.",
337,The use of predictable seeds significantly reduces the number of possible seeds that an attacker would need to test in order to predict which random numbers will be generated by the PRNG.,
337,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,
339,A PRNG uses a relatively small space of seeds.,
339,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,
34,"The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '....//' (doubled dot dot slash) sequences that can resolve to a location that is outside of that directory.",
34,This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.,
34,"The '....//' manipulation is useful for bypassing some path traversal protection schemes. If ""../"" is filtered in a sequential fashion, as done by some regular expression engines, then ""....//"" can collapse into the ""../"" unsafe value (CWE-182). It could also be useful when "".."" is removed, if the operating system treats ""//"" and ""/"" as equivalent.",
340,The product uses a scheme that generates numbers or identifiers that are more predictable than required.,
343,"The software's random number generator produces a series of values which, when observed, can be used to infer a relatively small range of possibilities for the next value that could be generated.",
343,"The output of a random number generator should not be predictable based on observations of previous values. In some cases, an attacker cannot predict the exact value that will be produced next, but can narrow down the possibilities significantly. This reduces the amount of effort to perform a brute force attack. For example, suppose the product generates random numbers between 1 and 100, but it always produces a larger value until it reaches 100. If the generator produces an 80, then the attacker knows that the next value will be somewhere between 81 and 100. Instead of 100 possibilities, the attacker only needs to consider 20.",
344,"The product uses a constant value, name, or reference, but this value can (or should) vary across different environments.",
349,"The software, when processing trusted data, accepts any untrusted data that is also included with the trusted data, treating the untrusted data as if it were trusted.",
349,An attacker could package untrusted data with trusted data to bypass protection mechanisms to gain access to and possibly modify sensitive data.,
349,OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.,
351,The software does not properly distinguish between different types of elements in a way that leads to insecure behavior.,
353,"The software uses a transmission protocol that does not include a mechanism for verifying the integrity of the data during transmission, such as a checksum.",
353,"If integrity check values or ""checksums"" are omitted from a protocol, there is no way of determining if data has been corrupted in transmission. The lack of checksum functionality in a protocol removes the first application-level check of data that can be used. The end-to-end philosophy of checks states that integrity checks should be performed at the lowest level that they can be completely implemented. Excluding further sanity checks and input validation performed by applications, the protocol's checksum is the most important level of checksum, since it can be performed more completely than at any previous level and takes into account entire messages, as opposed to single packets.",
353,Data that is parsed and used may be corrupted.,
353,Without a checksum it is impossible to determine if any changes have been made to the data after it was sent.,
353,OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.,
357,"The user interface provides a warning to a user regarding dangerous or sensitive operations, but the warning is not noticeable enough to warrant attention.",
360,Security based on event locations are insecure and can be spoofed.,
360,"Events are a messaging system which may provide control data to programs listening for events. Events often do not have any type of authentication framework to allow them to be verified from a trusted source. Any application, in Windows, on a given desktop can send a message to any window on the same desktop. There is no authentication framework for these messages. Therefore, any message can be used to manipulate any process on the desktop if the process does not check the validity and safeness of those messages.",
360,"If one trusts the system-event information and executes commands based on it, one could potentially take actions based on a spoofed identity.",
363,"The software checks the status of a file or directory before accessing it, which produces a race condition in which the file can be replaced with a link before the access is performed, causing the software to access the wrong file.",
363,"While developers might expect that there is a very narrow time window between the time of check and time of use, there is still a race condition. An attacker could cause the software to slow down (e.g. with memory consumption), causing the time window to become larger. Alternately, in some situations, the attacker could win the race by performing a large number of attacks.",
365,"The code contains a switch statement in which the switched variable can be modified while the switch is still executing, resulting in unexpected behavior.",
365,"This issue is particularly important in the case of switch statements that involve fall-through style case statements - i.e., those which do not end with break. If the variable being tested by the switch changes in the course of execution, this could change the intended logic of the switch so much that it places the process in a contradictory state and in some cases could even result in memory corruption.",
365,"This weakness may lead to unexpected system state, resulting in unpredictable behavior.",
366,"If two threads of execution use a resource simultaneously, there exists the possibility that resources may be used while invalid, in turn making the state of execution undefined.",
366,The main problem is that -- if a lock is overcome -- data could be altered in a bad state.,
372,"The software does not properly determine which state it is in, causing it to assume it is in state X when in fact it is in state Y, causing it to perform incorrect operations in a security-relevant manner.",
373,This entry was deprecated because it overlapped the same concepts as race condition (CWE-362) and Improper Synchronization (CWE-662).,
374,The program sends non-cloned mutable data as an argument to a method or function.,
374,"The function or method that has been called can alter or delete the mutable data. This could violate assumptions that the calling function has made about its state. In situations where unknown code is called with references to mutable data, this external code could make changes to the data sent. If this data was not previously cloned, the modified data might not be valid in the context of execution.",
374,Potentially data could be tampered with by another function which should not have been tampered with.,
375,Sending non-cloned mutable data as a return value may result in that data being altered or deleted by the calling function.,
375,"In situations where functions return references to mutable data, it is possible that the external code which called the function may make changes to the data sent. If this data was not previously cloned, the class will then be using modified data which may violate assumptions about its internal state.",
375,Potentially data could be tampered with by another function which should not have been tampered with.,
377,Creating and using insecure temporary files can leave application and system data vulnerable to attack.,
378,"Opening temporary files without appropriate measures or controls can leave the file, its contents and any function that it impacts vulnerable to attack.",
378,"If the temporary file can be read by the attacker, sensitive information may be in that file which could be revealed.",
378,"If that file can be written to by the attacker, the file might be moved into a place to which the attacker does not have access. This will allow the attacker to gain selective resource access-control privileges.",
378,"Depending on the data stored in the temporary file, there is the potential for an attacker to gain an additional input vector which is trusted as non-malicious. It may be possible to make arbitrary changes to data structures, user information, or even process ownership.",
379,The software creates a temporary file in a directory whose permissions allow unintended actors to determine the file's existence or otherwise access that file.,
379,"On some operating systems, the fact that the temporary file exists may be apparent to any user with sufficient privileges to access that directory. Since the file is visible, the application that is using the temporary file could be known. If one has access to list the processes on the system, the attacker has gained information about what the user is doing at that time. By correlating this with the applications the user is running, an attacker could potentially discover what a user's actions are. From this, higher levels of security could be breached.",
379,"Since the file is visible and the application which is using the temp file could be known, the attacker has gained information about what the user is doing at that time.",
382,"A J2EE application uses System.exit(), which also shuts down its container.",
382,It is never a good idea for a web application to attempt to shut down the application container. Access to a function that can shut down the application is an avenue for Denial of Service (DoS) attacks.,
382,A call to System.exit() is probably part of leftover debug code or code imported from a non-J2EE application.,
383,Thread management in a Web application is forbidden in some circumstances and is always highly error prone.,
383,"Thread management in a web application is forbidden by the J2EE standard in some circumstances and is always highly error prone. Managing threads is difficult and is likely to interfere in unpredictable ways with the behavior of the application container. Even without interfering with the container, thread management usually leads to bugs that are hard to detect and diagnose like deadlock, race conditions, and other synchronization errors.",
385,"Covert timing channels convey information by modulating some aspect of system behavior over time, so that the program receiving the information can observe system behavior and infer protected information.",
385,"In some instances, knowing when data is transmitted between parties can provide a malicious user with privileged information. Also, externally monitoring the timing of operations can potentially reveal sensitive data. For example, a cryptographic operation can expose its internal state if the time it takes to perform the operation varies, based on the state.",
385,"Covert channels are frequently classified as either storage or timing channels. Some examples of covert timing channels are the system's paging rate, the time a certain transaction requires to execute, and the time it takes to gain access to a shared bus.",
385,Information exposure.,
390,"The software detects a specific error, but takes no actions to handle the error.",
390,An attacker could utilize an ignored error condition to place the system in an unexpected state that could lead to the execution of unintended logic and could cause other unintended behavior.,
390,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,
391,[PLANNED FOR DEPRECATION. SEE MAINTENANCE NOTES.] Ignoring exceptions and other error conditions may allow an attacker to induce unexpected behavior unnoticed.,
391,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,
395,Catching NullPointerException should not be used as an alternative to programmatic checks to prevent dereferencing a null pointer.,
395,Programmers typically catch NullPointerException under three circumstances:,
395,"Of these three circumstances, only the last is acceptable.",
396,Catching overly broad exceptions promotes complex error handling code that is more likely to contain security vulnerabilities.,
396,"Multiple catch blocks can get ugly and repetitive, but ""condensing"" catch blocks by catching a high-level class like Exception can obscure exceptions that deserve special treatment or that should not be caught at this point in the program. Catching an overly broad exception essentially defeats the purpose of Java's typed exceptions, and can become particularly dangerous if the program grows and begins to throw new types of exceptions. The new exception types will not receive any attention.",
397,Throwing overly broad exceptions promotes complex error handling code that is more likely to contain security vulnerabilities.,
397,"Declaring a method to throw Exception or Throwable makes it difficult for callers to perform proper error handling and error recovery. Java's exception mechanism, for example, is set up to make it easy for callers to anticipate what can go wrong and write code to handle each specific exceptional circumstance. Declaring that a method throws a generic form of exception defeats this system.",
40,An attacker can inject a Windows UNC share ('\\UNC\share\name') into a software system to potentially redirect access to an unintended location or arbitrary file.,
402,The software makes resources available to untrusted parties when those resources are only intended to be accessed by the software.,
405,Software that does not appropriately monitor or control resource consumption can lead to adverse system performance.,
405,"This situation is amplified if the software allows malicious users or attackers to consume more resources than their access level permits. Exploiting such a weakness can lead to asymmetric resource consumption, aiding in amplification attacks against the system or the network.",
405,"Sometimes this is a factor in ""flood"" attacks, but other types of amplification exist.",
408,The software allows an entity to perform a legitimate but expensive operation before authentication or authorization has taken place.,
408,"System resources, CPU and memory, can be quickly consumed. This can lead to poor system performance or system crash.",
413,The software does not lock or does not correctly lock a resource when the software must have exclusive access to the resource.,
413,"When a resource is not properly locked, an attacker could modify the resource while it is being operated on by the software. This might violate the software's assumption that the resource will not change, potentially leading to unexpected behaviors.",
414,A product does not check to see if a lock is present before performing sensitive operations on a resource.,
419,"The software uses a primary channel for administration or restricted functionality, but it does not properly protect the channel.",
419,OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.,
423,This entry has been deprecated because it was a duplicate of CWE-441. All content has been transferred to CWE-441.,
424,The product does not sufficiently protect all possible paths that a user can take to access restricted functionality or resources.,
43,A software system that accepts path input in the form of multiple trailing dot ('filedir....') without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.,
431,A handler is not available or implemented.,
431,"When an exception is thrown and not caught, the process has given up an opportunity to decide if a given failure or event is worth a change in execution.",
432,"The application uses a signal handler that shares state with other signal handlers, but it does not properly mask or prevent those signal handlers from being invoked while the original signal handler is still running.",
432,"During the execution of a signal handler, it can be interrupted by another handler when a different signal is sent. If the two handlers share state - such as global variables - then an attacker can corrupt the state by sending another signal before the first handler has completed execution.",
435,"An interaction error occurs when two entities have correct behavior when running independently of each other, but when they are integrated as components in a larger system or process, they introduce incorrect behaviors that may cause resultant weaknesses.",
435,"When a system or process combines multiple independent components, this often produces new, emergent behaviors at the system level.  However, if the interactions between these components are not fully accounted for, some of the emergent behaviors can be incorrect or even insecure.",
437,"A product acts as an intermediary or monitor between two or more endpoints, but it does not have a complete model of an endpoint's features, behaviors, or state, potentially causing the product to perform incorrect actions based on this incomplete model.",
44,A software system that accepts path input in the form of internal dot ('file.ordir') without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.,
443,This weakness can be found at CWE-113.,
446,"The user interface does not correctly enable or configure a security feature, but the interface provides feedback that causes the user to believe that the feature is in a secure state.",
446,"When the user interface does not properly reflect what the user asks of it, then it can lead the user into a false sense of security. For example, the user might check a box to enable a security option to enable encrypted communications, but the software does not actually enable the encryption. Alternately, the user might provide a ""restrict ALL'"" access control rule, but the software only implements ""restrict SOME"".",
448,A UI function is obsolete and the product does not warn the user.,
45,A software system that accepts path input in the form of multiple internal dot ('file...dir') without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.,
450,The UI has multiple interpretations of user input but does not prompt the user when it selects the less secure interpretation.,
453,"The software, by default, initializes an internal variable with an insecure or less secure value than is possible.",
453,An attacker could gain access to and modify sensitive data or system information.,
455,"The software does not exit or otherwise modify its operation when security-relevant errors occur during initialization, such as when a configuration file has a format error, which can cause the software to execute in a less secure fashion than intended by the administrator.",
455,The application could be placed in an insecure state that may allow an attacker to modify sensitive data or allow unintended logic to be executed.,
458,"This weakness has been deprecated because its name and description did not match. The description duplicated CWE-454, while the name suggested a more abstract initialization problem. Please refer to CWE-665 for the more abstract problem.",
460,"The product does not clean up its state or incorrectly cleans up its state when an exception is thrown, leading to unexpected state or control flow.",
460,"Often, when functions or loops become complicated, some level of resource cleanup is needed throughout execution. Exceptions can disturb the flow of the code and prevent the necessary cleanup from happening.",
460,The code could be left in a bad state.,
460,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,
462,Duplicate keys in associative lists can lead to non-unique keys being mistaken for an error.,
462,"A duplicate key entry -- if the alist is designed properly -- could be used as a constant time replace function. However, duplicate key entries could be inserted by mistake. Because of this ambiguity, duplicate key entries in an association list are not recommended and should not be allowed.",
463,The accidental deletion of a data-structure sentinel can cause serious programming logic problems.,
463,"Often times data-structure sentinels are used to mark structure of the data structure. A common example of this is the null character at the end of strings. Another common example is linked lists which may contain a sentinel to mark the end of the list. It is dangerous to allow this type of control data to be easily accessible. Therefore, it is important to protect from the deletion or modification outside of some wrapper interface which provides safety.",
463,Generally this error will cause the data structure to not work properly.,
463,"If a control character, such as NULL is removed, one may cause resource access control problems.",
464,The accidental addition of a data-structure sentinel can cause serious programming logic problems.,
464,"Data-structure sentinels are often used to mark the structure of data. A common example of this is the null character at the end of strings or a special sentinel to mark the end of a linked list. It is dangerous to allow this type of control data to be easily accessible. Therefore, it is important to protect from the addition or modification of sentinels.",
464,Generally this error will cause the data structure to not work properly by truncating the data.,
466,A function can return a pointer to memory that is outside of the buffer that the pointer is expected to reference.,
467,"The code calls sizeof() on a malloced pointer type, which always returns the wordsize/8. This can produce an unexpected result if the programmer intended to determine how much memory has been allocated.",
467,"The use of sizeof() on a pointer can sometimes generate useful information. An obvious case is to find out the wordsize on a platform. More often than not, the appearance of sizeof(pointer) indicates a bug.",
467,"This error can often cause one to allocate a buffer that is much smaller than what is needed, leading to resultant weaknesses such as buffer overflows.",
468,"In C and C++, one may often accidentally refer to the wrong memory due to the semantics of when math operations are implicitly scaled.",
468,Incorrect pointer scaling will often result in buffer overflow conditions. Confidentiality can be compromised if the weakness is in the context of a buffer over-read or under-read.,
468,Programmers may try to index from a pointer by adding a number of bytes. This is incorrect because C and C++ implicitly scale the operand by the size of the data type.,
469,"The application subtracts one pointer from another in order to determine size, but this calculation can be incorrect if the pointers do not exist in the same memory chunk.",
469,There is the potential for arbitrary code execution with privileges of the vulnerable program.,
47,A software system that accepts path input in the form of leading space (' filedir') without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.,
474,The code uses a function that has inconsistent implementations across operating systems and versions.,
474,"The use of inconsistent implementations can cause changes in behavior when the code is ported or built under a different environment than the programmer expects, which can lead to security problems in some cases.",
474,"The implementation of many functions varies by platform, and at times, even by different versions of the same platform. Implementation differences can include:",
475,The behavior of this function is undefined unless its control parameter is set to a specific value.,
477,"The code uses deprecated or obsolete functions, which suggests that the code has not been actively reviewed or maintained.",
477,"As programming languages evolve, functions occasionally become obsolete due to:",
477,Functions that are removed are usually replaced by newer counterparts that perform the same task in some different and hopefully improved way.,
478,"The code does not have a default case in a switch statement, which might lead to complex logical errors and resultant weaknesses.",
478,"This flaw represents a common problem in software development, in which not all possible values for a variable are considered or handled by a given process. Because of this, further decisions are made based on poor information, and cascading failure results. This cascading failure may result in any number of security issues, and constitutes a significant failure in the system.",
478,"Depending on the logical circumstances involved, any consequences may result: e.g., issues of confidentiality, authentication, authorization, availability, integrity, accountability, or non-repudiation.",
48,A software system that accepts path input in the form of internal space ('file(SPACE)name') without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.,
480,"The programmer accidentally uses the wrong operator, which changes the application logic in security-relevant ways.",
480,These types of errors are generally the result of a typo.,
480,This weakness can cause unintended logic to be executed and other unexpected application behavior.,
481,The code uses an operator for assignment when the intention was to perform a comparison.,
481,"In many languages the compare statement is very close in appearance to the assignment statement and are often confused. This bug is generally the result of a typo and usually causes obvious problems with program execution. If the comparison is in an if statement, the if statement will usually evaluate the value of the right-hand side of the predicate.",
482,The code uses an operator for comparison when the intention was to perform an assignment.,
482,"In many languages, the compare statement is very close in appearance to the assignment statement; they are often confused.",
482,"The assignment will not take place, which should cause obvious program execution problems.",
482,This bug primarily originates from a typo.,
483,"The code does not explicitly delimit a block that is intended to contain 2 or more statements, creating a logic error.",
483,"In some languages, braces (or other delimiters) are optional for blocks. When the delimiter is omitted, it is possible to insert a logic error in which a statement is thought to be in a block but is not. In some cases, the logic error can have security implications.",
483,"This is a general logic error which will often lead to obviously-incorrect behaviors that are quickly noticed and fixed. In lightly tested or untested code, this error may be introduced it into a production environment and provide additional attack vectors by creating a control flow path leading to an unexpected state in the application. The consequences will depend on the types of behaviors that are being incorrectly executed.",
484,"The program omits a break statement within a switch or similar construct, causing code associated with multiple conditions to execute. This can cause problems when the programmer only intended to execute code associated with one condition.",
484,This can lead to critical code executing in situations where it should not.,
484,This weakness can cause unintended logic to be executed and other unexpected application behavior.,
486,"The program compares classes by name, which can cause it to use the wrong class when multiple classes can have the same name.",
486,"If the decision to trust the methods and data of an object is based on the name of a class, it is possible for malicious users to send objects of the same name as trusted classes and thereby gain the trust afforded to known classes and types.",
486,"If a program relies solely on the name of an object to determine identity, it may execute the incorrect or unintended code.",
487,"Java packages are not inherently closed; therefore, relying on them for code security is not a good practice.",
487,The purpose of package scope is to prevent accidental access by other parts of a program. This is an ease-of-software-development feature but not a security feature.,
487,Any data in a Java package can be accessed outside of the Java framework if the package is distributed.,
487,The data in a Java class can be modified by anyone outside of the Java framework if the packages is distributed.,
488,"The product does not sufficiently enforce boundaries between the states of different sessions, causing data to be provided to, or used by, the wrong session.",
488,"Data can ""bleed"" from one session to another through member variables of singleton objects, such as Servlets, and objects from a shared pool.",
488,"In the case of Servlets, developers sometimes do not understand that, unless a Servlet implements the SingleThreadModel interface, the Servlet is a singleton; there is only one instance of the Servlet, and that single instance is used and re-used to handle multiple requests that are processed simultaneously by different threads. A common result is that developers use Servlet member fields in such a way that one user may inadvertently see another user's data. In other words, storing user data in Servlet member fields introduces a data access race condition.",
488,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,
489,"The application is deployed to unauthorized actors with debugging code still enabled or active, which can create unintended entry points or expose sensitive information.",
489,"A common development practice is to add ""back door"" code specifically designed for debugging or testing purposes that is not intended to be shipped or deployed with the application. These back door entry points create security risks because they are not considered during design or testing and fall outside of the expected operating conditions of the application.",
489,"The severity of the exposed debug application will depend on the particular instance. At the least, it will give an attacker sensitive information about the settings and mechanics of web applications on the server. At worst, as is often the case, the debug application will allow an attacker complete control over the web application and server, as well as confidential information that either of these access.",
489,"In web-based applications, debug code is used to test and modify web application properties, configuration information, and functions. If a debug application is left on a production server, this oversight during the ""software process"" allows attackers access to debug functionality.",
491,"A class has a cloneable() method that is not declared final, which allows an object to be created without calling the constructor. This can cause the object to be in an unexpected state.",
492,Inner classes are translated into classes that are accessible at package scope and may expose code that the programmer intended to keep private to attackers.,
492,"Inner classes quietly introduce several security concerns because of the way they are translated into Java bytecode. In Java source code, it appears that an inner class can be declared to be accessible only by the enclosing class, but Java bytecode has no concept of an inner class, so the compiler must transform an inner class declaration into a peer class with package level access to the original outer class. More insidiously, since an inner class can access private fields in its enclosing class, once an inner class becomes a peer class in bytecode, the compiler converts private fields accessed by the inner class into protected fields.",
492,"""Inner Classes"" data confidentiality aspects can often be overcome.",
495,"The product has a method that is declared public, but returns a reference to a private data structure, which could then be modified in unexpected ways.",
495,The contents of the data structure can be modified from outside the intended scope.,
496,Assigning public data to a private array is equivalent to giving public access to the array.,
496,The contents of the array can be modified from outside the intended scope.,
497,The application does not properly prevent sensitive system-level information from being accessed by unauthorized actors who do not have the same level of access to the underlying system as the application does.,
497,"Network-based software, such as web applications, often runs on top of an operating system or similar environment.  When the application communicates with outside parties, details about the underlying system are expected to remain hidden, such as path names for data files, other OS users, installed packages, the application environment, etc. This system information may be provided by the application itself, or buried within diagnostic or debugging messages. Debugging information helps an adversary learn about the system and form an attack plan.",
497,"An information exposure occurs when system data or debugging information leaves the program through an output stream or logging function that makes it accessible to unauthorized parties. Using other weaknesses, an attacker could cause errors to occur; the response to these errors can reveal detailed system information, along with other impacts.  An attacker can use messages that reveal technologies, operating systems, and product versions to tune the attack against known vulnerabilities in these technologies. An application may use diagnostic methods that provide significant implementation details such as stack traces as part of its error handling mechanism.",
498,"The code contains a class with sensitive data, but the class is cloneable. The data can then be accessed by cloning the class.",
498,"Cloneable classes are effectively open classes, since data cannot be hidden in them. Classes that do not explicitly deny cloning can be cloned by any other class without running the constructor.",
498,"A class that can be cloned can be produced without executing the constructor. This is dangerous since the constructor may perform security-related checks. By allowing the object to be cloned, those checks may be bypassed.",
499,"The code contains a class with sensitive data, but the class does not explicitly deny serialization. The data can be accessed by serializing the class through another class.",
499,"Serializable classes are effectively open classes since data cannot be hidden in them. Classes that do not explicitly deny serialization can be serialized by any other class, which can then in turn use the data stored inside it.",
499,"an attacker can write out the class to a byte stream, then extract the important data from it.",
5,Information sent over a network can be compromised while in transit. An attacker may be able to read or modify the contents if the data are sent in plaintext or are weakly encrypted.,
500,"An object contains a public static field that is not marked final, which might allow it to be modified in unexpected ways.",
500,Public static variables can be read without an accessor and changed without a mutator by any classes in the application.,
500,"When a field is declared public but not final, the field can be read and written to by arbitrary Java code.",
500,The object could potentially be tampered with.,
500,The object could potentially allow the object to be read.,
501,The product mixes trusted and untrusted data in the same data structure or structured message.,
501,"A trust boundary can be thought of as line drawn through a program. On one side of the line, data is untrusted. On the other side of the line, data is assumed to be trustworthy. The purpose of validation logic is to allow data to safely cross the trust boundary - to move from untrusted to trusted. A trust boundary violation occurs when a program blurs the line between what is trusted and what is untrusted. By combining trusted and untrusted data in the same data structure, it becomes easier for programmers to mistakenly trust unvalidated data.",
506,The application contains code that appears to be malicious in nature.,
506,"Malicious flaws have acquired colorful names, including Trojan horse, trapdoor, timebomb, and logic-bomb. A developer might insert malicious code with the intent to subvert the security of an application or its host system at some time in the future. It generally refers to a program that performs a useful service but exploits rights of the program's user in a way the user does not intend.",
507,"The software appears to contain benign or useful functionality, but it also contains code that is hidden from normal operation that violates the intended security policy of the user or the system administrator.",
508,Non-replicating malicious code only resides on the target system or software that is attacked; it does not attempt to spread to other systems.,
509,"Replicating malicious code, including viruses and worms, will attempt to attack other systems once it has successfully compromised the target system or software.",
51,A software system that accepts path input in the form of multiple internal slash ('/multiple//internal/slash/') without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.,
510,"A trapdoor is a hidden piece of code that responds to a special input, allowing its user access to resources without passing through the normal security enforcement mechanism.",
511,"The software contains code that is designed to disrupt the legitimate operation of the software (or its environment) when a certain time passes, or when a certain logical condition is met.",
511,"When the time bomb or logic bomb is detonated, it may perform a denial of service such as crashing the system, deleting critical data, or degrading system response time. This bomb might be placed within either a replicating or non-replicating Trojan horse.",
512,"The software collects personally identifiable information about a human user or the user's activities, but the software accesses this information using other resources besides itself, and it does not require that user's explicit approval or direct input into the software.",
512,"""Spyware"" is a commonly used term with many definitions and interpretations. In general, it is meant to software that collects information or installs functionality that human users might not allow if they were fully aware of the actions being taken by the software. For example, a user might expect that tax software would collect a social security number and include it when filing a tax return, but that same user would not expect gaming software to obtain the social security number from that tax software's data.",
514,A covert channel is a path that can be used to transfer information in a way not intended by the system's designers.,
514,Typically the system has not given authorization for the transmission and has no knowledge of its occurrence.,
515,A covert storage channel transfers information through the setting of bits by one program and the reading of those bits by another. What distinguishes this case from that of ordinary operation is that the bits are used to convey encoded information.,
515,"Covert storage channels occur when out-of-band data is stored in messages for the purpose of memory reuse. Covert channels are frequently classified as either storage or timing channels. Examples would include using a file intended to hold only audit information to convey user passwords--using the name of a file or perhaps status bits associated with it that can be read by all users to signal the contents of the file. Steganography, concealing information in such a manner that no one but the intended recipient knows of the existence of the message, is a good example of a covert storage channel.",
515,Covert storage channels may provide attackers with important information about the system in question.,
515,"If these messages or packets are sent with unnecessary data contained within, it may tip off malicious listeners as to the process that created the message. With this information, attackers may learn any number of things, including the hardware platform, operating system, or algorithms used by the sender. This information can be of significant value to the user in launching further attacks.",
516,This weakness can be found at CWE-385.,
52,A software system that accepts path input in the form of multiple trailing slash ('/multiple/trailing/slash//') without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.,
520,Allowing a .NET application to run at potentially escalated levels of access to the underlying operating and file systems can be dangerous and result in various forms of attacks.,
520,".NET server applications can optionally execute using the identity of the user authenticated to the client. The intention of this functionality is to bypass authentication and access control checks within the .NET application code. Authentication is done by the underlying web server (Microsoft Internet Information Service IIS), which passes the authenticated token, or unauthenticated anonymous token, to the .NET application. Using the token to impersonate the client, the application then relies on the settings within the NTFS directories and files to control access. Impersonation enables the application, on the server running the .NET application, to both execute code and access resources in the context of the authenticated and authorized user.",
523,Login pages do not use adequate measures to protect the user name and password while they are in transit from the client to the server.,
523,"SSL (Secure Socket Layer) provides data confidentiality and integrity to HTTP. By encrypting HTTP messages, SSL protects from attackers eavesdropping or altering message contents.",
523,OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.,
524,"The code uses a cache that contains sensitive information, but the cache can be read by an actor outside of the intended control sphere.",
524,"   Applications may use caches to improve efficiency when communicating with remote entities or performing intensive calculations.  A cache maintains a pool of objects, threads, connections, pages, financial data, passwords, or other resources to minimize the time it takes to initialize and access these resources.  If the cache is accessible to unauthorized actors, attackers can read the cache and obtain this sensitive information. ",
525,The web application does not use an appropriate caching policy that specifies the extent to which each web page and associated form fields should be cached.,
525,"Browsers often store information in a client-side cache, which can leave behind sensitive information for other users to find and exploit, such as passwords or credit card numbers. The locations at most risk include public terminals, such as those in libraries and Internet cafes.",
526,Environmental variables may contain sensitive information about a remote server.,
527,"The product stores a CVS, git, or other repository in a directory, archive, or other resource that is stored, transferred, or otherwise made accessible to unauthorized actors.",
527,"Version control repositories such as CVS or git store version-specific metadata and other details within subdirectories. If these subdirectories are stored on a web server or added to an archive, then these could be used by an attacker. This information may include usernames, filenames, path root, IP addresses, and detailed ""diff"" data about how files have been changed - which could reveal source code snippets that were never intended to be made public.",
527,OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.,
528,"The product generates a core dump file in a directory, archive, or other resource that is stored, transferred, or otherwise made accessible to unauthorized actors.",
528,OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.,
529,The product stores access control list files in a directory or other container that is accessible to actors outside of the intended control sphere.,
529,Exposure of these access control list files may give the attacker information about the configuration of the site or system. This information may then be used to bypass the intended security policy or identify trusted systems from which an attack can be launched.,
529,OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.,
53,A software system that accepts path input in the form of multiple internal backslash ('\multiple\trailing\\slash') without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.,
530,A backup file is stored in a directory or archive that is made accessible to unauthorized actors.,
530,"Often, older backup files are renamed with an extension such as .~bk to distinguish them from production files. The source code for old files that have been renamed in this manner and left in the webroot can often be retrieved. This renaming may have been performed automatically by the web server, or manually by the administrator.",
530,"At a minimum, an attacker who retrieves this file would have all the information contained in it, whether that be database calls, the format of parameters accepted by the application, or simply information regarding the architectural structure of your site.",
530,OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.,
531,"Accessible test applications can pose a variety of security risks. Since developers or administrators rarely consider that someone besides themselves would even know about the existence of these applications, it is common for them to contain sensitive information or functions.",
533,This entry has been deprecated because its abstraction was too low-level.  See CWE-532.,
535,"A command shell error message indicates that there exists an unhandled exception in the web application code. In many cases, an attacker can leverage the conditions that cause these errors in order to gain unauthorized access to the system.",
536,A servlet error message indicates that there exists an unhandled exception in your web application code and may provide useful information to an attacker.,
536,"The error message may contain the location of the file in which the offending function is located. This may disclose the web root's absolute path as well as give the attacker the location of application files or configuration information. It may even disclose the portion of code that failed. In many cases, an attacker can use the data to launch further attacks against the system.",
537,"In many cases, an attacker can leverage the conditions that cause unhandled exception errors in order to gain unauthorized access to the system.",
539,"The web application uses persistent cookies, but the cookies contain sensitive information.",
539,"Cookies are small bits of data that are sent by the web application but stored locally in the browser. This lets the application use the cookie to pass information between pages and store variable information. The web application controls what information is stored in a cookie and how it is used. Typical types of information stored in cookies are session identifiers, personalization and customization information, and in rare cases even usernames to enable automated logins. There are two different types of cookies: session cookies and persistent cookies. Session cookies just live in the browser's memory and are not stored anywhere, but persistent cookies are stored on the browser's hard drive. This can cause security and privacy issues depending on the information stored in the cookie and how it is accessed.",
54,A software system that accepts path input in the form of trailing backslash ('filedir\') without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.,
540,Source code on a web server or repository often contains sensitive information and should generally not be accessible to users.,
540,"There are situations where it is critical to remove source code from an area or server. For example, obtaining Perl source code on a system allows an attacker to understand the logic of the script and extract extremely useful information such as code bugs or logins and passwords.",
541,"If an include file source is accessible, the file can contain usernames and passwords, as well as sensitive information pertaining to the application and system.",
542,This entry has been deprecated because its abstraction was too low-level.  See CWE-532.,
543,The software uses the singleton pattern when creating a resource within a multithreaded environment.,
543,The use of a singleton pattern may not be thread-safe.,
544,"The software does not use a standardized method for handling errors throughout the code, which might introduce inconsistent error handling and resultant weaknesses.",
544,"If the application handles error messages individually, on a one-by-one basis, this is likely to result in inconsistent error handling. The causes of errors may be lost. Also, detailed information about the causes of an error may be unintentionally returned to the user.",
544,OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.,
545,"This weakness has been deprecated because it partially overlaps CWE-470, it describes legitimate programmer behavior, and other portions will need to be integrated into other entries.",
546,"The code contains comments that suggest the presence of bugs, incomplete functionality, or weaknesses.",
546,"Many suspicious comments, such as BUG, HACK, FIXME, LATER, LATER2, TODO, in the code indicate missing security functionality and checking. Others indicate code problems that programmers should fix, such as hard-coded variables, error handling, not using stored procedures, and performance issues.",
546,Suspicious comments could be an indication that there are problems in the source code that may need to be fixed and is an indication of poor quality. This could lead to further bugs and the introduction of weaknesses.,
547,"The program uses hard-coded constants instead of symbolic names for security-critical values, which increases the likelihood of mistakes during code maintenance or security policy change.",
547,"If the developer does not find all occurrences of the hard-coded constants, an incorrect policy decision may be made if one of the constants is not changed. Making changes to these values will require code changes that may be difficult or impossible once the system is released to the field. In addition, these hard-coded values may become available to attackers if the code is ever disclosed.",
547,The existence of hardcoded constants could cause unexpected behavior and the introduction of weaknesses during code maintenance or when making changes to the code if all occurrences are not modified. The use of hardcoded constants is an indication of poor quality.,
548,"A directory listing is inappropriately exposed, yielding potentially sensitive information to attackers.",
548,A directory listing provides an attacker with the complete index of all the resources located inside of the directory. The specific risks and consequences vary depending on which files are listed and accessible.,
548,"Exposing the contents of a directory can lead to an attacker gaining access to source code or providing useful information for the attacker to devise exploits, such as creation times of files or any information that may be encoded in file names. The directory listing may also compromise private or confidential data.",
549,"The software does not mask passwords during entry, increasing the potential for attackers to observe and capture passwords.",
550,"Certain conditions, such as network failure, will cause a server error message to be displayed.",
550,"While error messages in and of themselves are not dangerous, per se, it is what an attacker can glean from them that might cause eventual problems.",
550,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,
551,"If a web server does not fully parse requested URLs before it examines them for authorization, it may be possible for an attacker to bypass authorization protection.",
551,"For instance, the character strings /./ and / both mean current directory. If /SomeDirectory is a protected directory and an attacker requests /./SomeDirectory, the attacker may be able to gain access to the resource if /./ is not converted to / before the authorization check is performed.",
551,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,
553,A possible shell file exists in /cgi-bin/ or other accessible directories. This is extremely dangerous and can be used by an attacker to execute commands on the web server.,
554,The ASP.NET application does not use an input validation framework.,
554,"Unchecked input leads to cross-site scripting, process control, and SQL injection vulnerabilities, among others.",
555,The J2EE application stores a plaintext password in a configuration file.,
555,"Storing a plaintext password in a configuration file allows anyone who can read the file to access the password-protected resource, making it an easy target for attackers.",
556,Configuring an ASP.NET application to run with impersonated credentials may give the application unnecessary privileges.,
556,The use of impersonated credentials allows an ASP.NET application to run with either the privileges of the client on whose behalf it is executing or with arbitrary privileges granted in its configuration.,
558,"The application uses the getlogin() function in a multithreaded context, potentially causing it to return incorrect values.",
558,"The getlogin() function returns a pointer to a string that contains the name of the user associated with the calling process. The function is not reentrant, meaning that if it is called from another process, the contents are not locked out and the value of the string can be changed by another process. This makes it very risky to use because the username can be changed by other processes, so the results of the function cannot be trusted.",
56,A software system that accepts path input in the form of asterisk wildcard ('filedir*') without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.,
560,The product calls umask() with an incorrect argument that is specified as if it is an argument to chmod().,
561,"The software contains dead code, which can never be executed.",
561,Dead code is source code that can never be executed in a running program. The surrounding code makes it impossible for a section of code to ever be executed.,
561,Dead code that results from code that can never be executed is an indication of problems with the source code that needs to be fixed and is an indication of poor quality.,
562,"A function returns the address of a stack variable, which will cause unintended program behavior, typically in the form of a crash.",
562,"Because local variables are allocated on the stack, when a program returns a pointer to a local variable, it is returning a stack address. A subsequent function call is likely to re-use this same stack address, thereby overwriting the value of the pointer, which no longer corresponds to the same variable since a function's stack frame is invalidated when it returns. At best this will cause the value of the pointer to change unexpectedly. In many cases it causes the program to crash the next time the pointer is dereferenced.",
563,"The variable's value is assigned but never used, making it a dead store.",
563,"After the assignment, the variable is either assigned another value or goes out of scope. It is likely that the variable is simply vestigial, but it is also possible that the unused variable points out a bug.",
563,This weakness could be an indication of a bug in the program or a deprecated variable that was not removed and is an indication of poor quality. This could lead to further bugs and the introduction of weaknesses.,
564,Using Hibernate to execute a dynamic SQL statement built with user-controlled input can allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.,
566,"The software uses a database table that includes records that should not be accessible to an actor, but it executes a SQL statement with a primary key that can be controlled by that actor.",
566,"When a user can set a primary key to any value, then the user can modify the key to point to unauthorized records.",
566,Database access control errors occur when:,
566,COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.,
567,"The product does not properly synchronize shared data, such as static variables across threads, which can lead to undefined behavior and unpredictable data changes.",
567,"Within servlets, shared static variables are not protected from concurrent access, but servlets are multithreaded. This is a typical programming mistake in J2EE applications, since the multithreading is handled by the framework. When a shared variable can be influenced by an attacker, one thread could wind up modifying the variable to contain data that is not valid for a different thread that is also using the data within the variable.",
567,Note that this weakness is not unique to servlets.,
567,"If the shared variable contains sensitive data, it may be manipulated or displayed in another user session. If this data is used to control the application, its value can be manipulated to cause the application to crash or perform poorly.",
568,The software contains a finalize() method that does not call super.finalize().,
568,The Java Language Specification states that it is a good practice for a finalize() method to call super.finalize().,
570,The software contains an expression that will always evaluate to false.,
571,The software contains an expression that will always evaluate to true.,
572,"The program calls a thread's run() method instead of calling start(), which causes the code to run in the thread of the caller instead of the callee.",
572,"In most cases a direct call to a Thread object's run() method is a bug. The programmer intended to begin a new thread of control, but accidentally called run() instead of start(), so the run() method will execute in the caller's thread of control.",
574,The program violates the Enterprise JavaBeans (EJB) specification by using thread synchronization primitives.,
574,"The Enterprise JavaBeans specification requires that every bean provider follow a set of programming guidelines designed to ensure that the bean will be portable and behave consistently in any EJB container. In this case, the program violates the following EJB guideline: ""An enterprise bean must not use thread synchronization primitives to synchronize execution of multiple instances."" The specification justifies this requirement in the following way: ""This rule is required to ensure consistent runtime semantics because while some EJB containers may use a single JVM to execute all enterprise bean's instances, others may distribute the instances across multiple JVMs.""",
575,The program violates the Enterprise JavaBeans (EJB) specification by using AWT/Swing.,
575,"The Enterprise JavaBeans specification requires that every bean provider follow a set of programming guidelines designed to ensure that the bean will be portable and behave consistently in any EJB container. In this case, the program violates the following EJB guideline: ""An enterprise bean must not use the AWT functionality to attempt to output information to a display, or to input information from a keyboard."" The specification justifies this requirement in the following way: ""Most servers do not allow direct interaction between an application program and a keyboard/display attached to the server system.""",
576,The program violates the Enterprise JavaBeans (EJB) specification by using the java.io package.,
576,"The Enterprise JavaBeans specification requires that every bean provider follow a set of programming guidelines designed to ensure that the bean will be portable and behave consistently in any EJB container. In this case, the program violates the following EJB guideline: ""An enterprise bean must not use the java.io package to attempt to access files and directories in the file system."" The specification justifies this requirement in the following way: ""The file system APIs are not well-suited for business components to access data. Business components should use a resource manager API, such as JDBC, to store data.""",
577,The program violates the Enterprise JavaBeans (EJB) specification by using sockets.,
577,"The Enterprise JavaBeans specification requires that every bean provider follow a set of programming guidelines designed to ensure that the bean will be portable and behave consistently in any EJB container. In this case, the program violates the following EJB guideline: ""An enterprise bean must not attempt to listen on a socket, accept connections on a socket, or use a socket for multicast."" The specification justifies this requirement in the following way: ""The EJB architecture allows an enterprise bean instance to be a network socket client, but it does not allow it to be a network server. Allowing the instance to become a network server would conflict with the basic function of the enterprise bean-- to serve the EJB clients.""",
578,The program violates the Enterprise JavaBeans (EJB) specification by using the class loader.,
578,"The Enterprise JavaBeans specification requires that every bean provider follow a set of programming guidelines designed to ensure that the bean will be portable and behave consistently in any EJB container. In this case, the program violates the following EJB guideline: ""The enterprise bean must not attempt to create a class loader; obtain the current class loader; set the context class loader; set security manager; create a new security manager; stop the JVM; or change the input, output, and error streams."" The specification justifies this requirement in the following way: ""These functions are reserved for the EJB container. Allowing the enterprise bean to use these functions could compromise security and decrease the container's ability to properly manage the runtime environment.""",
579,"The application stores a non-serializable object as an HttpSession attribute, which can hurt reliability.",
579,"A J2EE application can make use of multiple JVMs in order to improve application reliability and performance. In order to make the multiple JVMs appear as a single application to the end user, the J2EE container can replicate an HttpSession object across multiple JVMs so that if one JVM becomes unavailable another can step in and take its place without disrupting the flow of the application. This is only possible if all session data is serializable, allowing the session to be duplicated between the JVMs.",
579,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,
580,The software contains a clone() method that does not call super.clone() to obtain the new object.,
580,"All implementations of clone() should obtain the new object by calling super.clone(). If a class does not follow this convention, a subclass's clone() method will return an object of the wrong type.",
581,The software does not maintain equal hashcodes for equal objects.,
581,"Java objects are expected to obey a number of invariants related to equality. One of these invariants is that equal objects must have equal hashcodes. In other words, if a.equals(b) == true then a.hashCode() == b.hashCode().",
581,"If this invariant is not upheld, it is likely to cause trouble if objects of this class are stored in a collection. If the objects of the class in question are used as a key in a Hashtable or if they are inserted into a Map or Set, it is critical that equal objects have equal hashcodes.",
582,"The program declares an array public, final, and static, which is not sufficient to prevent the array's contents from being modified.",
582,"Because arrays are mutable objects, the final constraint requires that the array object itself be assigned only once, but makes no guarantees about the values of the array elements. Since the array is public, a malicious program can change the values stored in the array. As such, in most cases an array declared public, final and static is a bug.",
582,"Mobile code, in this case a Java Applet, is code that is transmitted across a network and executed on a remote machine. Because mobile code developers have little if any control of the environment in which their code will execute, special security concerns become relevant. One of the biggest environmental threats results from the risk that the mobile code will run side-by-side with other, potentially malicious, mobile code. Because all of the popular web browsers execute code from multiple sources together in the same JVM, many of the security guidelines for mobile code are focused on preventing manipulation of your objects' state and behavior by adversaries who have access to the same virtual machine where your program is running.",
583,The program violates secure coding principles for mobile code by declaring a finalize() method public.,
583,"A program should never call finalize explicitly, except to call super.finalize() inside an implementation of finalize(). In mobile code situations, the otherwise error prone practice of manual garbage collection can become a security threat if an attacker can maliciously invoke a finalize() method because it is declared with public access.",
584,"The code has a return statement inside a finally block, which will cause any thrown exception in the try block to be discarded.",
585,The software contains an empty synchronized block.,
585,An empty synchronized block does not actually accomplish any synchronization and may indicate a troubled section of code. An empty synchronized block can occur because code no longer needed within the synchronized block is commented out without removing the synchronized block.,
585,"An empty synchronized block will wait until nobody else is using the synchronizer being specified. While this may be part of the desired behavior, because you haven't protected the subsequent code by placing it inside the synchronized block, nothing is stopping somebody else from modifying whatever it was you were waiting for while you run the subsequent code.",
586,The software makes an explicit call to the finalize() method from outside the finalizer.,
586,"While the Java Language Specification allows an object's finalize() method to be called from outside the finalizer, doing so is usually a bad idea. For example, calling finalize() explicitly means that finalize() will be called more than once: the first time will be the explicit call and the last time will be the call that is made after the object is garbage collected.",
587,The software sets a pointer to a specific address other than NULL or 0.,
587,Using a fixed address is not portable because that address will probably not be valid in all environments or platforms.,
587,"If one executes code at a known location, an attacker might be able to inject code there beforehand.",
587,"If the code is ported to another platform or environment, the pointer is likely to be invalid and cause a crash.",
587,The data at a known pointer location can be easily read or influenced by an attacker.,
588,Casting a non-structure type to a structure type and accessing a field can lead to memory access errors or data corruption.,
588,Adjacent variables in memory may be corrupted by assignments performed on fields after the cast.,
588,Execution may end due to a memory access error.,
589,The software uses an API function that does not exist on all versions of the target platform. This could cause portability problems or inconsistencies that allow denial of service or other consequences.,
589,"Some functions that offer security features supported by the OS are not available on all versions of the OS in common use. Likewise, functions are often deprecated or made obsolete for security reasons and should not be used.",
590,"The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc().",
590,"When free() is called on an invalid pointer, the program's memory management data structures may become corrupted. This corruption can cause the program to crash or, in some circumstances, an attacker may be able to cause free() to operate on controllable memory locations to modify critical program variables or execute code.",
590,"There is the potential for arbitrary code execution with privileges of the vulnerable program via a ""write, what where"" primitive. If pointers to memory which hold user information are freed, a malicious user will be able to write 4 bytes anywhere in memory.",
591,"The application stores sensitive data in memory that is not locked, or that has been incorrectly locked, which might cause the memory to be written to swap files on disk by the virtual memory manager. This can make the data more accessible to external actors.",
591,"On Windows systems the VirtualLock function can lock a page of memory to ensure that it will remain present in memory and not be swapped to disk. However, on older versions of Windows, such as 95, 98, or Me, the VirtualLock() function is only a stub and provides no protection. On POSIX systems the mlock() call ensures that a page will stay resident in memory but does not guarantee that the page will not appear in the swap. Therefore, it is unsuitable for use as a protection mechanism for sensitive data. Some platforms, in particular Linux, do make the guarantee that the page will not be swapped, but this is non-standard and is not portable. Calls to mlock() also require supervisor privilege. Return values for both of these calls must be checked to ensure that the lock operation was actually successful.",
591,Sensitive data that is written to a swap file may be exposed.,
592,This weakness has been deprecated because it covered redundant concepts already described in CWE-287.,
593,The software modifies the SSL context after connection creation has begun.,
593,"If the program modifies the SSL_CTX object after creating SSL objects from it, there is the possibility that older SSL objects created from the original context could all be affected by that change.",
593,"No authentication takes place in this process, bypassing an assumed protection of encryption.",
593,The encrypted communication between a user and a trusted host may be subject to a sniffing attack.,
593,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,
594,When the J2EE container attempts to write unserializable objects to disk there is no guarantee that the process will complete successfully.,
594,"In heavy load conditions, most J2EE application frameworks flush objects to disk to manage memory requirements of incoming requests. For example, session scoped objects, and even application scoped objects, are written to disk when required. While these application frameworks do the real work of writing objects to disk, they do not enforce that those objects be serializable, thus leaving the web application vulnerable to crashes induced by serialization failure. An attacker may be able to mount a denial of service attack by sending enough requests to the server to force the web application to save objects to disk.",
594,Data represented by unserializable objects can be corrupted.,
594,Non-serializability of objects can lead to system crash.,
595,"The program compares object references instead of the contents of the objects themselves, preventing it from detecting equivalent objects.",
595,"For example, in Java, comparing objects using == usually produces deceptive results, since the == operator compares object references rather than values; often, this means that using == for strings is actually comparing the strings' references, not their values.",
595,This weakness can lead to erroneous results that can cause unexpected application behaviors.,
596,This weakness has been deprecated.  It was poorly described and difficult to distinguish from other entries.  It was also inappropriate to assign a separate ID solely because of domain-specific considerations.  Its closest equivalent is CWE-1023.,
597,"The product uses the wrong operator when comparing a string, such as using ""=="" when the equals() method should be used instead.",
597,"In Java, using == or != to compare two strings for equality actually compares two objects for equality, not their values. Chances are good that the two references will never be equal. While this weakness often only affects program correctness, if the equality is used for a security decision, it could be leveraged to affect program security.",
598,The web application uses the HTTP GET method to process a request and includes sensitive information in the query string of that requests.,
598,"The query string can be saved in the browser's history, passed through Referers to other web sites, stored in web logs, or otherwise recorded in other sources.  If the query string contains sensitive information such as session identifiers, then attackers can use this information to launch further attacks. ",
598,"At a minimum, attackers can garner information from query strings that can be utilized in escalating their method of attack, such as information about the internal workings of the application or database column names. Successful exploitation of query string parameter vulnerabilities could lead to an attacker impersonating a legitimate user, obtaining proprietary data, or simply executing actions not intended by the application developers.",
6,The J2EE application is configured to use an insufficient session ID length.,
6,"If an attacker can guess or steal a session ID, then they may be able to take over the user's session (called session hijacking). The number of possible session IDs increases with increased session ID length, making it more difficult to guess or steal a session ID.",
6,"If an attacker can guess an authenticated user's session identifier, they can take over the user's session.",
6,COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.,
600,"The Servlet does not catch all exceptions, which may reveal sensitive debugging information.",
600,"When a Servlet throws an exception, the default error response the Servlet container sends back to the user typically includes debugging information. This information is of great value to an attacker. For example, a stack trace might show the attacker a malformed SQL query string, the type of database being used, and the version of the application container. This information enables the attacker to target known vulnerabilities in these components.",
603,"A client/server product performs authentication within client code but not in server code, allowing server-side authentication to be bypassed via a modified client that omits the authentication check.",
603,Client-side authentication is extremely weak and may be breached easily. Any attacker may read the source code and reverse-engineer the authentication mechanism to access parts of the application which would otherwise be protected.,
603,COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.,
605,"When multiple sockets are allowed to bind to the same port, other services on that port may be stolen or spoofed.",
605,"On most systems, a combination of setting the SO_REUSEADDR socket option, and a call to bind() allows any process to bind to a port to which a previous process has bound with INADDR_ANY. This allows a user to bind to the specific address of a server bound to INADDR_ANY on an unprivileged port, and steal its UDP packets/TCP connection.",
605,Packets from a variety of network services may be stolen or the services spoofed.,
606,"The product does not properly check inputs that are used for loop conditions, potentially leading to a denial of service because of excessive looping.",
607,"A public or protected static final field references a mutable object, which allows the object to be changed by malicious code, or accidentally from another package.",
608,"An ActionForm class contains a field that has not been declared private, which can be accessed without using a setter or getter.",
609,"The program uses double-checked locking to access a resource without the overhead of explicit synchronization, but the locking is insufficient.",
609,"Double-checked locking refers to the situation where a programmer checks to see if a resource has been initialized, grabs a lock, checks again to see if the resource has been initialized, and then performs the initialization if it has not occurred yet. This should not be done, as is not guaranteed to work in all languages and on all architectures. In summary, other threads may not be operating inside the synchronous block and are not guaranteed to see the operations execute in the same order as they would appear inside the synchronous block.",
612,"The product creates a search index of private or sensitive documents, but it does not properly limit index access to actors who are authorized to see the original information.",
612,"Web sites and other document repositories may apply an indexing routine against a group of private documents to facilitate search.  If the index's results are available to parties who do not have access to the documents being indexed, then attackers could obtain portions of the documents by conducting targeted searches and reading the results.  The risk is especially dangerous if search results include surrounding text that was not part of the search query. This issue can appear in search engines that are not configured (or implemented) to ignore critical files that should remain hidden; even without permissions to download these files directly, the remote user could read them.",
619,"If a database cursor is not closed properly, then it could become accessible to other users while retaining the same privileges that were originally assigned, leaving the cursor ""dangling.""",
619,"For example, an improper dangling cursor could arise from unhandled exceptions. The impact of the issue depends on the cursor's role, but SQL injection attacks are commonly possible.",
619,A cursor is a feature in Oracle PL/SQL and other languages that provides a handle for executing and accessing the results of SQL queries.,
619,"This issue is currently reported for unhandled exceptions, but it is theoretically possible any time the programmer does not close the cursor at the proper time.",
628,"The product calls a function, procedure, or routine with arguments that are not correctly specified, leading to always-incorrect behavior and resultant weaknesses.",
628,"There are multiple ways in which this weakness can be introduced, including:",
628,This weakness can cause unintended behavior and can lead to additional weaknesses such as allowing an attacker to gain unintended access to system resources.,
638,"The software does not perform access checks on a resource every time the resource is accessed by an entity, which can create resultant weaknesses if that entity's rights or privileges change over time.",
638,"A user might retain access to a critical resource even after privileges have been revoked, possibly allowing access to privileged functionality or sensitive information, depending on the role of the resource.",
641,"The application constructs the name of a file or other resource using input from an upstream component, but it does not restrict or incorrectly restricts the resulting name.",
641,"This may produce resultant weaknesses. For instance, if the names of these resources contain scripting characters, it is possible that a script may get executed in the client's browser if the application ever displays the name of the resource on a dynamically generated web page. Alternately, if the resources are consumed by some application parser, a specially crafted name can exploit some vulnerability internal to the parser, potentially resulting in execution of arbitrary code on the server machine. The problems will vary based on the context of usage of such malformed resource names and whether vulnerabilities are present in or assumptions are made by the targeted technology that would make code execution possible.",
641,Execution of arbitrary code in the context of usage of the resources with dangerous names.,
641,Crash of the consumer code of these resources resulting in information leakage or denial of service.,
641,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,
643,"The software uses external input to dynamically construct an XPath expression used to retrieve data from an XML database, but it does not neutralize or incorrectly neutralizes that input. This allows an attacker to control the structure of the query.",
643,"The net effect is that the attacker will have control over the information selected from the XML database and may use that ability to control application flow, modify logic, retrieve unauthorized data, or bypass important checks (e.g. authentication).",
643,Controlling application flow (e.g. bypassing authentication).,
643,The attacker could read restricted XML content.,
643,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,
645,"The software contains an account lockout protection mechanism, but the mechanism is too restrictive and can be triggered too easily, which allows attackers to deny service to legitimate users by causing their accounts to be locked out.",
645,"Account lockout is a security feature often present in applications as a countermeasure to the brute force attack on the password based authentication mechanism of the system. After a certain number of failed login attempts, the users' account may be disabled for a certain period of time or until it is unlocked by an administrator. Other security events may also possibly trigger account lockout. However, an attacker may use this very security feature to deny service to legitimate system users. It is therefore important to ensure that the account lockout security mechanism is not overly restrictive.",
645,Users could be locked out of accounts.,
645,COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.,
646,"The software allows a file to be uploaded, but it relies on the file name or extension of the file to determine the appropriate behaviors. This could be used by attackers to cause the file to be misclassified and processed in a dangerous fashion.",
646,"An application might use the file name or extension of of a user-supplied file to determine the proper course of action, such as selecting the correct process to which control should be passed, deciding what data should be made available, or what resources should be allocated. If the attacker can cause the code to misclassify the supplied file, then the wrong action could occur. For example, an attacker could supply a file that ends in a "".php.gif"" extension that appears to be a GIF image, but would be processed as PHP code. In extreme cases, code execution is possible, but the attacker could also cause exhaustion of resources, denial of service, exposure of debug or system data (including application source code), or being bound to a particular server side process. This weakness may be due to a vulnerability in any of the technologies used by the web and application servers, due to misconfiguration, or resultant from another flaw in the application itself.",
646,An attacker may be able to read sensitive data.,
646,An attacker may be able to cause a denial of service.,
646,An attacker may be able to gain privileges.,
650,"The server contains a protection mechanism that assumes that any URI that is accessed using HTTP GET will not cause a state change to the associated resource. This might allow attackers to bypass intended access restrictions and conduct resource modification and deletion attacks, since some applications allow GET to modify state.",
650,"The HTTP GET method and some other methods are designed to retrieve resources and not to alter the state of the application or resources on the server side. Furthermore, the HTTP specification requires that GET requests (and other requests) should not have side effects. Believing that it will be enough to prevent unintended resource alterations, an application may disallow the HTTP requests to perform DELETE, PUT and POST operations on the resource representation. However, there is nothing in the HTTP protocol itself that actually prevents the HTTP GET method from performing more than just query of the data. Developers can easily code programs that accept a HTTP GET request that do in fact create, update or delete data on the server. For instance, it is a common practice with REST based Web Services to have HTTP GET requests modifying resources on the server side. However, whenever that happens, the access control needs to be properly enforced in the application. No assumptions should be made that only HTTP DELETE, PUT, POST, and other methods have the power to alter the representation of the resource being accessed in the request.",
650,An attacker could escalate privileges.,
650,An attacker could modify resources.,
650,An attacker could obtain sensitive information.,
651,The Web services architecture may require exposing a Web Service Definition Language (WSDL) file that contains information on the publicly accessible services and how callers of these services should interact with them (e.g. what parameters they expect and what types they return).,
651,An information exposure may occur if any of the following apply:,
651,The attacker may find sensitive information located in the WSDL file.,
652,"The software uses external input to dynamically construct an XQuery expression used to retrieve data from an XML database, but it does not neutralize or incorrectly neutralizes that input. This allows an attacker to control the structure of the query.",
652,"The net effect is that the attacker will have control over the information selected from the XML database and may use that ability to control application flow, modify logic, retrieve unauthorized data, or bypass important checks (e.g. authentication).",
652,An attacker might be able to read sensitive information from the XML database.,
652,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,
653,"The product does not sufficiently compartmentalize functionality or processes that require different privilege levels, rights, or permissions.",
653,"When a weakness occurs in functionality that is accessible by lower-privileged users, then without strong boundaries, an attack might extend the scope of the damage to higher-privileged users.",
653,The exploitation of a weakness in low-privileged areas of the software can be leveraged to reach higher-privileged areas without having to overcome any additional obstacles.,
653,COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.,
654,"A protection mechanism relies exclusively, or to a large extent, on the evaluation of a single condition or the integrity of a single object or entity in order to make a decision about granting access to restricted resources or functionality.",
654,"If the single factor is compromised (e.g. by theft or spoofing), then the integrity of the entire security mechanism can be violated with respect to the user that is identified by that factor.",
654,"It can become difficult or impossible for the product to be able to distinguish between legitimate activities by the entity who provided the factor, versus illegitimate activities by an attacker.",
655,"The software has a protection mechanism that is too difficult or inconvenient to use, encouraging non-malicious users to disable or bypass the mechanism, whether by accident or on purpose.",
655,"By bypassing the security mechanism, a user might leave the system in a less secure state than intended by the administrator, making it more susceptible to compromise.",
657,The product violates well-established principles for secure design.,
657,"This can introduce resultant weaknesses or make it easier for developers to introduce related weaknesses during implementation. Because code is centered around design, it can be resource-intensive to fix design problems.",
66,"The product does not handle or incorrectly handles a file name that identifies a ""virtual"" resource that is not directly specified within the directory that is associated with the file name, causing the product to perform file-based operations on a resource that is not a file.",
66,"Virtual file names are represented like normal file names, but they are effectively aliases for other resources that do not behave like normal files. Depending on their functionality, they could be alternate entities. They are not necessarily listed in directories.",
662,"The software utilizes multiple threads or processes to allow temporary access to a shared resource that can only be exclusive to one process at a time, but it does not properly synchronize these actions, which might cause simultaneous accesses of this resource by multiple threads or processes.",
663,The software calls a non-reentrant function in a concurrent context in which a competing code sequence (e.g. thread or signal handler) may have an opportunity to call the same function or otherwise influence its state.,
664,"The software does not maintain or incorrectly maintains control over a resource throughout its lifetime of creation, use, and release.",
664,"Resources often have explicit instructions on how to be created, used and destroyed. When software does not follow these instructions, it can lead to unexpected behaviors and potentially exploitable states.",
664,"Even without explicit instructions, various principles are expected to be adhered to, such as ""Do not use an object until after its creation is complete,"" or ""do not use an object after it has been slated for destruction.""",
666,"The software performs an operation on a resource at the wrong phase of the resource's lifecycle, which can lead to unexpected behaviors.",
666,"When a developer wants to initialize, use or release a resource, it is important to follow the specifications outlined for how to operate on that resource and to ensure that the resource is in the expected state. In this case, the software wants to perform a normally valid operation, initialization, use or release, on a resource when it is in the incorrect phase of its lifetime.",
670,"The code contains a control flow path that does not reflect the algorithm that the path is intended to implement, leading to incorrect behavior any time this path is navigated.",
670,"This weakness captures cases in which a particular code segment is always incorrect with respect to the algorithm that it is implementing. For example, if a C programmer intends to include multiple statements in a single block but does not include the enclosing braces (CWE-483), then the logic is always incorrect. This issue is in contrast to most weaknesses in which the code usually behaves correctly, except when it is externally manipulated in malicious ways.",
670,"This issue typically appears in rarely-tested code, since the ""always-incorrect"" nature will be detected as a bug during normal usage.",
671,The product uses security features in a way that prevents the product's administrator from tailoring security settings to reflect the environment in which the product is being used. This introduces resultant weaknesses or prevents it from operating at a level of security that is desired by the administrator.,
671,"If the product's administrator does not have the ability to manage security-related decisions at all times, then protecting the product from outside threats - including the product's developer - can become impossible. For example, a hard-coded account name and password cannot be changed by the administrator, thus exposing that product to attacks that the administrator can not prevent.",
671,OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.,
673,The product does not prevent the definition of control spheres from external actors.,
673,"Typically, a product defines its control sphere within the code itself, or through configuration by the product's administrator. In some cases, an external party can change the definition of the control sphere. This is typically a resultant weakness.",
673,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,
675,"The product performs the same operation on a resource two or more times, when the operation should only be applied once.",
680,"The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow.",
683,"The software calls a function, procedure, or routine, but the caller specifies the arguments in an incorrect order, leading to resultant weaknesses.",
683,"While this weakness might be caught by the compiler in some languages, it can occur more frequently in cases in which the called function accepts variable numbers or types of arguments, such as format strings in C. It also can occur in languages or environments that do not enforce strong typing.",
683,"This problem typically occurs when the programmer makes a typo, or copy and paste errors.",
684,"The code does not function according to its published specifications, potentially leading to incorrect usage.",
684,"When providing functionality to an external party, it is important that the software behaves in accordance with the details specified. When requirements of nuances are not documented, the functionality may produce unintended behaviors for the caller, possibly leading to an exploitable state.",
685,"The software calls a function, procedure, or routine, but the caller specifies too many arguments, or too few arguments, which may lead to undefined behavior and resultant weaknesses.",
685,"This problem typically occurs when the programmer makes a typo, or copy and paste errors.",
686,"The software calls a function, procedure, or routine, but the caller specifies an argument that is the wrong data type, which may lead to resultant weaknesses.",
686,"This weakness is most likely to occur in loosely typed languages, or in strongly typed languages in which the types of variable arguments cannot be enforced at compilation time, or where there is implicit casting.",
687,"The software calls a function, procedure, or routine, but the caller specifies an argument that contains the wrong value, which may lead to resultant weaknesses.",
688,"The software calls a function, procedure, or routine, but the caller specifies the wrong variable or reference as one of the arguments, which may lead to undefined behavior and resultant weaknesses.",
688,"This problem typically occurs when the programmer makes a typo, or copy and paste errors.",
691,"The code does not sufficiently manage its control flow during execution, creating conditions in which the control flow can be modified in unexpected ways.",
694,"The software uses multiple resources that can have the same identifier, in a context in which unique identifiers are required.",
694,"If the software assumes that each resource has a unique identifier, the software could operate on the wrong resource if attackers can cause multiple resources to be associated with the same identifier.",
694,"If unique identifiers are assumed when protecting sensitive resources, then duplicate identifiers might allow attackers to bypass the protection.",
695,The software uses low-level functionality that is explicitly prohibited by the framework or specification under which the software is supposed to operate.,
695,"The use of low-level functionality can violate the specification in unexpected ways that effectively disable built-in protection mechanisms, introduce exploitable inconsistencies, or otherwise expose the functionality to attack.",
697,"The software compares two entities in a security-relevant context, but the comparison is incorrect, which may lead to resultant weaknesses.",
697,This weakness class covers several possibilities:,
7,The default error page of a web application should not display sensitive information about the software system.,
7,"A Web application must define a default error page for 4xx errors (e.g. 404), 5xx (e.g. 500) errors and catch java.lang.Throwable exceptions to prevent attackers from mining information from the application container's built-in error response.",
7,"When an attacker explores a web site looking for vulnerabilities, the amount of information that the site provides is crucial to the eventual success or failure of any attempted attacks.",
7,"A stack trace might show the attacker a malformed SQL query string, the type of database being used, and the version of the application container. This information enables the attacker to target known vulnerabilities in these components.",
703,The software does not properly anticipate or handle exceptional conditions that rarely occur during normal operation of the software.,
703,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,
705,The software does not properly return control flow to the proper location after it has completed a task or detected an unusual condition.,
706,"The software uses a name or reference to access a resource, but the name/reference resolves to a resource that is outside of the intended control sphere.",
71,This entry has been deprecated as it represents a specific observed example of a UNIX Hard Link weakness type rather than its own individual weakness type. Please refer to CWE-62.,
710,"The software does not follow certain coding rules for development, which can lead to resultant weaknesses or increase the severity of the associated vulnerabilities.",
72,The software does not properly handle special paths that may identify the data or resource fork of a file on the HFS+ file system.,
72,"If the software chooses actions to take based on the file name, then if an attacker provides the data or resource fork, the software may take unexpected actions. Further, if the software intends to restrict access to a file, then an attacker might still be able to bypass intended access restrictions by requesting the data or resource fork for that file.",
733,"The developer builds a security-critical protection mechanism into the software, but the compiler optimizes the program such that the mechanism is removed or modified.",
75,The software does not adequately filter user-controlled input for special elements with control implications.,
75,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,
756,"The software does not return custom error pages to the user, possibly exposing sensitive information.",
756,"Attackers can leverage the additional information provided by a default error page to mount attacks targeted on the framework, database, or other resources used by the application.",
758,"The software uses an API function, data structure, or other entity in a way that relies on properties that are not always guaranteed to hold for that entity.",
758,"This can lead to resultant weaknesses when the required properties change, such as when the software is ported to a different platform or if an interaction error (CWE-435) occurs.",
76,"The software properly neutralizes certain special elements, but it improperly neutralizes equivalent special elements.",
76,"The software may have a fixed list of special characters it believes is complete. However, there may be alternate encodings, or representations that also have the same meaning. For example, the software may filter out a leading slash (/) to prevent absolute path names, but does not account for a tilde (~) followed by a user name, which on some *nix systems could be expanded to an absolute pathname. Alternately, the software might filter a dangerous ""-e"" command-line switch when calling an external program, but it might not account for ""--exec"" or other switches that have the same semantics.",
76,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,
761,"The application calls free() on a pointer to a memory resource that was allocated on the heap, but the pointer is not at the start of the buffer.",
761,"This can cause the application to crash, or in some cases, modify critical program variables or execute code.",
761,"This weakness often occurs when the memory is allocated explicitly on the heap with one of the malloc() family functions and free() is called, but pointer arithmetic has caused the pointer to be in the interior or end of the buffer.",
762,"The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource.",
762,"This weakness can be generally described as mismatching memory management routines, such as:",
762,"When the memory management functions are mismatched, the consequences may be as severe as code execution, memory corruption, or program crash. Consequences and ease of exploit will vary depending on the implementation of the routines and the object being managed.",
764,"The software locks a critical resource more times than intended, leading to an unexpected state in the system.",
764,"When software is operating in a concurrent environment and repeatedly locks a critical resource, the consequences will vary based on the type of lock, the lock's implementation, and the resource being protected. In some situations such as with semaphores, the resources are pooled and extra locking calls will reduce the size of the total available pool, possibly leading to degraded performance or a denial of service. If this can be triggered by an attacker, it will be similar to an unrestricted lock (CWE-412). In the context of a binary lock, it is likely that any duplicate locking attempts will never succeed since the lock is already held and progress may not be possible.",
765,"The software unlocks a critical resource more times than intended, leading to an unexpected state in the system.",
765,"When software is operating in a concurrent environment and repeatedly unlocks a critical resource, the consequences will vary based on the type of lock, the lock's implementation, and the resource being protected. In some situations such as with semaphores, the resources are pooled and extra calls to unlock will increase the count for the number of available resources, likely resulting in a crash or unpredictable behavior when the system nears capacity.",
766,"The software declares a critical variable, field, or member to be public when intended security policy requires it to be private.",
766,Making a critical variable public allows anyone with access to the object in which the variable is contained to alter or read the value.,
767,The software defines a public method that reads or modifies a private variable.,
767,"If an attacker modifies the variable to contain unexpected values, this could violate assumptions from other parts of the code. Additionally, if an attacker can read the private variable, it may expose sensitive information or make it easier to launch further attacks.",
768,"The software contains a conditional statement with multiple logical expressions in which one of the non-leading expressions may produce side effects. This may lead to an unexpected state in the program after the execution of the conditional, because short-circuiting logic may prevent the side effects from occurring.",
768,"Usage of short circuit evaluation, though well-defined in the C standard, may alter control flow in a way that introduces logic errors that are difficult to detect, possibly causing errors later during the software's execution. If an attacker can discover such an inconsistency, it may be exploitable to gain arbitrary control over a system.",
768,"If the first condition of an ""or"" statement is assumed to be true under normal circumstances, or if the first condition of an ""and"" statement is assumed to be false, then any subsequent conditional may contain its own logic errors that are not detected during code review or testing.",
768,"Finally, the usage of short circuit evaluation may decrease the maintainability of the code.",
768,"Widely varied consequences are possible if an attacker is aware of an unexpected state in the software after a conditional. It may lead to information exposure, a system crash, or even complete attacker control of the system.",
769,This entry has been deprecated because it was a duplicate of CWE-774. All content has been transferred to CWE-774.,
771,"The software does not properly maintain a reference to a resource that has been allocated, which prevents the resource from being reclaimed.",
771,"This does not necessarily apply in languages or frameworks that automatically perform garbage collection, since the removal of all references may act as a signal that the resource is ready to be reclaimed.",
771,An attacker that can influence the allocation of resources that are not properly maintained could deplete the available resource pool and prevent all other processes from accessing the same type of resource.,
773,"The software does not properly maintain references to a file descriptor or handle, which prevents that file descriptor/handle from being reclaimed.",
773,"This can cause the software to consume all available file descriptors or handles, which can prevent other processes from performing critical file processing operations.",
773,An attacker that can influence the allocation of resources that are not properly maintained could deplete the available resource pool and prevent all other processes from accessing the same type of resource.,
774,"The software allocates file descriptors or handles on behalf of an actor without imposing any restrictions on how many descriptors can be allocated, in violation of the intended security policy for that actor.",
774,"This can cause the software to consume all available file descriptors or handles, which can prevent other processes from performing critical file processing operations.",
774,"When allocating resources without limits, an attacker could prevent all other processes from accessing the same type of resource.",
777,"The software uses a regular expression to perform neutralization, but the regular expression is not anchored and may allow malicious or malformed data to slip through.",
777,"When performing tasks such as whitelist validation, data is examined and possibly modified to ensure that it is well-formed and adheres to a list of safe values. If the regular expression is not anchored, malicious or malformed data may be included before or after any string matching the regular expression. The type of malicious data that is allowed will depend on the context of the application and which anchors are omitted from the regular expression.",
777,"Regular expressions are typically used to match a pattern of text. Anchors are used in regular expressions to specify where the pattern should match: at the beginning, the end, or both (the whole input).",
777,"An unanchored regular expression in the context of a whitelist will possibly result in a protection mechanism failure, allowing malicious or malformed data to enter trusted regions of the program. The specific consequences will depend on what functionality the whitelist was protecting.",
780,"The software uses the RSA algorithm but does not incorporate Optimal Asymmetric Encryption Padding (OAEP), which might weaken the encryption.",
780,Padding schemes are often used with cryptographic algorithms to make the plaintext less predictable and complicate attack efforts. The OAEP scheme is often used with RSA to nullify the impact of predictable common text.,
780,"Without OAEP in RSA encryption, it will take less work for an attacker to decrypt the data or to infer patterns from the ciphertext.",
780,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,
785,"The software invokes a function for normalizing paths or file names, but it provides an output buffer that is smaller than the maximum possible size, such as PATH_MAX.",
785,"Passing an inadequately-sized output buffer to a path manipulation function can result in a buffer overflow. Such functions include realpath(), readlink(), PathAppend(), and others.",
785,"Windows provides a large number of utility functions that manipulate buffers containing filenames. In most cases, the result is returned in a buffer that is passed in as input. (Usually the filename is modified in place.) Most functions require the buffer to be at least MAX_PATH bytes in length, but you should check the documentation for each function individually. If the buffer is not large enough to store the result of the manipulation, a buffer overflow can occur.",
790,"The software receives data from an upstream component, but does not filter or incorrectly filters special elements before sending it to a downstream component.",
790,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,
791,"The software receives data from an upstream component, but does not completely filter special elements before sending it to a downstream component.",
791,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,
792,"The software receives data from an upstream component, but does not completely filter one or more instances of special elements before sending it to a downstream component.",
792,Incomplete filtering of this nature involves either:,
792,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,
793,"The software receives data from an upstream component, but only filters a single instance of a special element before sending it to a downstream component.",
793,"Incomplete filtering of this nature may be location-dependent, as in only the first or last element is filtered.",
793,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,
794,"The software receives data from an upstream component, but does not filter all instances of a special element before sending it to a downstream component.",
794,Incomplete filtering of this nature may be applied to:,
794,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,
795,"The software receives data from an upstream component, but only accounts for special elements at a specified location, thereby missing remaining special elements that may exist before sending it to a downstream component.",
795,A filter might only account for instances of special elements when they occur:,
795,"This may leave special elements in the data that did not match the filter position, but still may be dangerous.",
795,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,
796,"The software receives data from an upstream component, but only accounts for special elements positioned relative to a marker (e.g. ""at the beginning/end of a string; the second argument""), thereby missing remaining special elements that may exist before sending it to a downstream component.",
796,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,
797,"The software receives data from an upstream component, but only accounts for special elements at an absolute position (e.g. ""byte number 10""), thereby missing remaining special elements that may exist before sending it to a downstream component.",
797,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,
799,"The software does not properly limit the number or frequency of interactions that it has with an actor, such as the number of incoming requests.",
799,"This can allow the actor to perform actions more frequently than expected. The actor could be a human or an automated process such as a virus or bot. This could be used to cause a denial of service, compromise program logic (such as limiting humans to a single vote), or other consequences. For example, an authentication routine might not limit the number of times an attacker can guess a password. Or, a web site might conduct a poll but only expect humans to vote a maximum of once a day.",
8,"When an application exposes a remote interface for an entity bean, it might also expose methods that get or set the bean's data. These methods could be leveraged to read sensitive information, or to change data in ways that violate the application's expectations, potentially leading to other vulnerabilities.",
804,"The software uses a CAPTCHA challenge, but the challenge can be guessed or automatically recognized by a non-human actor.",
804,"An automated attacker could bypass the intended protection of the CAPTCHA challenge and perform actions at a higher frequency than humanly possible, such as launching spam attacks.",
804,There can be several different causes of a guessable CAPTCHA:,
804,"When authorization, authentication, or another protection mechanism relies on CAPTCHA entities to ensure that only human actors can access certain functionality, then an automated attacker such as a bot may access the restricted functionality by guessing the CAPTCHA.",
806,"The software uses the size of a source buffer when reading from or writing to a destination buffer, which may cause it to access memory that is outside of the bounds of the buffer.",
806,"When the size of the destination is smaller than the size of the source, a buffer overflow could occur.",
806,"Buffer overflows generally lead to crashes. Other attacks leading to lack of availability are possible, including putting the program into an infinite loop.",
806,"Buffer overflows often can be used to execute arbitrary code, which is usually outside the scope of a program's implicit security policy.",
806,"When the consequence is arbitrary code execution, this can often be used to subvert any other security service.",
820,The software utilizes a shared resource in a concurrent manner but does not attempt to synchronize access to the resource.,
820,"If access to a shared resource is not synchronized, then the resource may not be in a state that is expected by the software. This might lead to unexpected or insecure behaviors, especially if an attacker can influence the shared resource.",
821,"The software utilizes a shared resource in a concurrent manner, but it does not correctly synchronize access to the resource.",
821,"If access to a shared resource is not correctly synchronized, then the resource may not be in a state that is expected by the software. This might lead to unexpected or insecure behaviors, especially if an attacker can influence the shared resource.",
831,The software defines a function that is used as a handler for more than one signal.,
831,"While sometimes intentional and safe, when the same function is used to handle multiple signals, a race condition could occur if the function uses any state outside of its local declaration, such as global variables or non-reentrant functions, or has any side effects.",
831,"An attacker could send one signal that invokes the handler function; in many OSes, this will typically prevent the same signal from invoking the handler again, at least until the handler function has completed execution. However, the attacker could then send a different signal that is associated with the same handler function. This could interrupt the original handler function while it is still executing. If there is shared state, then the state could be corrupted. This can lead to a variety of potential consequences depending on context, including denial of service and code execution.",
831,"Another rarely-explored possibility arises when the signal handler is only designed to be executed once (if at all). By sending multiple signals, an attacker could invoke the function more than once. This may generate extra, unintended side effects. A race condition might not even be necessary; the attacker could send one signal, wait until it is handled, then send the other signal.",
831,"The most common consequence will be a corruption of the state of the software, possibly leading to a crash or exit. However, if the signal handler is operating on state variables for security relevant libraries or protection mechanisms, the consequences can be far more severe, including protection mechanism bypass, privilege escalation, or information exposure.",
86,"The software does not neutralize or incorrectly neutralizes invalid characters or byte sequences in the middle of tag names, URI schemes, and other identifiers.",
86,"Some web browsers may remove these sequences, resulting in output that may have unintended control implications. For example, the software may attempt to remove a ""javascript:"" URI scheme, but a ""java%00script:"" URI may bypass this check and still be rendered as active javascript by some browsers, allowing XSS or other attacks.",
87,The software does not neutralize or incorrectly neutralizes user-controlled input for alternate script syntax.,
9,"If elevated access rights are assigned to EJB methods, then an attacker can take advantage of the permissions to exploit the software system.",
9,"If the EJB deployment descriptor contains one or more method permissions that grant access to the special ANYONE role, it indicates that access control for the application has not been fully thought through or that the application is structured in such a way that reasonable access control restrictions are impossible.",
910,The software uses or accesses a file descriptor after it has been closed.,
910,"After a file descriptor for a particular file or device has been released, it can be reused. The code might not write to the original file, since the reused file descriptor might reference a different file or device.",
910,The program could read data from the wrong file.,
910,Accessing a file descriptor that has been closed can cause a crash.,
912,"The software contains functionality that is not documented, not part of the specification, and not accessible through an interface or command sequence that is obvious to the software's users or administrators.",
912,"Hidden functionality can take many forms, such as intentionally malicious code, ""Easter Eggs"" that contain extraneous functionality such as games, developer-friendly shortcuts that reduce maintenance or support costs such as hard-coded accounts, etc. From a security perspective, even when the functionality is not intentionally malicious or damaging, it can increase the software's attack surface and expose additional weaknesses beyond what is already exposed by the intended functionality. Even if it is not easily accessible, the hidden functionality could be useful for attacks that modify the control flow of the application.",
917,"The software constructs all or part of an expression language (EL) statement in a Java Server Page (JSP) using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended EL statement before it is executed.",
92,"This entry has been deprecated. It originally came from PLOVER, which sometimes defined ""other"" and ""miscellaneous"" categories in order to satisfy exhaustiveness requirements for taxonomies. Within the context of CWE, the use of a more abstract entry is preferred in mapping situations. CWE-75 is a more appropriate mapping.",
923,"The software establishes a communication channel to (or from) an endpoint for privileged or protected operations, but it does not properly ensure that it is communicating with the correct endpoint.",
923,"Attackers might be able to spoof the intended endpoint from a different system or process, thus gaining the same level of access as the intended endpoint.",
923,"While this issue frequently involves authentication between network-based clients and servers, other types of communication channels and endpoints can have this weakness.",
923,"If an attacker can spoof the endpoint, the attacker gains all the privileges that were intended for the original endpoint.",
923,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,
925,The Android application uses a Broadcast Receiver that receives an Intent but does not properly verify that the Intent came from an authorized source.,
925,"Certain types of Intents, identified by action string, can only be broadcast by the operating system itself, not by third-party applications. However, when an application registers to receive these implicit system intents, it is also registered to receive any explicit intents. While a malicious application cannot send an implicit system intent, it can send an explicit intent to the target application, which may assume that any received intent is a valid implicit system intent and not an explicit intent from another application. This may lead to unintended behavior.",
925,Another application can impersonate the operating system and cause the software to perform an unintended action.,
926,"The Android application exports a component for use by other applications, but does not properly restrict which applications can launch the component or access the data it contains.",
926,The attacks and consequences of improperly exporting a component may depend on the exported component:,
926,"Other applications, possibly untrusted, can launch the Activity.",
926,"Other applications, possibly untrusted, can bind to the Service.",
926,"Other applications, possibly untrusted, can read or modify the data that is offered by the Content Provider.",
939,"The software uses a handler for a custom URL scheme, but it does not properly restrict which actors can invoke the handler using the scheme.",
939,"Mobile platforms and other architectures allow the use of custom URL schemes to facilitate communication between applications. In the case of iOS, this is the only method to do inter-application communication. The implementation is at the developer's discretion which may open security flaws in the application. An example could be potentially dangerous functionality such as modifying files through a custom URL scheme.",
939,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,
97,"The software generates a web page, but does not neutralize or incorrectly neutralizes user-controllable input that could be interpreted as a server-side include (SSI) directive.",
97,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,
