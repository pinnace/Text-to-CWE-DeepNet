CWE-ID,Description,CVE
1004,"The software uses a cookie to store sensitive information, but the cookie is not marked with the HttpOnly flag.",NA
1004,"The HttpOnly flag directs compatible browsers to prevent client-side script from accessing cookies. Including the HttpOnly flag in the Set-Cookie HTTP response header helps mitigate the risk associated with Cross-Site Scripting (XSS) where an attacker's script code might attempt to read the contents of a cookie and exfiltrate information obtained. When set, browsers that support the flag will not reveal the contents of the cookie to a third party via client-side script executed via XSS.",NA
1004,"An HTTP cookie is a small piece of data attributed to a specific website and stored on the user's computer by the user's web browser. This data can be leveraged for a variety of purposes including saving information entered into form fields, recording user activity, and for authentication purposes. Cookies used to save or record information generated by the user are accessed and modified by script code embedded in a web page. While cookies used for authentication are created by the website's server and sent to the user to be attached to future requests. These authentication cookies are often not meant to be accessed by the web page sent to the user, and are instead just supposed to be attached to future requests to verify authentication details.",NA
1004,"If the HttpOnly flag is not set, then sensitive information stored in the cookie may be exposed to unintended parties.",NA
1004,"If the cookie in question is an authentication cookie, then not setting the HttpOnly flag may allow an adversary to steal authentication data (e.g., a session ID) and assume the identity of the user.",NA
1007,"The software displays information or identifiers to a user, but the display mechanism does not make it easy for the user to distinguish between visually similar or identical glyphs (homoglyphs), which may cause the user to misinterpret a glyph and perform an unintended, insecure action.",NA
1007,"Some glyphs, pictures, or icons can be semantically distinct to a program, while appearing very similar or identical to a human user. These are referred to as homoglyphs. For example, the lowercase ""l"" (ell) and uppercase ""I"" (eye) have different character codes, but these characters can be displayed in exactly the same way to a user, depending on the font. This can also occur between different character sets. For example, the Latin capital letter ""A"" and the Greek capital letter ""Α"" (Alpha) are treated as distinct by programs, but may be displayed in exactly the same way to a user. Accent marks may also cause letters to appear very similar, such as the Latin capital letter grave mark ""À"" and its equivalent ""À"" with the acute accent.",NA
1007,"Adversaries can exploit this visual similarity for attacks such as phishing, e.g. by providing a link to an attacker-controlled hostname that looks like a hostname that the victim trusts. In a different use of homoglyphs, an adversary may create a back door username that is visually similar to the username of a regular user, which then makes it more difficult for a system administrator to detect the malicious username while reviewing logs.",NA
1007,"An attacker may ultimately redirect a user to a malicious website, by deceiving the user into believing the URL they are accessing is a trusted domain. However, the attack can also be used to forge log entries by using homoglyphs in usernames. Homoglyph manipulations are often the first step towards executing advanced attacks such as stealing a user's credentials, Cross-Site Scripting (XSS), or log forgery. If an attacker redirects a user to a malicious site, the attacker can mimic a trusted domain to steal account credentials and perform actions on behalf of the user, without the user's knowledge. Similarly, an attacker could create a username for a website that contains homoglyph characters, making it difficult for an admin to review logs and determine which users performed which actions.",NA
1007,"This weakness may occur when characters from various character sets are allowed to be interchanged within a URL, username, email address, etc. without any notification to the user or underlying system being used.",NA
102,"The application uses multiple validation forms with the same name, which might cause the Struts Validator to validate a form that the programmer does not expect.",NA
102,"If two validation forms have the same name, the Struts Validator arbitrarily chooses one of the forms to use for input validation and discards the other. This decision might not correspond to the programmer's expectations, possibly leading to resultant weaknesses. Moreover, it indicates that the validation logic is not up-to-date, and can indicate that other, more subtle validation errors are present.",NA
1021,"The web application does not restrict or incorrectly restricts frame objects or UI layers that belong to another application or domain, which can lead to user confusion about which interface the user is interacting with.",NA
1021,"A web application is expected to place restrictions on whether it is allowed to be rendered within frames, iframes, objects, embed or applet elements. Without the restrictions, users can be tricked into interacting with the application when they were not intending to.",NA
1021,"An attacker can trick a user into performing actions that are masked and hidden from the user's view. The impact varies widely, depending on the functionality of the underlying application. For example, in a social media application, clickjacking could be used to trik the user into changing privacy settings.",NA
1022,"The web application produces links to untrusted external sites outside of its sphere of control, but it does not properly prevent the external site from modifying  security-critical properties of the window.opener object, such as the location property.",NA
1022,"When a user clicks a link to an external site (""target""), the target=""_blank"" attribute causes the target site's contents to be opened in a new window or tab, which runs in the same process as the original page. The window.opener object records information about the original page that offered the link.  If an attacker can run script on the target page, then they could read or modify certain properties of the window.opener object, including the location property - even if the original and target site are not the same origin.  An attacker can modify the location property to automatically redirect the user to a malicious site, e.g. as part of a phishing attack. Since this redirect happens in the original window/tab - which is not necessarily visible, since the browser is focusing the display on the new target page - the user might not notice any suspicious redirection.",NA
1022,The user may be redirected to an untrusted page that contains undesired content or malicious script code.,NA
1022,This weakness is introduced during the design of an application when the architect does not specify that a linked external document should not be able to alter the location of the calling page.,NA
1022,This weakness is introduced during the coding of an application when the developer does not include the noopener and/or noreferrer value for the rel attribute.,NA
1023,"The software performs a comparison between entities that must consider multiple factors or characteristics of each entity, but the comparison does not include one or more of these factors.",NA
1023,"  An incomplete comparison can lead to resultant weaknesses, e.g., by operating on the wrong object or making a security decision without considering a required factor.   ",NA
1024,"The software performs a comparison between two entities, but the entities are of different, incompatible types that cannot be guaranteed to provide correct results when they are directly compared.",NA
1024,"In languages that are strictly typed but support casting/conversion, such as C or C++, the programmer might assume that casting one entity to the same type as another entity will ensure that the comparison will be performed correctly, but this cannot be guaranteed.  In languages that are not strictly typed, such as PHP or JavaScript, there may be implicit casting/conversion to a type that the programmer is unaware of, causing unexpected results; for example, the string ""123"" might be converted to a number type.  See examples.",NA
1025,"The code performs a comparison between two entities, but the comparison examines the wrong factors or characteristics of the entities, which can lead to incorrect results and resultant weaknesses.",NA
1025,"This can lead to incorrect results and resultant weaknesses.  For example, the code might inadvertently compare references to objects, instead of the relevant contents of those objects, causing two ""equal"" objects to be considered unequal.",NA
103,"The application has a validator form that either does not define a validate() method, or defines a validate() method but does not call super.validate().",NA
103,"If you do not call super.validate(), the Validation Framework cannot check the contents of the form against a validation form. In other words, the validation framework will be disabled for the given form.",NA
103,"The Struts Validator uses a form's validate() method to check the contents of the form properties against the constraints specified in the associated validation form. That means the following classes have a validate() method that is part of the validation framework: ValidatorForm, ValidatorActionForm, DynaValidatorForm, and DynaValidatorActionForm. If you create a class that extends one of these classes, and if your class implements custom validation logic by overriding the validate() method, you must call super.validate() in your validate() implementation.",NA
103,"Disabling the validation framework for a form exposes the application to numerous types of attacks. Unchecked input is the root cause of vulnerabilities like cross-site scripting, process control, and SQL injection.",NA
103,"Although J2EE applications are not generally susceptible to memory corruption attacks, if a J2EE application interfaces with native code that does not perform array bounds checking, an attacker may be able to use an input validation mistake in the J2EE application to launch a buffer overflow attack.",NA
1037,"The developer builds a security-critical protection mechanism into the software, but the processor optimizes the execution of the program such that the mechanism is removed or modified.",NA
1037,A successful exploitation of this weakness will change the order of an application's execution and will likely be used to bypass specific protection mechanisms. This bypass can be exploited further to potentially read data that should otherwise be unaccessible.,NA
1037,Optimizations built into the design of the processor can have unintended consequences during the execution of an application.,NA
1038,"The product uses a mechanism that automatically optimizes code, e.g. to improve a characteristic such as performance, but the optimizations can have an unintended side effect that might violate an intended security assumption.",NA
1038,The optimizations alter the order of execution resulting in side effects that were not intended by the original developer.,NA
1038,Optimizations built into the design of a product can have unintended consequences during execution.,NA
1039,"The product uses an automated mechanism such as machine learning to recognize complex data inputs (e.g. image or audio) as a particular concept or category, but it does not properly detect or handle inputs that have been modified or constructed in a way that causes the mechanism to detect a different, incorrect concept.",NA
1039,"When techniques such as machine learning are used to automatically classify input streams, and those classifications are used for security-critical decisions, then any mistake in classification can introduce a vulnerability that allows attackers to cause the product to make the wrong security decision.  If the automated mechanism is not developed or ""trained"" with enough input data, then attackers may be able to craft malicious input that intentionally triggers the incorrect classification.",NA
1039,"Targeted technologies include, but are not necessarily limited to:",NA
1039,"For example, an attacker might modify road signs or road surface markings to trick autonomous vehicles into misreading the sign/marking and performing a dangerous action.",NA
1039,"When the automated recognition is used in a protection mechanism, an attacker may be able to craft inputs that are misinterpreted in a way that grants excess privileges.",NA
1039,This issue can be introduced into the automated algorithm itself.,NA
104,"If a form bean does not extend an ActionForm subclass of the Validator framework, it can expose the application to other weaknesses related to insufficient input validation.",NA
104,"In order to use the Struts Validator, a form must extend one of the following: ValidatorForm, ValidatorActionForm, DynaValidatorActionForm, and DynaValidatorForm. You must extend one of these classes because the Struts Validator ties in to your application by implementing the validate() method in these classes. Forms derived from the ActionForm and DynaActionForm classes cannot use the Struts Validator.",NA
104,"Bypassing the validation framework for a form exposes the application to numerous types of attacks. Unchecked input is an important component of vulnerabilities like cross-site scripting, process control, and SQL injection.",NA
104,"Although J2EE applications are not generally susceptible to memory corruption attacks, if a J2EE application interfaces with native code that does not perform array bounds checking, an attacker may be able to use an input validation mistake in the J2EE application to launch a buffer overflow attack.",NA
1041,"The software has multiple functions, methods, procedures, macros, etc. that  contain the same code.",NA
1042,"The code contains a member element that is declared as static (but not final), in which  its parent class element   is not a singleton class - that is, a class element that can be used only once in  the 'to' association of a Create action.",NA
1043,The software uses a data element that has an excessively large  number of sub-elements with non-primitive data types such as structures or aggregated objects.,NA
1043,"This issue can make the software perform more slowly.  If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.",NA
1043,"While the interpretation of ""excessively large"" may vary for each product or developer, CISQ recommends a default of 5 sub-elements.",NA
1044,The software's architecture contains too many - or too few -  horizontal layers.,NA
1044,"This issue makes it more difficult to maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.",NA
1044,"While the interpretation of ""expected range"" may vary for each product or developer, CISQ recommends a default minimum of 4 layers and maximum of 8 layers.",NA
1045,"A parent class has a virtual destructor method, but the parent has a child class that does not have a virtual destructor.",NA
1046,The software creates an immutable text string using string concatenation operations.,NA
1047,"The software contains modules in which one module has references that cycle back to itself, i.e., there are circular dependencies.",NA
1047,"As an example, with Java, this weakness might indicate cycles between packages.",NA
1047,"This issue makes it more difficult to maintain the software due to insufficient modularity, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.",NA
1047,"This issue can prevent the software from running reliably.  If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.",NA
1048,"The code contains callable control elements that    contain an excessively large number of references to other    application objects external to the context of the callable,    i.e. a Fan-Out value that is excessively large.",NA
1048,"While the interpretation of ""excessively large Fan-Out value"" may vary for each product or developer, CISQ recommends a default of 5 referenced objects.",NA
1048,"This issue makes it more difficult to maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.",NA
1049,The software performs a data query with a large number of joins  and sub-queries on a large data table.,NA
1049,"This issue can make the software perform more slowly.  If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.",NA
1049,"While the interpretation of ""large data table"" and ""large number of joins or sub-queries"" may vary for each product or developer, CISQ recommends a default of 1 million rows for a ""large"" data table, a default minimum of 5 joins, and a default minimum of 3 sub-queries.",NA
105,"The application has a form field that is not validated by a corresponding validation form, which can introduce other weaknesses related to insufficient input validation.",NA
105,"Omitting validation for even a single input field may give attackers the leeway they need to compromise the application. Although J2EE applications are not generally susceptible to memory corruption attacks, if a J2EE application interfaces with native code that does not perform array bounds checking, an attacker may be able to use an input validation mistake in the J2EE application to launch a buffer overflow attack.",NA
105,"If unused fields are not validated, shared business logic in an action may allow attackers to bypass the validation checks that are performed for other uses of the form.",NA
105,"Some applications use the same ActionForm for more than one purpose. In situations like this, some fields may go unused under some action mappings.",NA
1050,"The software has a loop body or loop condition that contains a control element that directly or  indirectly consumes platform resources, e.g. messaging, sessions, locks, or file  descriptors.",NA
1051,The software initializes data using hard-coded values that act as network resource identifiers.,NA
1052,The software initializes a data element using a hard-coded  literal that is not a simple integer or static constant element.,NA
1053,The product does not have documentation that represents how it is designed.,NA
1054,"The code at one architectural layer invokes code that resides  at a deeper layer than the adjacent layer, i.e., the invocation skips at least one  layer, and the invoked code is not part of a vertical utility layer that can be referenced from any horizontal layer.",NA
1055,The software contains a class with inheritance from more than  one concrete class.,NA
1056,A named-callable or method control element has a signature that  supports a variable (variadic) number of parameters or arguments.,NA
1056,"This issue can prevent the software from running reliably.  If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.",NA
1056,"With variadic arguments, it can be difficult or inefficient for manual analysis to be certain of which function/method is being invoked.",NA
1057,"The software uses a dedicated, central data manager component as required by design, but it contains code that performs data-access operations that do not use this data manager.",NA
1058,The code contains a function or method that  operates in a multi-threaded environment but owns an unsafe non-final        static storable or member data element.,NA
1059,"The documentation, whether on paper or in electronic form, does  not contain descriptions of all the relevant elements of the product, such as  its usage, structure, interfaces, design, implementation, configuration,  operation, etc.",NA
106,"When an application does not use an input validation framework such as the Struts Validator, there is a greater risk of introducing weaknesses related to insufficient input validation.",NA
106,"Unchecked input is the leading cause of vulnerabilities in J2EE applications. Unchecked input leads to cross-site scripting, process control, and SQL injection vulnerabilities, among others.",NA
106,"Although J2EE applications are not generally susceptible to memory corruption attacks, if a J2EE application interfaces with native code that does not perform array bounds checking, an attacker may be able to use an input validation mistake in the J2EE application to launch a buffer overflow attack.",NA
1060,The software performs too many data queries without using efficient data processing functionality such as stored procedures.,NA
1060,"This issue can make the software perform more slowly due to computational expense.  If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.",NA
1060,"While the interpretation of ""too many data queries"" may vary for each product or developer, CISQ recommends a default maximum of 5 data queries for an inefficient function/procedure.",NA
1061,"The software does not sufficiently hide the internal representation and implementation details of data or methods, which might allow external components or modules to modify data unexpectedly, invoke unexpected functionality, or introduce dependencies that the programmer did not intend.",NA
1062,"The code has a parent class that contains references to a child class, its methods, or its members.",NA
1063,A static code block creates an instance of a class.,NA
1063,This pattern identifies situations where a storable data element or member data element is initialized with a value in a block of code which is declared as static.,NA
1063,"This issue can make the software perform more slowly by performing initialization before it is needed.  If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.",NA
1064,"The software contains a function, subroutine, or method whose signature has an unnecessarily large number of  parameters/arguments.",NA
1064,"This issue makes it more difficult to understand and/or maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.",NA
1064,"While the interpretation of ""large number of parameters."" may vary for each product or developer, CISQ recommends a default maximum of 7 parameters/arguments.",NA
1065,"The application uses deployed components from application servers, but it also uses low-level functions/methods for management of resources, instead of the API provided by the application server.",NA
1066,The software contains a serializable data element that does not  have an associated serialization method.,NA
1066,"This issue can prevent the software from running reliably, e.g. by triggering an exception.  If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.",NA
1066,"As examples, the serializable nature of a data element comes from a serializable SerializableAttribute attribute in .NET and the inheritance from the java.io.Serializable interface in Java.",NA
1067,The software contains a data query against an SQL table or view  that is configured in a way that does not utilize an index and may cause  sequential searches to be performed.,NA
1068,The implementation of the product is not consistent with the  design as described within the relevant documentation.,NA
1069,"An invokable code block contains an exception handling block that does not contain any code, i.e. is empty.",NA
107,An unused validation form indicates that validation logic is not up-to-date.,NA
107,It is easy for developers to forget to update validation logic when they remove or rename action form mappings. One indication that validation logic is not being properly maintained is the presence of an unused validation form.,NA
1070,"The software contains a serializable, storable data element such as a field or member,  but the data element contains member elements that are not  serializable.",NA
1070,"This issue can prevent the software from running reliably.  If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.",NA
1070,"As examples, the serializable nature of a data element comes from a serializable SerializableAttribute attribute in .NET and the inheritance from the java.io.Serializable interface in Java.",NA
1071,"The source code contains a block that does not contain any code, i.e., the block is empty.",NA
1072,The software accesses a data resource through a database without using a  connection pooling capability.,NA
1073,"The software contains a client with a function or method that contains a large number of data accesses/queries that are sent through a data manager, i.e., does not use efficient database capabilities.",NA
1073,"This issue can make the software perform more slowly.  If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.",NA
1073,"While the interpretation of ""large number of data accesses/queries"" may vary for each product or developer, CISQ recommends a default maximum of 2 data accesses per function/method.",NA
1074,"A class has an inheritance level that is too high, i.e., it  has a large number of parent classes.",NA
1074,"This issue makes it more difficult to understand and maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.",NA
1074,"While the interpretation of ""large number of parent classes"" may vary for each product or developer, CISQ recommends a default maximum of 7 parent classes.",NA
1075,"The software performs unconditional control transfer (such as a  ""goto"") in code outside of a branching structure such as a switch  block.",NA
1076,"The product's architecture, source code, design, documentation,  or other artifact does not follow required conventions.",NA
1077,"The code performs a comparison such as an   equality test between two float (floating point) values, but   it uses comparison operators that do not account for the   possibility of loss of precision.",NA
1077,"Numeric calculation using floating point values   can generate imprecise results because of rounding errors.   As a result, two different calculations might generate   numbers that are mathematically equal, but have slightly   different bit representations that do not translate to the   same mathematically-equal values.  As a result, an equality   test or other comparison might produce unexpected   results.",NA
1077,"This issue can prevent the software from running reliably.  If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.",NA
1078,"The source code does not follow   desired style or formatting for indentation, white   space, comments, etc.",NA
1079,"A parent class contains one or more child classes, but the parent class does not have a virtual destructor method.",NA
108,Every Action Form must have a corresponding validation form.,NA
108,"If a Struts Action Form Mapping specifies a form, it must have a validation form defined under the Struts Validator.",NA
108,"If an action form mapping does not have a validation form defined, it may be vulnerable to a number of attacks that rely on unchecked input. Unchecked input is the root cause of some of today's worst and most common software security problems. Cross-site scripting, SQL injection, and process control vulnerabilities all stem from incomplete or absent input validation.",NA
108,"Although J2EE applications are not generally susceptible to memory corruption attacks, if a J2EE application interfaces with native code that does not perform array bounds checking, an attacker may be able to use an input validation mistake in the J2EE application to launch a buffer overflow attack.",NA
1080,A source code file has too many lines of  code.,NA
1080,"This issue makes it more difficult to understand and/or maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.",NA
1080,"While the interpretation of ""too many lines of code"" may vary for each product or developer, CISQ recommends a default threshold value of 1000.",NA
1082,The code contains a class instance that calls the method or function to delete or destroy itself.,NA
1082,"For example, in C++, ""delete this"" will cause the object to delete itself.",NA
1082,"This issue can prevent the software from running reliably.  If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.",NA
1083,"The software is intended to manage data access through a particular data manager component such as a relational or non-SQL database, but it contains code that performs data access operations without using that component.",NA
1083,"When the software has a data access component, the design may be intended to handle all data access operations through that component.  If a data access operation is performed outside of that component, then this may indicate a violation of the intended design.",NA
1083,"This issue can prevent the software from running reliably.  If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.",NA
1084,A function or method contains too many  operations that utilize a data manager or file resource.,NA
1084,"This issue makes it more difficult to maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.",NA
1084,"While the interpretation of ""too many operations"" may vary for each product or developer, CISQ recommends a default maximum of 7 operations for the same data manager or file.",NA
1085,"A function, method, procedure, etc. contains an excessive amount of code that has been  commented out within its body.",NA
1085,"This issue makes it more difficult to maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.",NA
1085,"While the interpretation of ""excessive volume"" may vary for each product or developer, CISQ recommends a default threshold of 2% of commented code.",NA
1086,A class contains an unnecessarily large number of  children.,NA
1086,"This issue makes it more difficult to understand and maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.",NA
1086,"While the interpretation of ""large number of children"" may vary for each product or developer, CISQ recommends a default maximum of 10 child classes.",NA
1087,"A class contains a virtual method, but the method does not have an associated virtual destructor.",NA
1088,"The code has a synchronous call to a remote resource, but there is no timeout for the call, or the timeout is set to infinite.",NA
1089,The software uses a large data table that contains an excessively large number of  indices.,NA
1089,"This issue can make the software perform more slowly.  If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.",NA
1089,"While the interpretation of ""large data table"" and ""excessively large number of indices"" may vary for each product or developer, CISQ recommends a default threshold of 1000000 rows for a ""large"" table and a default threshold of 3 indices.",NA
109,"Automatic filtering via a Struts bean has been turned off, which disables the Struts Validator and custom validation logic. This exposes the application to other weaknesses related to insufficient input validation.",NA
1090,A method for a class performs an operation that directly  accesses a member element from another class.,NA
1091,The software contains a method that accesses an object but does not later invoke  the element's associated finalize/destructor method.,NA
1092,The software uses the same control element across multiple  architectural layers.,NA
1093,The software uses an unnecessarily complex internal representation for its data structures or interrelationships between those structures.,NA
1094,"The software contains an index range scan for a large data table,  but the scan can cover a large number of rows.",NA
1094,"This issue can make the software perform more slowly.  If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.",NA
1094,"While the interpretation of ""large data table"" and ""excessive index range"" may vary for each product or developer, CISQ recommends a threshold of 1000000 table rows and a threshold of 10 for the index range.",NA
1095,The software uses a loop with a control flow condition based on  a value that is updated within the body of the loop.,NA
1096,The software implements a Singleton design pattern but does not use appropriate locking or other synchronization mechanism to ensure that the singleton class is only instantiated once.,NA
1097,The software uses a storable data element that does not have  all of the associated functions or methods that are necessary to support  comparison.,NA
1097,"For example, with Java, a class that is made persistent requires both hashCode() and equals() methods to be defined.",NA
1097,"This issue can prevent the software from running reliably, due to incorrect or unexpected comparison results.  If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.",NA
1098,The code contains a data element with a pointer that does not have an associated copy or constructor method.,NA
1099,"The product's code, documentation, or other artifacts do not  consistently use the same naming conventions for variables, callables, groups of  related callables, I/O capabilities, data types, file names, or similar types of  elements.",NA
11,Debugging messages help attackers learn about the system and plan a form of attack.,NA
11,ASP .NET applications can be configured to produce debug binaries. These binaries give detailed debugging messages and should not be used in production environments. Debug binaries are meant to be used in a development or testing environment and can pose a security risk if they are deployed to production.,NA
11,The debug attribute of the <compilation> tag defines whether compiled binaries should include debugging information. The use of debug binaries causes an application to provide as much information about itself as possible to the user.,NA
11,"Attackers can leverage the additional information they gain from debugging output to mount attacks targeted on the framework, database, or other resources used by the application.",NA
110,Validation fields that do not appear in forms they are associated with indicate that the validation logic is out of date.,NA
110,It is easy for developers to forget to update validation logic when they make changes to an ActionForm class. One indication that validation logic is not being properly maintained is inconsistencies between the action form and the validation form.,NA
110,"Although J2EE applications are not generally susceptible to memory corruption attacks, if a J2EE application interfaces with native code that does not perform array bounds checking, an attacker may be able to use an input validation mistake in the J2EE application to launch a buffer overflow attack.",NA
110,"It is critically important that validation logic be maintained and kept in sync with the rest of the application. Unchecked input is the root cause of some of today's worst and most common software security problems. Cross-site scripting, SQL injection, and process control vulnerabilities all stem from incomplete or absent input validation.",NA
1100,The product or code does not isolate system-dependent  functionality into separate standalone modules.,NA
1101,The product uses automatically-generated code that cannot be  executed without a specific runtime support component.,NA
1102,"The code uses a data representation that relies on low-level  data representation or constructs that may vary across different processors,  physical machines, OSes, or other physical components.",NA
1103,The product relies on third-party software components that do  not provide equivalent functionality across all desirable  platforms.,NA
1104,The product relies on third-party components that are not  actively supported or maintained by the original developer or a trusted proxy  for the original developer.,NA
1104,"Reliance on components that are no longer maintained can make it difficult or impossible to fix significant bugs, vulnerabilities, or quality issues. In effect, unmaintained code can become obsolete.",NA
1104,"This issue makes it more difficult to maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.",NA
1105,"The product or code uses machine-dependent functionality, but  it does not sufficiently encapsulate or isolate this functionality from  the rest of the code.",NA
1106,"The source code uses literal constants that may need to change  or evolve over time, instead of using symbolic constants.",NA
1107,"The source code uses symbolic constants, but it does not  sufficiently place the definitions of these constants into a more centralized or  isolated location.",NA
1108,"The code is structured in a way that relies too much on using  or setting global variables throughout various points in the code, instead of  preserving the associated information in a narrower, more local  context.",NA
1109,"The code contains a callable, block, or other code element in  which the same variable is used to control more than one unique task or store  more than one instance of data.",NA
1109,"Use of the same variable for multiple purposes can make it more difficult for a person to read or understand the code, potentially hiding other quality issues.",NA
1109,"This issue makes it more difficult to maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.",NA
111,"When a Java application uses the Java Native Interface (JNI) to call code written in another programming language, it can expose the application to weaknesses in that code, even if those weaknesses cannot occur in Java.",NA
111,"Many safety features that programmers may take for granted simply do not apply for native code, so you must carefully review all such code for potential problems. The languages used to implement native code may be more susceptible to buffer overflows and other attacks. Native code is unprotected by the security features enforced by the runtime environment, such as strong typing and array bounds checking.",NA
1110,"The product's design documentation does not adequately describe  control flow, data flow, system initialization, relationships between tasks,  components, rationales, or other important aspects of the  design.",NA
1111,"The product's documentation does not adequately define inputs,  outputs, or system/software interfaces.",NA
1112,The document does not fully define all mechanisms that are used  to control or influence how product-specific programs are  executed.,NA
1113,The source code uses comment styles or formats that are  inconsistent or do not follow expected standards for the  product.,NA
1114,The source code contains whitespace that is inconsistent across  the code or does not follow expected standards for the  product.,NA
1115,The source code contains elements such as source files   that do not consistently provide a prologue or header that has been  standardized for the project.,NA
1115,"The lack of a prologue can make it more difficult to accurately and quickly understand the associated code. Standard prologues or headers may contain information such as module name, version number, author, date, purpose, function, assumptions, limitations, accuracy considerations, etc.",NA
1115,"This issue makes it more difficult to maintain the software due to insufficient analyzability, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.",NA
1116,The source code contains comments that do not accurately  describe or explain aspects of the portion of the code with which the comment is  associated.,NA
1116,"When a comment does not accurately reflect the associated code elements, this can introduce confusion to a reviewer (due to inconsistencies) or make it more difficult and less efficient to validate that the code is implementing the intended behavior correctly.",NA
1116,"This issue makes it more difficult to maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.",NA
1117,"The code contains a function or method whose signature and/or associated  inline documentation does not sufficiently describe the callable's inputs, outputs,  side effects, assumptions, or return codes.",NA
1118,"The documentation does not sufficiently describe the techniques  that are used for error handling, exception processing, or similar  mechanisms.",NA
1119,"The code uses too many unconditional branches (such as  ""goto"").",NA
112,The software accepts XML from an untrusted source but does not validate the XML against the proper schema.,NA
112,"Most successful attacks begin with a violation of the programmer's assumptions. By accepting an XML document without validating it against a DTD or XML schema, the programmer leaves a door open for attackers to provide unexpected, unreasonable, or malicious input.",NA
1120,"The code is too complex, as calculated using a well-defined,  quantitative measure.",NA
1120,"This issue makes it more difficult to understand and/or maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.",NA
1120,"This issue can make the software perform more slowly.  If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.",NA
1121,The code contains McCabe cyclomatic complexity that exceeds a  desirable maximum.,NA
1122,The code is structured in a way that a Halstead complexity  measure exceeds a desirable maximum.,NA
1122,"A variety of Halstead complexity measures exist, such as program vocabulary size or volume.",NA
1122,"This issue makes it more difficult to understand and/or maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.  It also might make it easier to introduce vulnerabilities.",NA
1123,The product uses too much self-modifying  code.,NA
1124,The code contains a callable or other code grouping in which  the nesting / branching is too deep.,NA
1125,The product has an attack surface whose quantitative  measurement exceeds a desirable maximum.,NA
1126,"The source code declares a variable in one scope, but the  variable is only used within a narrower scope.",NA
1127,"The code is compiled without sufficient warnings enabled, which  may prevent the detection of subtle bugs or quality  issues.",NA
113,"The software receives data from an upstream component, but does not neutralize or incorrectly neutralizes CR and LF characters before the data is included in outgoing HTTP headers.",NA
113,"Including unvalidated data in an HTTP header allows an attacker to specify the entirety of the HTTP response rendered by the browser. When an HTTP request contains unexpected CR (carriage return, also given by %0d or \r) and LF (line feed, also given by %0a or \n) characters the server may respond with an output stream that is interpreted as two different HTTP responses (instead of one). An attacker can control the second response and mount attacks such as cross-site scripting and cache poisoning attacks.",NA
113,HTTP response splitting weaknesses may be present when:,NA
113,"CR and LF characters in an HTTP header may give attackers control of the remaining headers and body of the response the application intends to send, as well as allowing them to create additional responses entirely under their control.",NA
114,Executing commands or loading libraries from an untrusted source or in an untrusted environment can cause an application to execute malicious commands (and payloads) on behalf of an attacker.,NA
114,"Process control vulnerabilities take two forms: 1. An attacker can change the command that the program executes: the attacker explicitly controls what the command is. 2. An attacker can change the environment in which the command executes: the attacker implicitly controls what the command means. Process control vulnerabilities of the first type occur when either data enters the application from an untrusted source and the data is used as part of a string representing a command that is executed by the application. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.",NA
114,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
115,"The software misinterprets an input, whether from an attacker or another product, in a security-relevant fashion.",NA
116,"The software prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved.",NA
116,"Improper encoding or escaping can allow attackers to change the commands that are sent to another component, inserting malicious commands instead.",NA
116,"Most software follows a certain protocol that uses structured messages for communication between components, such as queries or commands. These structured messages can contain raw data interspersed with metadata or control information. For example, ""GET /index.html HTTP/1.1"" is a structured message containing a command (""GET"") with a single argument (""/index.html"") and metadata about which protocol version is being used (""HTTP/1.1"").",NA
116,"If an application uses attacker-supplied inputs to construct a structured message without properly encoding or escaping, then the attacker could insert special characters that will cause the data to be interpreted as control information or metadata. Consequently, the component that receives the output will perform the wrong operations, or otherwise interpret the data incorrectly.",NA
116,"The communications between components can be modified in unexpected ways. Unexpected commands can be executed, bypassing other security mechanisms. Incoming data can be misinterpreted.",NA
116,"The communications between components can be modified in unexpected ways. Unexpected commands can be executed, bypassing other security mechanisms. Incoming data can be misinterpreted.",NA
116,"The communications between components can be modified in unexpected ways. Unexpected commands can be executed, bypassing other security mechanisms. Incoming data can be misinterpreted.",NA
1164,"The program contains code that is not essential for execution,   i.e. makes no state changes and has no side effects that alter   data or control flow, such that removal of the code would have no impact   to functionality or correctness.",NA
117,The software does not neutralize or incorrectly neutralizes output that is written to logs.,NA
117,This can allow an attacker to forge log entries or inject malicious content into logs.,NA
117,Log forging vulnerabilities occur when:,NA
117,"Applications typically use log files to store a history of events or transactions for later review, statistics gathering, or debugging. Depending on the nature of the application, the task of reviewing log files may be performed manually on an as-needed basis or automated with a tool that automatically culls logs for important events or trending information.",NA
117,"Interpretation of the log files may be hindered or misdirected if an attacker can supply data to the application that is subsequently logged verbatim. In the most benign case, an attacker may be able to insert false entries into the log file by providing the application with input that includes appropriate characters. Forged or otherwise corrupted log files can be used to cover an attacker's tracks, possibly by skewing statistics, or even to implicate another party in the commission of a malicious act. If the log file is processed automatically, the attacker can render the file unusable by corrupting the format of the file or injecting unexpected characters. An attacker may inject code or other commands into the log file and take advantage of a vulnerability in the log processing utility.",NA
117,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
1173,"The application does not use, or incorrectly uses, an input validation framework that is provided by the source language or an independent library.",NA
1173,"Many modern coding languages provide developers with input validation frameworks to make the task of input validation easier and less error-prone. These frameworks will automatically check all input against specified criteria and direct execution to error handlers when invalid input is received. The improper use (i.e., an incorrect implementation or missing altogether) of these frameworks is not directly exploitable, but can lead to an exploitable condition if proper input validation is not performed later in the application. Not using provided input validation frameworks can also hurt the maintainability of code as future developers may not recognize the downstream input validation being used in the place of the validation framework.",NA
1173,"Unchecked input leads to cross-site scripting, process control, and SQL injection vulnerabilities, among others.",NA
1173,This weakness may occur when software designers choose to not leverage input validation frameworks provided by the source language.,NA
1173,This weakness may occur when developers do not correctly use a provided input validation framework.,NA
1174,"The ASP.NET application does not use, or incorrectly uses, the model validation framework.",NA
1174,"Unchecked input leads to cross-site scripting, process control, and SQL injection vulnerabilities, among others.",NA
1176,"The program performs CPU computations using    algorithms that are not as efficient as they could be for the    needs of the developer, i.e., the computations can be    optimized further.",NA
1177,"The software uses a function, library, or third party component   that has been explicitly prohibited, whether by the developer or   the customer.",NA
1177,"The developer - or customers - may wish to restrict or eliminate use of a function, library, or third party component for any number of reasons, including real or suspected vulnerabilities; difficulty to use securely; export controls or license requirements; obsolete or poorly-maintained code; internal code being scheduled for deprecation; etc.",NA
1177,"To reduce risk of vulnerabilities, the developer might maintain a list of ""banned"" functions that programmers must avoid using because the functions are difficult or impossible to use securely.  This issue can also make the software more costly and difficult to maintain.",NA
118,"The software does not restrict or incorrectly restricts operations within the boundaries of a resource that is accessed using an index or pointer, such as memory or files.",NA
1187,This entry has been deprecated because it was a duplicate of CWE-908. All content has been transferred to CWE-908.,NA
1188,"The software initializes or sets a resource with a default that is intended to be changed by the administrator, but the default is not secure.",NA
1189,The product does not properly isolate shared resources between trusted and untrusted agents.,NA
1189,"If shared resources are being used by a trusted user, it may be possible for untrusted agents to modify the functionality of the shared resource for the trusted user.",NA
1189,The functionality of the shared resource may be intentionally degraded.,NA
119,"The software performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer.",NA
119,"Certain languages allow direct addressing of memory locations and do not automatically ensure that these locations are valid for the memory buffer that is being referenced. This can cause read or write operations to be performed on memory locations that may be associated with other variables, data structures, or internal program data.",NA
119,"As a result, an attacker may be able to execute arbitrary code, alter the intended control flow, read sensitive information, or cause the system to crash.",NA
119,"If the memory accessible by the attacker can be effectively controlled, it may be possible to execute arbitrary code, as with a standard buffer overflow. If the attacker can overwrite a pointer's worth of memory (usually 32 or 64 bits), they can redirect a function pointer to their own malicious code. Even when the attacker can only modify a single byte arbitrary code execution can be possible. Sometimes this is because the same problem can be exploited repeatedly to the same effect. Other times it is because the attacker can overwrite security-critical application-specific data -- such as a flag indicating whether the user is an administrator.",NA
119,"Out of bounds memory access will very likely result in the corruption of relevant memory, and perhaps instructions, possibly leading to a crash. Other attacks leading to lack of availability are possible, including putting the program into an infinite loop.",NA
119,"In the case of an out-of-bounds read, the attacker may have access to sensitive information. If the sensitive information contains system details, such as the current buffers position in memory, this knowledge can be used to craft further attacks, possibly with more severe consequences.",NA
1190,"The product enables a Direct Memory Access (DMA) capable device before the security configuration settings are established, which allows an attacker to extract data from or gain privileges on the product.",NA
1190,DMA devices have direct write access to main memory and      due to time of attack will be able to bypass OS or Bootloader      access control.,NA
1191,"The chip does not implement or does not correctly    enforce access control on the debug interface, thus allowing an    attacker to exercise the debug interface to access a portion of    the chip internal registers that typically would not be    exposed.",NA
1192,"The System-on-Chip (SoC) does not have unique, immutable identifiers for each of its components.",NA
1192,"A System-on-Chip (SoC) comprises several components (IP) with varied    trust requirements. It is required that each IP is identified    uniquely and should distinguish itself from other entities in    the SoC without any ambiguity. The unique secured identity is    required for various purposes. Most of the time the identity is used    to route a transaction or perform certain actions (i.e.    resetting, retrieving a sensitive information, and acting upon or on    behalf of), etc.",NA
1192,There are several variants of this weakness:,NA
1193,The product enables components that contain untrusted firmware before memory and fabric access controls have been enabled.,NA
1193,An untrusted component can master transactions on the HW bus and target memory or other assets to compromise the SoC boot firmware.,NA
12,An ASP .NET application must enable custom error pages in order to prevent attackers from mining information from the framework's built-in responses.,NA
12,The mode attribute of the <customErrors> tag defines whether custom or default error pages are used.,NA
12,"Default error pages gives detailed information about the error that occurred, and should not be used in production environments. Attackers can leverage the additional information provided by a default error page to mount attacks targeted on the framework, database, or other resources used by the application.",NA
120,"The program copies an input buffer to an output buffer without verifying that the size of the input buffer is less than the size of the output buffer, leading to a buffer overflow.",NA
120,"A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer. The simplest type of error, and the most common cause of buffer overflows, is the ""classic"" case in which the program copies the buffer without restricting how much is copied. Other variants exist, but the existence of a classic overflow strongly suggests that the programmer is not considering even the most basic of security protections.",NA
120,"Buffer overflows often can be used to execute arbitrary code, which is usually outside the scope of a program's implicit security policy. This can often be used to subvert any other security service.",NA
120,"Buffer overflows generally lead to crashes. Other attacks leading to lack of availability are possible, including putting the program into an infinite loop.",NA
1209,"The reserved bits in a hardware design are not disabled prior to production. Typically, reserved bits are used for future capabilities and should not support any functional logic in the design. However, designers might covertly use these bits to debug or further develop new capabilities in production hardware. Adversaries with access to these bits will write to them in hopes of compromising hardware state.",NA
1209,This type of weakness all depends on the capabilities of the logic being controlled or configured by the reserved bits,NA
1209,The Designer and Implementer have to make a conscious choice to do this,NA
1209,The Designer and Implementer have to make a conscious choice to do this,NA
1209,"If documentation labels anything ""for future use"", ""reserved"", or the like, such labeling could indicate to an attacker a potential attack point",NA
121,"A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function).",NA
121,"There are generally several security-critical data on an execution stack that can lead to arbitrary code execution. The most prominent is the stored return address, the memory address at which execution should continue once the current function is finished executing. The attacker can overwrite this value with some memory address to which the attacker also has write access, into which they place arbitrary code to be run with the full privileges of the vulnerable program. Alternately, the attacker can supply the address of an important call, for instance the POSIX system() call, leaving arguments to the call on the stack. This is often called a return into libc exploit, since the attacker generally forces the program to jump at return time into an interesting routine in the C standard library (libc). Other important data commonly on the stack include the stack pointer and frame pointer, two values that indicate offsets for computing memory addresses. Modifying those values can often be leveraged into a ""write-what-where"" condition.",NA
121,"Buffer overflows generally lead to crashes. Other attacks leading to lack of availability are possible, including putting the program into an infinite loop.",NA
121,"Buffer overflows often can be used to execute arbitrary code, which is usually outside the scope of a program's implicit security policy.",NA
121,"When the consequence is arbitrary code execution, this can often be used to subvert any other security service.",NA
122,"A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc().",NA
122,"Buffer overflows generally lead to crashes. Other attacks leading to lack of availability are possible, including putting the program into an infinite loop.",NA
122,"Buffer overflows often can be used to execute arbitrary code, which is usually outside the scope of a program's implicit security policy. Besides important user data, heap-based overflows can be used to overwrite function pointers that may be living in memory, pointing it to the attacker's code. Even in applications that do not explicitly use function pointers, the run-time will usually leave many in memory. For example, object methods in C++ are generally implemented using function pointers. Even in C programs, there is often a global offset table used by the underlying runtime.",NA
122,"When the consequence is arbitrary code execution, this can often be used to subvert any other security service.",NA
1220,"The product implements access controls via a policy or other feature with the intention to disable or restrict accesses (reads and/or writes) to assets in a system from untrusted agents. However, implemented access controls lack required granularity, which renders the control policy too broad because it allows accesses from unauthorized agents to the security-sensitive assets.",NA
1220,"Integrated circuits and hardware engines can expose accesses to assets (device configuration, keys, etc.) to trusted firmware or a software module (commonly set by BIOS/bootloader). This access is typically access-controlled. Upon a power reset, the hardware or system usually starts with default values in registers, and the trusted firmware (Boot firmware) configures the necessary access-control protection.",NA
1220,"A common weakness that can exist in such protection schemes is that access controls or policies are not granular enough. This condition allows agents beyond trusted agents to access assets and could lead to a loss of functionality or the ability to set up the device securely. This further results in security risks from leaked, sensitive, key material to modification of device configuration.",NA
1220,Such issues could be introduced during hardware architecture and design and identified later during Testing or System Configuration phases.,NA
1220,Such issues could be introduced during hardware implementation and identified later during Testing or System Configuration phases.,NA
1221,Hardware description language code incorrectly defines register defaults or hardware IP parameters to insecure values.,NA
1221,"Integrated circuits and hardware IP software programmable controls and settings are commonly stored in register circuits. These register contents have to be initialized at hardware reset to defined default values that are hard coded in the hardware description language (HDL) code of the hardware unit. Hardware descriptive languages also support definition of parameter variables, which can be defined in code during instantiation of the hardware IP module. Such parameters are generally used to configure a specific instance of a hardware IP in the design.",NA
1221,"The system security settings of a hardware design can be affected by incorrectly defined default values or IP parameters. The hardware IP would be in an insecure state at power reset, and this can be exposed or exploited by untrusted software running on the system. Both register defaults and parameters are hardcoded values, which cannot be changed using software or firmware patches but must be changed in hardware silicon. Thus, such security issues are considerably more difficult to address later in the lifecycle. Hardware designs can have a large number of such parameters and register defaults settings, and it is important to have design tool support to check these settings in an automated way and be able to identify which settings are security sensitive.",NA
1221,"Degradation of system functionality, or loss of access control enforcement",NA
1221,"Such issues could be introduced during implementation of hardware design, since IP parameters and defaults are defined in HDL code and identified later during Testing or System Configuration phases.",NA
1222,The product defines a large address region protected from modification by the same register lock control bit. This results in a conflict between the functional requirement that some addresses need to be writable by software during operation and the security requirement that the system configuration lock bit must be set during the boot process.,NA
1222,"Integrated circuits and hardware IPs can expose the device configuration controls that need to be programmed after device power reset by a trusted firmware or software module (commonly set by BIOS/bootloader) and then locked from any further modification. In hardware design, this is commonly implemented using a programmable lock bit which enables/disables writing to a protected set of registers or address regions. When the programmable lock bit is set, the relevant address region can be implemented as a hardcoded value in hardware logic that cannot be changed later.",NA
1222,"A problem can arise wherein the protected region definition is not granular enough. After the programmable lock bit has been set, then this new functionality cannot be implemented without change to the hardware design.",NA
1222,System security configuration cannot be defined in a way that does not conflict with functional requirements of device.,NA
1222,Such issues are introduced during hardware architecture and design since software controls and configuration are defined during these phases and identified later during Testing or System Configuration phases.,NA
1223,"A write-once register in hardware design is programmable by an untrusted software component earlier than the trusted software component, resulting in a race condition issue.",NA
1223,"Integrated circuits and hardware IP software programmable controls and settings are commonly stored in register circuits. These register contents have to be initialized at hardware reset to defined default values that are hard coded in the hardware description language (HDL) code of the hardware unit. A common security protection method used to protect register settings from modification by software is to make them write-once. This means the hardware implementation only allows writing to such registers once, and they become read-only after having been written once by software. This is useful to allow initial boot software to configure systems settings to secure values while blocking runtime software from modifying such hardware settings.",NA
1223,"Implementation issues in hardware design of such controls can expose such registers to a race condition security flaw. For example, consider a hardware design that has two different software/firmware modules executing in parallel. One module is trusted (module A) and another is untrusted (module B). In this design it could be possible for Module B to send write cycles to the write-once register before Module A. Since the field is write-once the programmed value from Module A will be ignored and the pre-empted value programmed by Module B will be used by hardware.",NA
1223,System configuration cannot be programmed in a secure way,NA
1223,This weakness can appear in designs that use register write-once attributes with two or more software/firmware modules with varying levels of trust executing in parallel.,NA
1224,"The hardware design control register ""sticky bits"" or write-once bit fields are improperly implemented, such that they can be reprogrammed by software.",NA
1224,"Integrated circuits and hardware IP software programmable controls and settings are commonly stored in register circuits. These register contents have to be initialized at hardware reset to define default values that are hard coded in the hardware description language (HDL) code of the hardware unit. A common security protection method used to protect register settings from modification by software is to make the settings write-once or ""sticky."" This allows writing to such registers only once, whereupon they become read-only. This is useful to allow initial boot software to configure systems settings to secure values while blocking runtime software from modifying such hardware settings.",NA
1224,"Failure to implement write-once restrictions in hardware design can expose such registers to being re-programmed by software and written multiple times. For example, write-once fields could be implemented to only be write-protected if they have been set to value ""1"", wherein they would work as ""write-1-once"" and not ""write-once"".",NA
1224,System configuration cannot be programmed in a secure way,NA
1224,"Such issues could be introduced during implementation of hardware design, since IP parameters and defaults are defined in HDL code and identified later during Testing or System Configuration phases.",NA
1229,"The product manages resources or behaves in a way that indirectly creates a new, distinct resource that can be used by attackers in violation of the intended policy.",NA
123,"Any condition where the attacker has the ability to write an arbitrary value to an arbitrary location, often as the result of a buffer overflow.",NA
123,"Clearly, write-what-where conditions can be used to write data to areas of memory outside the scope of a policy. Also, they almost invariably can be used to execute arbitrary code, which is usually outside the scope of a program's implicit security policy. If the attacker can overwrite a pointer's worth of memory (usually 32 or 64 bits), they can redirect a function pointer to their own malicious code. Even when the attacker can only modify a single byte arbitrary code execution can be possible. Sometimes this is because the same problem can be exploited repeatedly to the same effect. Other times it is because the attacker can overwrite security-critical application-specific data -- such as a flag indicating whether the user is an administrator.",NA
123,"Many memory accesses can lead to program termination, such as when writing to addresses that are invalid for the current process.",NA
123,"When the consequence is arbitrary code execution, this can often be used to subvert any other security service.",NA
1230,"The product prevents direct access to a resource containing sensitive information, but it does not sufficiently limit access to metadata that is derived from the original, sensitive information.",NA
1231,The product incorrectly implements register lock bit protection features such that protected controls can be programmed even after the lock has been set.,NA
1231,Registers protected by lock bit can be modified even when lock is set.,NA
1231,Such issues could be introduced during hardware architecture and design and identified later during Testing or System Configuration phases.,NA
1231,Such issues could be introduced during implementation and identified later during Testing or System Configuration phases.,NA
1232,"The product implements register lock bit protection features with the intent to disable changes to system configuration after the lock is set. Some of the protected registers or lock bits become programmable after power state transitions (e.g., Entry and wake from low power sleep modes).",NA
1232,"Integrated circuits and hardware IPs can expose the device configuration controls that need to be programmed after device power reset by a trusted firmware or software module (commonly set by BIOS/bootloader) and then locked from any further modification. In hardware design this is commonly implemented using a programmable lock bit, which when set disables writes to a protected set of registers or address regions.",NA
1232,"Some common weaknesses that can exist in such a protection scheme is that the lock gets cleared, the values of the protected registers get reset, or the lock become programmable after a power state transition.",NA
1232,System Configuration protected by lock bit can be modified even when lock is set.,NA
1232,Such issues could be introduced during hardware architecture and design or implementation and identified later during Testing or System Configuration phases.,NA
1232,Such issues could be introduced during hardware architecture and design or implementation and identified later during Testing or System Configuration phases.,NA
1233,The product implements a register lock bit protection feature that permits security sensitive controls to modify the protected configuration.,NA
1233,System Configuration protected by the lock bit can be modified even when the lock is set.,NA
1233,Such issues could be introduced during hardware architecture and design and identified later during Testing or System Configuration phases.,NA
1233,Such issues could be introduced during implementation and identified later during Testing or System Configuration phases.,NA
1234,The product implements register lock bit protection features that may permit security sensitive controls to modify system configuration after the lock is set through internal modes or debug features.,NA
1234,System Configuration protected by lock bit can be modified even when lock is set.,NA
1234,Such issues could be introduced during hardware architecture and design and identified later during Testing or System Configuration phases.,NA
1234,Such issues could be introduced during implementation and identified later during Testing or System Configuration phases.,NA
1235,"The code uses boxed primitives, which may introduce inefficiencies into performance-critical operations.",NA
1235,"Languages such as Java and C# support automatic conversion through their respective compilers from primitive types into objects of the corresponding wrapper classes, and vice versa. For example, a compiler might convert an int to Integer (called autoboxing) or an Integer to int (called unboxing). This eliminates forcing the programmer to perform these conversions manually, which makes the code cleaner.",NA
1235,"However, this feature comes at a cost of performance and can lead to resource exhaustion and impact availability when used with generic collections. Therefore, they should not be used for scientific computing or other performance critical operations. They are only suited to support ""impedance mismatch"" between reference types and primitives.",NA
1235,"Incorrect autoboxing/unboxing would result in reduced performance, which sometimes can lead to resource consumption issues.",NA
1235,The programmer may use boxed primitives when not strictly necessary.,NA
1236,"The software saves user-provided information into a Comma-Separated Value (CSV) file, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as a command when the file is opened by spreadsheet software.",NA
1236,"User-provided data is often saved to traditional databases.  This data can be exported to a CSV file, which allows users to read the data using spreadsheet software such as Excel, Numbers, or Calc.  This software interprets entries beginning with '=' as formulae, which are then executed by the spreadsheet software.  The software's formula language often allows methods to access hyperlinks or the local command line, and frequently allows enough characters to invoke an entire script. Attackers can populate data fields which, when saved to a CSV file, may attempt information exfiltration or other malicious activity when automatically executed by the spreadsheet software.",NA
1236,Current versions of Excel warn users of untrusted content.,NA
1236,"The weakness is in the implementation of a software's CSV export feature, in particular how it formats formula entries as the output gets flattened into a text file.",NA
1239,The hardware product does not properly clear sensitive information from built-in registers when the user of the hardware block changes.,NA
1239,"Hardware logic operates on data stored in registers local to the hardware block. Most hardware IPs, including cryptographic accelerators, rely on registers to buffer I/O, store intermediate values, and interface with software. The result of this is that sensitive information, such as passwords or encryption keys, can exist in locations not transparent to the user of the hardware logic. When a different entity obtains access to the IP due to a change in operating mode or conditions, the new entity can extract information belonging to the previous user if no mechanisms are in place to clear register contents. It is important to clear information stored in the hardware if a physical attack on the product is detected, or if the user of the hardware block changes. The process of clearing register contents in a hardware IP is referred to as zeroization in standards for cryptographic hardware modules such as FIPS-140-2 [REF-267].",NA
1239,The consequences will depend on the information disclosed due to the vulnerability.,NA
1239,Lack of hardware mechanisms to zeroize or clear registers in the design or specification.,NA
1239,Mechanisms to zeroize and clear registers are in the design but implemented incorrectly.,NA
1239,"Hardware-provided zeroization mechanisms are not used appropriately by the IP user (ex. firmware), or data remanence issues are not taken into account.",NA
124,The software writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer.,NA
124,"This typically occurs when a pointer or its index is decremented to a position before the buffer, when pointer arithmetic results in a position before the beginning of the valid memory location, or when a negative index is used.",NA
124,"Out of bounds memory access will very likely result in the corruption of relevant memory, and perhaps instructions, possibly leading to a crash.",NA
124,"If the corrupted memory can be effectively controlled, it may be possible to execute arbitrary code. If the corrupted memory is data rather than instructions, the system will continue to function with improper changes, possibly in violation of an implicit or explicit policy. The consequences would only be limited by how the affected data is used, such as an adjacent memory location that is used to specify whether the user has special privileges.",NA
124,"When the consequence is arbitrary code execution, this can often be used to subvert any other security service.",NA
1240,The product implements a cryptographic algorithm using a non-standard or unproven cryptographic primitive.,NA
1240,"Cryptographic algorithms (or Cryptographic systems) depend on cryptographic primitives as their basic building blocks. As a result, cryptographic primitives are designed to do one very specific task in a precisely defined and highly reliable fashion. For example, one can declare that a specific crypto primitive (like an encryption routine) can only be broken after trying out N different inputs (the larger the value of N, the stronger the crypto). If a vulnerability is found that leads to breaking this primitive in significantly less than N attempts, then the specific cryptographic primitive is considered broken, and the entirety of the cryptographic algorithm (or the cryptographic system) is now considered insecure. Thus, even breaking a seemingly small cryptographic primitive is sufficient to render the whole system vulnerable.",NA
1240,"Cryptographic primitives are products of extensive reviews from cryptographers, industry, and government entities looking for any possible flaws. However, over time even well-known cryptographic primitives lose their compliance status with emergence of novel attacks that might either defeat the algorithm or reduce its robustness significantly. If ad-hoc cryptographic primitives are implemented, it is almost certain that such implementation will be vulnerable to attacks resulting in the exposure of sensitive information and/or other consequences.",NA
1240,"This issue is even more prominent for hardware-implemented deployment of cryptographic algorithms due to a number of reasons. Firstly, because hardware is not replaceable like software, if a flaw is discovered with a hardware-implemented cryptographic primitive, it cannot be fixed in most cases without a recall of the product. Secondly, the hardware product is often expected to work for years, during which time computation power available to the attacker only increases. Therefore, for hardware implementations of cryptographic primitives, it is absolutely essential that only strong, proven cryptographic primitives are used.",NA
1240,"Incorrect usage of crypto primitives could render the supposedly encrypted data as unencrypted plaintext in the worst case. This would compromise any security property, including the ones listed above.",NA
1240,This weakness is primarily introduced during the architecture and design phase as risky primitives are included.,NA
1240,"In many cases, the design originally defines a proper cryptography primative, but this is then changed during implementation due to unforseen constraints.",NA
1241,The product requires a true random number but uses an algorithm that is predictable and generates a pseudo-random number.,NA
1241,Predicatable random numbers can render the protection mechanisms in place ineffective,NA
1241,This weakness is primarily introduced during the architecture and design phase an incorrect algorithm is defined.,NA
1241,"In many cases, the design originally defines a proper cryptography primative, but this is then changed during implementation due to unforseen constraints.",NA
1242,The chip includes chicken bits or undocumented features that can create entry points for unauthorized actors.,NA
1243,The product exposes security-sensitive values stored in fuses during debug.,NA
1244,"The product's physical debug and test interface protection does not block untrusted agents, resulting in unauthorized access to and potentially control of sensitive assets.",NA
1245,"Faulty finite state machines (FSMs) in the hardware logic allow an attacker to put the system in an undefined state, to cause a denial of service (DoS) or gain privileges on the victim's system.",NA
1246,The product does not implement or incorrectly handles the implementation of write operations in limited-write non-volatile memories.,NA
1247,The product does not contain the necessary additional circuitry or sensors to detect and mitigate voltage and clock glitches.,NA
1248,The security-sensitive hardware module contains semiconductor defects. ,NA
1249,"The product provides an application for administrators to manage parts of the underlying operating system, but the application does not accurately identify all of the relevant entities or resources that exist in the OS; that is, the application's model of the OS's state is inconsistent with the OS's actual state.",NA
1249,"Many products provide web-based applications or other software for managing the underlying operating system. This is common with cloud, network access devices, home networking, and other systems.  When the management tool does not accurately represent what is in the OS - such as user accounts - then the administrator might not see suspicious activities that would be noticed otherwise.",NA
1249,"For example, numerous systems utilize a web   front-end for administrative control. They also offer   the ability to add, alter, and drop users with various   privileges as it relates to the functionality of the   system.  A potential architectural weakness may exist   where the user information reflected in the web   interface does not mirror the users in the underlying   operating system.  Many web UI or REST APIs use the   underlying operating system for authentication; the   system's logic may also track an additional set of   user capabilities within configuration files   and datasets for authorization capabilities. When   there is a discrepancy between the user information in   the UI or REST API's interface system and the   underlying operating system's user listing, this may   introduce a weakness into the system.  For example, if an   attacker compromises the OS and adds a new user   account - a ""ghost"" account - then the attacker could escape detection if   the management tool does not list the newly-added   account.",NA
1249,This discrepancy could be exploited in several ways:,NA
1249,"Many of these attacker scenarios can be   realized by leveraging separate vulnerabilities   related to XSS, command injection, authentication   bypass, or logic flaws on the various systems.   ",NA
1249,The design might assume that the underlying OS does not change.,NA
1249,Assumptions about the underlying OS might be hard-coded into the application or otherwise in external data stores in a way that is not updated when the OS's state changes.,NA
125,"The software reads data past the end, or before the beginning, of the intended buffer.",NA
125,"Typically, this can allow attackers to read sensitive information from other memory locations or cause a crash.  A crash can occur when the code reads a variable amount of data and assumes that a sentinel exists to stop the read operation, such as a NUL in a string.  The expected sentinel might not be located in the out-of-bounds memory, causing excessive data to be read, leading to a segmentation fault or a buffer overflow.  The software may modify an index or perform pointer arithmetic that references a memory location that is outside of the boundaries of the buffer.  A subsequent read operation then produces undefined or unexpected results.",NA
125,"By reading out-of-bounds memory, an attacker might be able to get secret values, such as memory addresses, which can be bypass protection mechanisms such as ASLR in order to improve the reliability and likelihood of exploiting a separate weakness to achieve code execution instead of just denial of service.",NA
1250,The product has or supports multiple distributed components or sub-systems that are each required to keep their own local copy of shared data - such as state or cache - but the product does not ensure that all local copies remain consistent with each other.,NA
1250,"In highly distributed environments, or on systems with distinct physical components that operate independently, there is often a need for each component to store and update its own local copy of key data such as state or cache, so that all components have the same ""view"" of the overall system and operate in a coordinated fashion.  For example, users of a social media service or a massively multiplayer online game might be using their own personal computers while also interacting with different physical hosts in a globally distributed service, but all participants must be able to have the same ""view"" of the world.  Alternately, a processor's Memory Management Unit (MMU) might have ""shadow"" MMUs to distribute its workload, and all shadow MMUs are expected to have the same accessible ranges of memory.",NA
1250,"In such environments, it becomes critical for the product to ensure that this ""shared state"" is consistently modified across all distributed systems. If state is not consistently maintained across all systems, then critical transactions might take place out of order, or some users might not get the same data as other users.  When this inconsistency affects correctness of operations, it can introduce vulnerabilities in mechanisms that depend on consistent state.",NA
1251,The product's architecture mirrors regions without ensuring that their contents always stay in sync.,NA
1251,"Having mirrored regions with different values might result in the exposure of sensitive information and/or other consequences, including loss of access control.",NA
1251,"Due to architectural and performance constraints, one might need to duplicate a resource. The most common example of doing this in computer architecture is the concept of cache, which keeps a ""local"" copy of the data element in memory, because the time to access the memory (which is located far off from the computing core) is significantly longer compared to the time it takes to access a local copy (cache). Thus, keeping a local copy of some distant entity provides significant performance improvement. Unfortunately, this improvement also comes with a downside, since the product needs to ensure that the local copy always mirrors the original copy truthfully.  If they get out of sync somehow, the computational result is no longer true.",NA
1251,"In designing hardware, memory is not the only thing that gets mirrored. There are many other entities that get mirrored, too: registers, memory regions, and, in some cases, even whole units. For example, for a multi-core processor, if every memory access from any of those tens of cores goes through a single memory-management unit (MMU) for security reasons, then the MMU becomes a performance bottleneck. In such cases, it might make sense to create duplicate, local MMUs that will serve only a subset of the cores of processors rather than all of them. These local copies are also called ""shadow copies"" or ""mirrored copies.""",NA
1251,"If the original resource that was being duplicated into these local copies never changed, the question of the local copies getting out of sync would not arise. Unfortunately, in many cases, the values inside the original copy change. For example, a memory range might be inaccessible during boot time, but once the boot process is over and the system is now in a stable state, that memory range may now be opened up for access. So, if a register(s) in the access-control unit stores the start and end addresses of the ""accessible"" memory chunks, those values would change after the boot process is over. Now, when the original copy changes, the mirrored copies must also change, and change fast.",NA
1251,"This situation of shadow-copy-possibly-out-of-sync-with-original-copy might occur as a result of multiple scenarios, including the following: ",NA
1252,The CPU is not configured to provide hardware support for exclusivity of write and execute operations on memory. This allows an attacker to execute data from all of memory.,NA
126,The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations after the targeted buffer.,NA
126,This typically occurs when the pointer or its index is incremented to a position beyond the bounds of the buffer or when pointer arithmetic results in a position outside of the valid memory location to name a few. This may result in exposure of sensitive information or possibly a crash.,NA
126,"By reading out-of-bounds memory, an attacker might be able to get secret values, such as memory addresses, which can be bypass protection mechanisms such as ASLR in order to improve the reliability and likelihood of exploiting a separate weakness to achieve code execution instead of just denial of service.",NA
127,The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations prior to the targeted buffer.,NA
127,"This typically occurs when the pointer or its index is decremented to a position before the buffer, when pointer arithmetic results in a position before the beginning of the valid memory location, or when a negative index is used. This may result in exposure of sensitive information or possibly a crash.",NA
127,"By reading out-of-bounds memory, an attacker might be able to get secret values, such as memory addresses, which can be bypass protection mechanisms such as ASLR in order to improve the reliability and likelihood of exploiting a separate weakness to achieve code execution instead of just denial of service.",NA
128,"Wrap around errors occur whenever a value is incremented past the maximum value for its type and therefore ""wraps around"" to a very small, negative, or undefined value.",NA
128,"Due to how addition is performed by computers, if a primitive is incremented past the maximum value possible for its storage space, the system will not recognize this, and therefore increment each bit as if it still had extra space. Because of how negative numbers are represented in binary, primitives interpreted as signed may ""wrap"" to very large negative values.",NA
128,"This weakness will generally lead to undefined behavior and therefore crashes. In the case of overflows involving loop index variables, the likelihood of infinite loops is also high.",NA
128,"If the value in question is important to data (as opposed to flow), simple data corruption has occurred. Also, if the wrap around results in other conditions such as buffer overflows, further memory corruption may occur.",NA
128,This weakness can sometimes trigger buffer overflows which can be used to execute arbitrary code. This is usually outside the scope of a program's implicit security policy.,NA
129,"The product uses untrusted input when calculating or using an array index, but the product does not validate or incorrectly validates the index to ensure the index references a valid position within the array.",NA
129,"Use of an index that is outside the bounds of an array will very likely result in the corruption of relevant memory and perhaps instructions, leading to a crash, if the values are outside of the valid memory area.",NA
129,"If the memory corrupted is data, rather than instructions, the system will continue to function with improper values.",NA
129,"Use of an index that is outside the bounds of an array can also trigger out-of-bounds read or write operations, or operations on the wrong objects; i.e., ""buffer overflows"" are not always the result. This may result in the exposure or modification of sensitive data.",NA
129,"If the memory accessible by the attacker can be effectively controlled, it may be possible to execute arbitrary code, as with a standard buffer overflow and possibly without the use of large inputs if a precise index can be controlled.",NA
129,"A single fault could allow either an overflow (CWE-788) or underflow (CWE-786) of the array index. What happens next will depend on the type of operation being performed out of bounds, but can expose sensitive information, cause a system crash, or possibly lead to arbitrary code execution.",NA
13,Storing a plaintext password in a configuration file allows anyone who can read the file access to the password-protected resource making them an easy target for attackers.,NA
130,"The software parses a formatted message or structure, but it does not handle or incorrectly handles a length field that is inconsistent with the actual length of the associated data.",NA
130,"If an attacker can manipulate the length parameter associated with an input such that it is inconsistent with the actual length of the input, this can be leveraged to cause the target application to behave in unexpected, and possibly, malicious ways. One of the possible motives for doing so is to pass in arbitrarily large input to the application. Another possible motivation is the modification of application state by including invalid data for subsequent properties of the application. Such weaknesses commonly lead to attacks such as buffer overflows and execution of arbitrary code.",NA
131,"The software does not correctly calculate the size to be used when allocating a buffer, which could lead to a buffer overflow.",NA
131,"If the incorrect calculation is used in the context of memory allocation, then the software may create a buffer that is smaller or larger than expected. If the allocated buffer is smaller than expected, this could lead to an out-of-bounds read or write (CWE-119), possibly causing a crash, allowing arbitrary code execution, or exposing sensitive data.",NA
132,This entry has been deprecated because it was a duplicate of CWE-170. All content has been transferred to CWE-170.,NA
134,"The software uses a function that accepts a format string as an argument, but the format string originates from an external source.",NA
134,"When an attacker can modify an externally-controlled format string, this can lead to buffer overflows, denial of service, or data representation problems.",NA
134,"It should be noted that in some circumstances, such as internationalization, the set of format strings is externally controlled by design. If the source of these format strings is trusted (e.g. only contained in library files that are only modifiable by the system administrator), then the external control might not itself pose a vulnerability.",NA
134,Format string problems allow for information disclosure which can severely simplify exploitation of the program.,NA
134,Format string problems can result in the execution of arbitrary code.,NA
134,"The programmer rarely intends for a format string to be externally-controlled at all. This weakness is frequently introduced in code that constructs log messages, where a constant format string is omitted.",NA
134,"In cases such as localization and internationalization, the language-specific message repositories could be an avenue for exploitation, but the format string issue would be resultant, since attacker control of those repositories would also allow modification of message length, format, and content.",NA
135,The software does not correctly calculate the length of strings that can contain wide or multi-byte characters.,NA
135,"This weakness may lead to a buffer overflow. Buffer overflows often can be used to execute arbitrary code, which is usually outside the scope of a program's implicit security policy. This can often be used to subvert any other security service.",NA
135,"Out of bounds memory access will very likely result in the corruption of relevant memory, and perhaps instructions, possibly leading to a crash. Other attacks leading to lack of availability are possible, including putting the program into an infinite loop.",NA
135,"In the case of an out-of-bounds read, the attacker may have access to sensitive information. If the sensitive information contains system details, such as the current buffers position in memory, this knowledge can be used to craft further attacks, possibly with more severe consequences.",NA
138,"The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as control elements or syntactic markers when they are sent to a downstream component.",NA
138,"Most languages and protocols have their own special elements such as characters and reserved words. These special elements can carry control implications. If software does not prevent external control or influence over the inclusion of such special elements, the control flow of the program may be altered from what was intended. For example, both Unix and Windows interpret the symbol < (""less than"") as meaning ""read input from a file"".",NA
138,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
14,"Sensitive memory is cleared according to the source code, but compiler optimizations leave the memory untouched when it is not read from again, aka ""dead store removal.""",NA
14,This compiler optimization error occurs when:,NA
14,"This weakness will allow data that has not been cleared from memory to be read. If this data contains sensitive password information, then an attacker can read the password and use the information to bypass protection mechanisms.",NA
140,The software does not neutralize or incorrectly neutralizes delimiters.,NA
141,"The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as parameter or argument delimiters when they are sent to a downstream component.",NA
141,"As data is parsed, an injected/absent/malformed delimiter may cause the process to take unexpected actions.",NA
142,"The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as value delimiters when they are sent to a downstream component.",NA
142,"As data is parsed, an injected/absent/malformed delimiter may cause the process to take unexpected actions.",NA
143,"The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as record delimiters when they are sent to a downstream component.",NA
143,"As data is parsed, an injected/absent/malformed delimiter may cause the process to take unexpected actions.",NA
144,"The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as line delimiters when they are sent to a downstream component.",NA
144,"As data is parsed, an injected/absent/malformed delimiter may cause the process to take unexpected actions.",NA
145,"The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as section delimiters when they are sent to a downstream component.",NA
145,"As data is parsed, an injected/absent/malformed delimiter may cause the process to take unexpected actions.",NA
145,"One example of a section delimiter is the boundary string in a multipart MIME message. In many cases, doubled line delimiters can serve as a section delimiter.",NA
146,"The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as expression or command delimiters when they are sent to a downstream component.",NA
146,"As data is parsed, an injected/absent/malformed delimiter may cause the process to take unexpected actions.",NA
147,"The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as input terminators when they are sent to a downstream component.",NA
147,"For example, a ""."" in SMTP signifies the end of mail message data, whereas a null character can be used for the end of a string.",NA
148,"The application does not properly handle when a leading character or sequence (""leader"") is missing or malformed, or if multiple leaders are used when only one should be allowed.",NA
149,"Quotes injected into an application can be used to compromise a system. As data are parsed, an injected/absent/duplicate/malformed use of quotes may cause the process to take unexpected actions.",NA
15,One or more system settings or configuration elements can be externally controlled by a user.,NA
15,"Allowing external control of system settings can disrupt service or cause an application to behave in unexpected, and potentially malicious ways.",NA
15,"Setting manipulation vulnerabilities occur when an attacker can control values that govern the behavior of the system, manage specific resources, or in some way affect the functionality of the application.",NA
15,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
150,"The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as escape, meta, or control character sequences when they are sent to a downstream component.",NA
150,"As data is parsed, an injected/absent/malformed delimiter may cause the process to take unexpected actions.",NA
150,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
151,"The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as comment delimiters when they are sent to a downstream component.",NA
152,"The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as macro symbols when they are sent to a downstream component.",NA
153,"The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as substitution characters when they are sent to a downstream component.",NA
154,"The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as variable name delimiters when they are sent to a downstream component.",NA
154,"As data is parsed, an injected delimiter may cause the process to take unexpected actions that result in an attack. Example: ""$"" for an environment variable.",NA
155,"The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as wildcards or matching symbols when they are sent to a downstream component.",NA
155,"As data is parsed, an injected element may cause the process to take unexpected actions.",NA
156,"The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as whitespace when they are sent to a downstream component.",NA
156,"This can include space, tab, etc.",NA
157,"The software does not properly handle the characters that are used to mark the beginning and ending of a group of entities, such as parentheses, brackets, and braces.",NA
157,Paired delimiters might include:,NA
158,"The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes NUL characters or null bytes when they are sent to a downstream component.",NA
158,"As data is parsed, an injected NUL character or null byte may cause the software to believe the input is terminated earlier than it actually is, or otherwise cause the input to be misinterpreted. This could then be used to inject potentially dangerous input that occurs after the null byte or otherwise bypass validation routines and other protection mechanisms.",NA
159,"The product does not properly filter, remove, quote, or otherwise manage the invalid use of special elements in user-controlled input, which could cause adverse effect on its behavior and integrity.",NA
160,"The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes leading special elements that could be interpreted in unexpected ways when they are sent to a downstream component.",NA
160,"As data is parsed, improperly handled leading special elements may cause the process to take unexpected actions that result in an attack.",NA
161,"The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes multiple leading special elements that could be interpreted in unexpected ways when they are sent to a downstream component.",NA
161,"As data is parsed, improperly handled multiple leading special elements may cause the process to take unexpected actions that result in an attack.",NA
162,"The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes trailing special elements that could be interpreted in unexpected ways when they are sent to a downstream component.",NA
162,"As data is parsed, improperly handled trailing special elements may cause the process to take unexpected actions that result in an attack.",NA
163,"The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes multiple trailing special elements that could be interpreted in unexpected ways when they are sent to a downstream component.",NA
163,"As data is parsed, improperly handled multiple trailing special elements may cause the process to take unexpected actions that result in an attack.",NA
164,"The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes internal special elements that could be interpreted in unexpected ways when they are sent to a downstream component.",NA
164,"As data is parsed, improperly handled internal special elements may cause the process to take unexpected actions that result in an attack.",NA
165,"The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes multiple internal special elements that could be interpreted in unexpected ways when they are sent to a downstream component.",NA
165,"As data is parsed, improperly handled multiple internal special elements may cause the process to take unexpected actions that result in an attack.",NA
166,"The software receives input from an upstream component, but it does not handle or incorrectly handles when an expected special element is missing.",NA
167,"The software receives input from an upstream component, but it does not handle or incorrectly handles when an additional unexpected special element is provided.",NA
168,The software does not properly handle input in which an inconsistency exists between two or more special characters or reserved words.,NA
168,"An example of this problem would be if paired characters appear in the wrong order, or if the special characters are not properly nested.",NA
170,The software does not terminate or incorrectly terminates a string or array with a null character or equivalent terminator.,NA
170,"Null termination errors frequently occur in two different ways. An off-by-one error could cause a null to be written out of bounds, leading to an overflow. Or, a program could use a strncpy() function call incorrectly, which prevents a null terminator from being added at all. Other scenarios are possible.",NA
170,"The case of an omitted null character is the most dangerous of the possible issues. This will almost certainly result in information disclosure, and possibly a buffer overflow condition, which may be exploited to execute arbitrary code.",NA
170,"If a null character is omitted from a string, then most string-copying functions will read data until they locate a null character, even outside of the intended boundaries of the string. This could: cause a crash due to a segmentation fault cause sensitive adjacent memory to be copied and sent to an outsider trigger a buffer overflow when the copy is being written to a fixed-size buffer.",NA
170,"Misplaced null characters may result in any number of security problems. The biggest issue is a subset of buffer overflow, and write-what-where conditions, where data corruption occurs from the writing of a null character over valid data, or even instructions. A randomly placed null character may put the system into an undefined state, and therefore make it prone to crashing. A misplaced null character may corrupt other data in memory.",NA
170,"Should the null character corrupt the process flow, or affect a flag controlling access, it may lead to logical errors which allow for the execution of arbitrary code.",NA
172,"The software does not properly encode or decode the data, resulting in unexpected values.",NA
173,The software does not properly handle when an input uses an alternate encoding that is valid for the control sphere to which the input is being sent.,NA
174,"The software decodes the same input twice, which can limit the effectiveness of any protection mechanism that occurs in between the decoding operations.",NA
175,The software does not properly handle when the same input uses several different (mixed) encodings.,NA
176,The software does not properly handle when an input contains Unicode encoding.,NA
177,The software does not properly handle when all or part of an input has been URL encoded.,NA
178,"The software does not properly account for differences in case sensitivity when accessing or determining the properties of a resource, leading to inconsistent results.",NA
178,"Improperly handled case sensitive data can lead to several possible consequences, including:",NA
179,"The software validates input before applying protection mechanisms that modify the input, which could allow an attacker to bypass the validation via dangerous inputs that only arise after the modification.",NA
179,"Software needs to validate data at the proper time, after data has been canonicalized and cleansed. Early validation is susceptible to various manipulations that result in dangerous inputs that are produced by canonicalization and cleansing.",NA
179,"An attacker could include dangerous input that bypasses validation protection mechanisms which can be used to launch various attacks including injection attacks, execute arbitrary code or cause other unintended behavior.",NA
179,"Since early validation errors usually arise from improperly implemented defensive mechanisms, it is likely that these will be introduced more frequently as secure programming becomes implemented more widely.",NA
180,"The software validates input before it is canonicalized, which prevents the software from detecting data that becomes invalid after the canonicalization step.",NA
180,"This can be used by an attacker to bypass the validation and launch attacks that expose weaknesses that would otherwise be prevented, such as injection.",NA
181,"The software validates data before it has been filtered, which prevents the software from detecting data that becomes invalid after the filtering step.",NA
181,"This can be used by an attacker to bypass the validation and launch attacks that expose weaknesses that would otherwise be prevented, such as injection.",NA
182,"The software filters data in a way that causes it to be reduced or ""collapsed"" into an unsafe value that violates an expected security property.",NA
183,"The product implements a protection mechanism that relies on a list of inputs (or properties of inputs) that are explicitly allowed by policy because the inputs are assumed to be safe, but the list is too permissive - that is, it allows an input that is unsafe, leading to resultant weaknesses.",NA
184,"The product implements a protection mechanism that relies on a list of inputs (or properties of inputs) that are not allowed by policy or otherwise require other action to neutralize before additional processing takes place, but the list is incomplete, leading to resultant weaknesses.",NA
184,"Developers often try to protect their products against malicious input by performing tests against inputs that are known to be bad, such as special characters that can invoke new commands.  However, such lists often only account for the most well-known bad inputs. Attackers may be able to find other malicious inputs that were not expected by the developer, allowing them to bypass the intended protection mechanism.",NA
184,"Developers might begin to develop a list of bad inputs as a fast way to fix a particular weakness, instead of fixing the root cause. See [REF-141].",NA
184,The design might rely solely on detection of malicious inputs as a protection mechanism.,NA
185,The software specifies a regular expression in a way that causes data to be improperly matched or compared.,NA
185,"When the regular expression is used in protection mechanisms such as filtering or validation, this may allow an attacker to bypass the intended restrictions on the incoming data.",NA
185,"When the regular expression is not correctly specified, data might have a different format or type than the rest of the program expects, producing resultant weaknesses or errors.",NA
185,"In PHP, regular expression checks can sometimes be bypassed with a null byte, leading to any number of weaknesses.",NA
186,"A regular expression is overly restrictive, which prevents dangerous values from being detected.",NA
186,"This weakness is not about regular expression complexity. Rather, it is about a regular expression that does not match all values that are intended. Consider the use of a regexp to identify acceptable values or to spot unwanted terms. An overly restrictive regexp misses some potentially security-relevant values leading to either false positives *or* false negatives, depending on how the regexp is being used within the code. Consider the expression /[0-8]/ where the intention was /[0-9]/.  This expression is not ""complex"" but the value ""9"" is not matched when maybe the programmer planned to check for it.",NA
187,"The software performs a comparison that only examines a portion of a factor before determining whether there is a match, such as a substring, leading to resultant weaknesses.",NA
187,"For example, an attacker might succeed in authentication by providing a small password that matches the associated portion of the larger, correct password.",NA
188,"The software makes invalid assumptions about how protocol data or memory is organized at a lower level, resulting in unintended program behavior.",NA
188,"When changing platforms or protocol versions, in-memory organization of data may change in unintended ways. For example, some architectures may place local variables A and B right next to each other with A on top; some may place them next to each other with B on top; and others may add some padding to each. The padding size may vary to ensure that each variable is aligned to a proper word size.",NA
188,"In protocol implementations, it is common to calculate an offset relative to another field to pick out a specific piece of data. Exceptional conditions, often involving new protocol versions, may add corner cases that change the data layout in an unusual way. The result can be that an implementation accesses an unintended field in the packet, treating data of one type as data of another type.",NA
188,Can result in unintended modifications or exposure of sensitive memory.,NA
190,"The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.",NA
190,"An integer overflow or wraparound occurs when an integer value is incremented to a value that is too large to store in the associated representation. When this occurs, the value may wrap to become a very small or negative number. While this may be intended behavior in circumstances that rely on wrapping, it can have security consequences if the wrap is unexpected. This is especially the case if the integer overflow can be triggered using user-supplied inputs. This becomes security-critical when the result is used to control looping, make a security decision, or determine the offset or size in behaviors such as memory allocation, copying, concatenation, etc.",NA
190,"This weakness will generally lead to undefined behavior and therefore crashes. In the case of overflows involving loop index variables, the likelihood of infinite loops is also high.",NA
190,"If the value in question is important to data (as opposed to flow), simple data corruption has occurred. Also, if the wrap around results in other conditions such as buffer overflows, further memory corruption may occur.",NA
190,This weakness can sometimes trigger buffer overflows which can be used to execute arbitrary code. This is usually outside the scope of a program's implicit security policy.,NA
191,"The product subtracts one value from another, such that the result is less than the minimum allowable integer value, which produces a value that is not equal to the correct result.",NA
191,This can happen in signed and unsigned cases.,NA
191,"This weakness will generally lead to undefined behavior and therefore crashes. In the case of overflows involving loop index variables, the likelihood of infinite loops is also high.",NA
191,"If the value in question is important to data (as opposed to flow), simple data corruption has occurred. Also, if the wrap around results in other conditions such as buffer overflows, further memory corruption may occur.",NA
191,This weakness can sometimes trigger buffer overflows which can be used to execute arbitrary code. This is usually outside the scope of a program's implicit security policy.,NA
192,"Integer coercion refers to a set of flaws pertaining to the type casting, extension, or truncation of primitive data types.",NA
192,"Several flaws fall under the category of integer coercion errors. For the most part, these errors in and of themselves result only in availability and data integrity issues. However, in some circumstances, they may result in other, more complicated security related flaws, such as buffer overflow conditions.",NA
192,Integer coercion often leads to undefined states of execution resulting in infinite loops or crashes.,NA
192,"In some cases, integer coercion errors can lead to exploitable buffer overflow conditions, resulting in the execution of arbitrary code.",NA
192,Integer coercion errors result in an incorrect value being stored for the variable in question.,NA
193,"A product calculates or uses an incorrect maximum or minimum value that is 1 more, or 1 less, than the correct value.",NA
193,"This weakness will generally lead to undefined behavior and therefore crashes. In the case of overflows involving loop index variables, the likelihood of infinite loops is also high.",NA
193,"If the value in question is important to data (as opposed to flow), simple data corruption has occurred. Also, if the wrap around results in other conditions such as buffer overflows, further memory corruption may occur.",NA
193,This weakness can sometimes trigger buffer overflows which can be used to execute arbitrary code. This is usually outside the scope of a program's implicit security policy.,NA
194,"The software performs an operation on a number that causes it to be sign extended when it is transformed into a larger data type. When the original number is negative, this can produce unexpected values that lead to resultant weaknesses.",NA
194,"When an unexpected sign extension occurs in code that operates directly on memory buffers, such as a size value or a memory index, then it could cause the program to write or read outside the boundaries of the intended buffer. If the numeric value is associated with an application-level resource, such as a quantity or price for a product in an e-commerce site, then the sign extension could produce a value that is much higher (or lower) than the application's allowable range.",NA
195,"The software uses a signed primitive and performs a cast to an unsigned primitive, which can produce an unexpected value if the value of the signed primitive can not be represented using an unsigned primitive.",NA
195,It is dangerous to rely on implicit casts between signed and unsigned numbers because the result can take on an unexpected value and violate assumptions made by the program.,NA
195,"Often, functions will return negative values to indicate a failure. When the result of a function is to be used as a size parameter, using these negative return values can have unexpected results. For example, if negative size values are passed to the standard memory copy or allocation functions they will be implicitly cast to a large unsigned value. This may lead to an exploitable buffer overflow or underflow condition.",NA
195,"Conversion between signed and unsigned values can lead to a variety of errors, but from a security standpoint is most commonly associated with integer overflow and buffer overflow vulnerabilities.",NA
196,"The software uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value if the value of the unsigned primitive can not be represented using a signed primitive.",NA
196,"Although less frequent an issue than signed-to-unsigned conversion, unsigned-to-signed conversion can be the perfect precursor to dangerous buffer underwrite conditions that allow attackers to move down the stack where they otherwise might not have access in a normal buffer overflow condition. Buffer underwrites occur frequently when large unsigned values are cast to signed values, and then used as indexes into a buffer or for pointer arithmetic.",NA
196,"Incorrect sign conversions generally lead to undefined behavior, and therefore crashes.",NA
196,"If a poor cast lead to a buffer overflow or similar condition, data integrity may be affected.",NA
196,Improper signed-to-unsigned conversions without proper checking can sometimes trigger buffer overflows which can be used to execute arbitrary code. This is usually outside the scope of a program's implicit security policy.,NA
197,Truncation errors occur when a primitive is cast to a primitive of a smaller size and data is lost in the conversion.,NA
197,"When a primitive is cast to a smaller primitive, the high order bits of the large value are lost in the conversion, potentially resulting in an unexpected value that is not equal to the original value. This value may be required as an index into a buffer, a loop iterator, or simply necessary state data. In any case, the value cannot be trusted and the system will be in an undefined state. While this method may be employed viably to isolate the low bits of a value, this usage is rare, and truncation usually implies that an implementation error has occurred.",NA
197,The true value of the data is lost and corrupted data is used.,NA
198,"The software receives input from an upstream component, but it does not account for byte ordering (e.g. big-endian and little-endian) when processing the input, causing an incorrect number or value to be used.",NA
20,The product does not validate or incorrectly validates input that can affect the control flow or data flow of a program.,NA
20,"When software does not validate input properly, an attacker is able to craft the input in a form that is not expected by the rest of the application. This will lead to parts of the system receiving unintended input, which may result in altered control flow, arbitrary control of a resource, or arbitrary code execution.",NA
20,"An attacker could provide unexpected values and cause a program crash or excessive consumption of resources, such as memory and CPU.",NA
20,An attacker could read confidential data if they are able to control resource references.,NA
20,"An attacker could use malicious input to modify data or possibly alter control flow in unexpected ways, including arbitrary command execution.",NA
200,The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.,NA
200,"There are many different kinds of mistakes that introduce information exposures. The severity of the error can range widely, depending on the context in which the product operates, the type of sensitive information that is revealed, and the benefits it may provide to an attacker.  Some kinds of sensitive information include:",NA
200,"Information might be sensitive to different parties, each of which may have their own expectations for whether the information should be protected.  These parties include:",NA
200,Information exposures can occur in different ways:,NA
201,"The code transmits data to another actor, but the data contains sensitive information that should not be accessible to the actor that is receiving the data.",NA
201,"Sensitive information could include data that is sensitive in and of itself (such as credentials or private messages), or otherwise useful in the further exploitation of the system (such as internal file system structure). ",NA
201,Sensitive data may be exposed to attackers.,NA
201,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
202,"When trying to keep information confidential, an attacker can often infer some of the information by using statistics.",NA
202,"In situations where data should not be tied to individual users, but a large number of users should be able to make queries that ""scrub"" the identity of users, it may be possible to get information about a user -- e.g., by specifying search terms that are known to be unique to that user.",NA
202,Sensitive information may possibly be leaked through data queries accidentally.,NA
203,"The product behaves differently or sends different responses under different circumstances in a way that is observable to an unauthorized actor, which exposes security-relevant information about the state of the product, such as whether a particular operation was successful or not.",NA
203,"Discrepancies can take many forms and include things like responses, timing, control flow, or general behavior. These discrepancies can reveal information about the product's operation or internal state to an unauthorized actor. In some cases, discrepancies can be used by attackers to form a side channel.",NA
203,"An attacker can gain access to sensitive information about the system, including authentication information that may allow an attacker to gain access to the system.",NA
203,Crypto primitives being vulnerable to side-channel-attacks could render the supposedly encrypted data unencrypted plaintext in the worst case. This would compromise any security property.,NA
204,The product provides different responses to incoming requests in a way that reveals internal state information to an unauthorized actor outside of the intended control sphere.,NA
204,"This issue frequently occurs during authentication, where a difference in failed-login messages could allow an attacker to determine if the username is valid or not. These exposures can be inadvertent (bug) or intentional (design).",NA
205,"The product's behaviors indicate important differences that may be observed by unauthorized actors in a way that reveals (1) its internal state or decision process, or (2) differences from other products with equivalent functionality.",NA
205,"   Ideally, a product should provide as little information about its internal operations as possible.  Otherwise, attackers could use knowledge of these internal operations to simplify or optimize their attack.  In some cases, behavioral discrepancies can be used by attackers to form a side channel.",NA
206,"The product performs multiple behaviors that are combined to produce a single result, but the individual behaviors are observable separately in a way that allows attackers to reveal internal state or internal decision points.",NA
206,"   Ideally, a product should provide as little information as possible to an attacker.  Any hints that the attacker may be making progress can then be used to simplify or optimize the attack.  For example, in a login procedure that requires a username and password, ultimately there is only one decision: success or failure.  However, internally, two separate actions are performed: determining if the username exists, and checking if the password is correct.  If the product behaves differently based on whether the username exists or not, then the attacker only needs to concentrate on the password. ",NA
207,"The product operates in an environment in which its existence or specific identity should not be known, but it behaves differently than other products with equivalent functionality, in a way that is observable to an attacker.",NA
207,"   For many kinds of products, multiple products may be available that perform the same functionality, such as a web server, network interface, or intrusion detection system.  Attackers often perform ""fingerprinting,"" which uses discrepancies in order to identify which specific product is in use.  Once the specific product has been identified, the attacks can be made more customized and efficient.  Often, an organization might intentionally allow the specific product to be identifiable.  However, in some environments, the ability to identify a distinct product is unacceptable, and it is expected that every product would behave in exactly the same way.  In these more restricted environments, a behavioral difference might pose an unacceptable risk if it makes it easier to identify the product's vendor, model, configuration, version, etc. ",NA
208,"Two separate operations in a product require different amounts of time to complete, in a way that is observable to an actor and reveals security-relevant information about the state of the product, such as whether a particular operation was successful or not.",NA
208,"   In security-relevant contexts, even small variations in timing can be exploited by attackers to indirectly infer certain details about the product's internal operations.  For example, in some cryptographic algorithms, attackers can use timing differences to infer certain properties about a private key, making the key easier to guess.  Timing discrepancies effectively form a timing side channel. ",NA
208,COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.,NA
209,"The software generates an error message that includes sensitive information about its environment, users, or associated data.",NA
209,"The sensitive information may be valuable information on its own (such as a password), or it may be useful for launching other, more serious attacks. The error message may be created in different ways:",NA
209,"An attacker may use the contents of error messages to help launch another, more focused attack. For example, an attempt to exploit a path traversal weakness (CWE-22) might yield the full pathname of the installed application. In turn, this could be used to select the proper number of "".."" sequences to navigate to the targeted file. An attack using SQL injection (CWE-89) might not initially succeed, but an error message could reveal the malformed query, which would expose query logic and possibly even passwords or other sensitive information used within the query.",NA
209,Often this will either reveal sensitive information which may be used for a later attack or private information stored in the server.,NA
209,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
210,The software identifies an error condition and creates its own diagnostic or error messages that contain sensitive information.,NA
210,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
211,"The application performs an operation that triggers an external diagnostic or error message that is not directly generated or controlled by the application, such as an error generated by the programming language interpreter that the software uses. The error can contain sensitive system information.",NA
211,"PHP applications are often targeted for having this issue when the PHP interpreter generates the error outside of the application's control. However, other languages/environments exhibit the same issue.",NA
211,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
212,"The product stores, transfers, or shares a resource that contains sensitive information, but it does not properly remove that information before the product makes the resource available to unauthorized actors.",NA
212,"Resources that may contain sensitive data include documents, packets, messages, databases, etc. While this data may be useful to an individual user or small set of users who share the resource, it may need to be removed before the resource can be shared outside of the trusted group. The process of removal is sometimes called cleansing or scrubbing.",NA
212,"For example, software that is used for editing documents might not remove sensitive data such as reviewer comments or the local pathname where the document is stored. Or, a proxy might not remove an internal IP address from headers before making an outgoing request to an Internet site.",NA
212,"Sensitive data may be exposed to an unauthorized actor in another control sphere. This may have a wide range of secondary consequences which will depend on what data is exposed. One possibility is the exposure of system data allowing an attacker to craft a specific, more effective attack.",NA
212,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
213,"The product's intended functionality exposes information to certain actors in accordance with the developer's security policy, but this information is regarded as sensitive according to the intended security policies of other stakeholders such as the product's administrator, users, or others whose information is being processed.",NA
213,"This can occur when the product's policy does not account for all relevant stakeholders, or when the policies of other stakeholders are not interpreted properly.",NA
213,This can occur when requirements do not explicitly account for all relevant stakeholders.,NA
213,Communications or data exchange frameworks may be chosen that exchange or provide access to more information than strictly needed.,NA
213,"This can occur when the developer does not properly track the flow of sensitive information and how it is exposed, e.g., via an API.",NA
214,"A process is invoked with sensitive command-line arguments, environment variables, or other elements that can be seen by other processes on the operating system.",NA
214,"Many operating systems allow a user to list information about processes that are owned by other users. Other users could see information such as command line arguments or environment variable settings. When this data contains sensitive information such as credentials, it might allow other users to launch an attack against the software or related resources.",NA
214,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
215,"The application inserts sensitive information into debugging code, which could expose this information if the debugging code is not disabled in production.",NA
215,"When debugging, it may be necessary to report detailed information to the programmer.  However, if the debugging code is not disabled when the application is operating in a production environment, then this sensitive information may be exposed to attackers. ",NA
216,"This entry has been deprecated, as it was not effective as a weakness and was structured more like a category. In addition, the name is inappropriate, since the ""container"" term is widely understood by developers in different ways than originally intended by PLOVER, the original source for this entry.",NA
217,This weakness has been deprecated because it incorporated and confused multiple weaknesses. The issues formerly covered in this weakness can be found at CWE-766 and CWE-767.,NA
218,This weakness has been deprecated because it was a duplicate of CWE-493. All content has been transferred to CWE-493.,NA
219,"The application stores sensitive data under the web document root with insufficient access control, which might make it accessible to untrusted parties.",NA
219,"   Besides public-facing web pages and code, applications may store sensitive data, code that is not directly invoked, or other files under the web document root of the web server.  If the server is not configured or otherwise used to prevent direct access to those files, then attackers may obtain this sensitive data. ",NA
219,COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.,NA
219,COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.,NA
22,"The software uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the software does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.",NA
22,"Many file operations are intended to take place within a restricted directory. By using special elements such as "".."" and ""/"" separators, attackers can escape outside of the restricted location to access files or directories that are elsewhere on the system. One of the most common special elements is the ""../"" sequence, which in most modern operating systems is interpreted as the parent directory of the current location. This is referred to as relative path traversal. Path traversal also covers the use of absolute pathnames such as ""/usr/local/bin"", which may also be useful in accessing unexpected files. This is referred to as absolute path traversal.",NA
22,"In many programming languages, the injection of a null byte (the 0 or NUL) may allow an attacker to truncate a generated filename to widen the scope of attack. For example, the software may add "".txt"" to any pathname, thus limiting the attacker to text files, but a null injection may effectively remove this restriction.",NA
22,"The attacker may be able to create or overwrite critical files that are used to execute code, such as programs or libraries.",NA
22,"The attacker may be able to overwrite or create critical files, such as programs, libraries, or important data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, appending a new account at the end of a password file may allow an attacker to bypass authentication.",NA
22,"The attacker may be able read the contents of unexpected files and expose sensitive data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, by reading a password file, the attacker could conduct brute force password guessing attacks in order to break into an account on the system.",NA
22,"The attacker may be able to overwrite, delete, or corrupt unexpected critical files such as programs, libraries, or important data. This may prevent the software from working at all and in the case of a protection mechanisms such as authentication, it has the potential to lockout every user of the software.",NA
220,"The application stores sensitive data under the FTP server root with insufficient access control, which might make it accessible to untrusted parties.",NA
220,"Various Unix FTP servers require a password file that is under the FTP root, due to use of chroot.",NA
220,COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.,NA
221,"The software does not record, or improperly records, security-relevant information that leads to an incorrect decision or hampers later analysis.",NA
221,"This can be resultant, e.g. a buffer overflow might trigger a crash before the product can log the event.",NA
222,"The application truncates the display, recording, or processing of security-relevant information in a way that can obscure the source or nature of an attack.",NA
222,The source of an attack will be difficult or impossible to determine. This can allow attacks to the system to continue without notice.,NA
223,"The application does not record or display information that would be important for identifying the source or nature of an attack, or determining if an action is safe.",NA
223,The source of an attack will be difficult or impossible to determine. This can allow attacks to the system to continue without notice.,NA
223,OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.,NA
224,"The software records security-relevant information according to an alternate name of the affected entity, instead of the canonical name.",NA
224,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
225,This weakness can be found at CWE-199.,NA
226,"The product prepares to release a resource such as memory or a file so that the resource can be reused by other entities, but the product does not fully clear previously-used sensitive information from that resource before the resource is released.",NA
226,"When resources are released, they can be made available to other parties for reuse.  For example, after memory is used and released, an operating system may make the memory available to another process, or disk space may be reallocated when a file is deleted.  It is not necessarily guaranteed that the operating system will re-initialize the resource or otherwise remove the original contents.",NA
226,"Even when the resource is reused by the same process, this weakness can arise when new data is not as large as the old data, which leaves portions of the old data still available. Equivalent errors can occur in other situations where the length of data is variable but the associated data structure is not. If memory is not cleared after use, it may allow unintended actors to read the data when the memory is reallocated.",NA
228,The product does not handle or incorrectly handles input that is not syntactically well-formed with respect to the associated specification.,NA
228,"If an input is syntactically invalid, then processing the input could place the system in an unexpected state that could lead to a crash, consume available system resources or other unintended behaviors.",NA
229,"The software does not properly handle when the expected number of values for parameters, fields, or arguments is not provided in input, or if those values are undefined.",NA
23,"The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as "".."" that can resolve to a location that is outside of that directory.",NA
23,This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.,NA
23,"The attacker may be able to create or overwrite critical files that are used to execute code, such as programs or libraries.",NA
23,"The attacker may be able to overwrite or create critical files, such as programs, libraries, or important data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, appending a new account at the end of a password file may allow an attacker to bypass authentication.",NA
23,"The attacker may be able read the contents of unexpected files and expose sensitive data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, by reading a password file, the attacker could conduct brute force password guessing attacks in order to break into an account on the system.",NA
23,"The attacker may be able to overwrite, delete, or corrupt unexpected critical files such as programs, libraries, or important data. This may prevent the software from working at all and in the case of a protection mechanisms such as authentication, it has the potential to lockout every user of the software.",NA
230,"The software does not handle or incorrectly handles when a parameter, field, or argument name is specified, but the associated value is missing, i.e. it is empty, blank, or null.",NA
231,The software does not handle or incorrectly handles when more values are provided than expected.,NA
231,This typically occurs in situations when only one value is expected.,NA
232,"The software does not handle or incorrectly handles when a value is not defined or supported for the associated parameter, field, or argument name.",NA
233,"The software does not properly handle when the expected number of parameters, fields, or arguments is not provided in input, or if those parameters are undefined.",NA
234,"If too few arguments are sent to a function, the function will still pop the expected number of arguments from the stack. Potentially, a variable number of arguments could be exhausted in a function as well.",NA
234,There is the potential for arbitrary code execution with privileges of the vulnerable program if function parameter list is exhausted.,NA
234,Potentially a program could fail if it needs more arguments then are available.,NA
235,"The software does not handle or incorrectly handles when the number of parameters, fields, or arguments with the same name exceeds the expected amount.",NA
235,This typically occurs in situations when only one element is expected to be specified.,NA
236,"The software does not handle or incorrectly handles when a particular parameter, field, or argument name is not defined or supported by the product.",NA
237,The software does not handle or incorrectly handles inputs that are related to complex structures.,NA
238,The software does not handle or incorrectly handles when a particular structural element is not completely specified.,NA
239,The software does not properly handle when a particular element is not completely specified.,NA
24,"The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize ""../"" sequences that can resolve to a location that is outside of that directory.",NA
24,This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.,NA
24,"The ""../"" manipulation is the canonical manipulation for operating systems that use ""/"" as directory separators, such as UNIX- and Linux-based systems. In some cases, it is useful for bypassing protection schemes in environments for which ""/"" is supported but not the primary separator, such as Windows, which uses ""\"" but can also accept ""/"".",NA
240,"The software does not handle or incorrectly handles when two or more structural elements should be consistent, but are not.",NA
241,"The software does not handle or incorrectly handles when a particular element is not the expected type, e.g. it expects a digit (0-9) but is provided with a letter (A-Z).",NA
242,The program calls a function that can never be guaranteed to work safely.,NA
242,"Certain functions behave in dangerous ways regardless of how they are used. Functions in this category were often implemented without taking security concerns into account. The gets() function is unsafe because it does not perform bounds checking on the size of its input. An attacker can easily send arbitrarily-sized input to gets() and overflow the destination buffer. Similarly, the >> operator is unsafe to use when reading into a statically-allocated character array because it does not perform bounds checking on the size of its input. An attacker can easily send arbitrarily-sized input to the >> operator and overflow the destination buffer.",NA
243,"The program uses the chroot() system call to create a jail, but does not change the working directory afterward. This does not prevent access to files outside of the jail.",NA
243,"Improper use of chroot() may allow attackers to escape from the chroot jail. The chroot() function call does not change the process's current working directory, so relative paths may still refer to file system resources outside of the chroot jail after chroot() has been called.",NA
243,"The chroot() system call allows a process to change its perception of the root directory of the file system. After properly invoking chroot(), a process cannot access any files outside the directory tree defined by the new root directory. Such an environment is called a chroot jail and is commonly used to prevent the possibility that a processes could be subverted and used to access unauthorized files. For instance, many FTP servers run in chroot jails to prevent an attacker who discovers a new vulnerability in the server from being able to download the password file or other sensitive files on the system.",NA
243,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
244,"Using realloc() to resize buffers that store sensitive information can leave the sensitive information exposed to attack, because it is not removed from memory.",NA
244,"When sensitive data such as a password or an encryption key is not removed from memory, it could be exposed to an attacker using a ""heap inspection"" attack that reads the sensitive data using memory dumps or other methods. The realloc() function is commonly used to increase the size of a block of allocated memory. This operation often requires copying the contents of the old memory block into a new and larger block. This operation leaves the contents of the original block intact but inaccessible to the program, preventing the program from being able to scrub sensitive data from memory. If an attacker can later examine the contents of a memory dump, the sensitive data could be exposed.",NA
244,Be careful using vfork() and fork() in security sensitive code. The process state will not be cleaned up and will contain traces of data from past use.,NA
245,"The J2EE application directly manages connections, instead of using the container's connection management facilities.",NA
245,"The J2EE standard forbids the direct management of connections. It requires that applications use the container's resource management facilities to obtain connections to resources. Every major web application container provides pooled database connection management as part of its resource management framework. Duplicating this functionality in an application is difficult and error prone, which is part of the reason it is forbidden under the J2EE standard.",NA
246,The J2EE application directly uses sockets instead of using framework method calls.,NA
246,The J2EE standard permits the use of sockets only for the purpose of communication with legacy systems when no higher-level protocol is available. Authoring your own communication protocol requires wrestling with difficult security issues.,NA
246,"Without significant scrutiny by a security expert, chances are good that a custom communication protocol will suffer from security problems. Many of the same issues apply to a custom implementation of a standard protocol. While there are usually more resources available that address security concerns related to implementing a standard protocol, these resources are also available to attackers.",NA
247,This entry has been deprecated because it was a duplicate of CWE-350. All content has been transferred to CWE-350.,NA
248,"An exception is thrown from a function, but it is not caught.",NA
248,"When an exception is not caught, it may cause the program to crash or expose sensitive information.",NA
248,"An uncaught exception could cause the system to be placed in a state that could lead to a crash, exposure of sensitive information or other unintended behaviors.",NA
249,This entry has been deprecated because of name confusion and an accidental combination of multiple weaknesses. Most of its content has been transferred to CWE-785.,NA
25,"The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize ""/../"" sequences that can resolve to a location that is outside of that directory.",NA
25,This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.,NA
25,"Sometimes a program checks for ""../"" at the beginning of the input, so a ""/../"" can bypass that check.",NA
250,"The software performs an operation at a privilege level that is higher than the minimum level required, which creates new weaknesses or amplifies the consequences of other weaknesses.",NA
250,"New weaknesses can be exposed because running with extra privileges, such as root or Administrator, can disable the normal security checks being performed by the operating system or surrounding environment. Other pre-existing weaknesses can turn into security vulnerabilities if they occur while operating at raised privileges.",NA
250,"Privilege management functions can behave in some less-than-obvious ways, and they have different quirks on different platforms. These inconsistencies are particularly pronounced if you are transitioning from one non-root user to another. Signal handlers and spawned processes run at the privilege of the owning process, so if a process is running as root when a signal fires or a sub-process is executed, the signal handler or sub-process will operate with root privileges.",NA
250,"An attacker will be able to gain access to any resources that are allowed by the extra privileges. Common results include executing code, disabling services, and reading restricted data.",NA
252,"The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.",NA
252,"Two common programmer assumptions are ""this function call can never fail"" and ""it doesn't matter if this function call fails"". If an attacker can force the function to fail or otherwise return a value that is not expected, then the subsequent program logic could lead to a vulnerability, because the software is not in a state that the programmer assumes. For example, if the program calls a function to drop privileges but does not check the return code to ensure that privileges were successfully dropped, then the program will continue to operate with the higher privileges.",NA
252,Many functions will return some value about the success of their actions. This will alert the program whether or not to handle any errors caused by that function.,NA
252,An unexpected return value could place the system in a state that could lead to a crash or other unintended behaviors.,NA
253,"The software incorrectly checks a return value from a function, which prevents the software from detecting errors or exceptional conditions.",NA
253,Important and common functions will return some value about the success of its actions. This will alert the program whether or not to handle any errors caused by that function.,NA
253,An unexpected return value could place the system in a state that could lead to a crash or other unintended behaviors.,NA
256,Storing a password in plaintext may result in a system compromise.,NA
256,Password management issues occur when a password is stored in plaintext in an application's properties or configuration file. Storing a plaintext password in a configuration file allows anyone who can read the file access to the password-protected resource.,NA
256,OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.,NA
256,"Developers sometimes believe that they cannot defend the application from someone who has access to the configuration, but this belief makes an attacker's job easier.",NA
257,"The storage of passwords in a recoverable format makes them subject to password reuse attacks by malicious users. In fact, it should be noted that recoverable encrypted passwords provide no significant benefit over plaintext passwords since they are subject not only to reuse by malicious attackers but also by malicious insiders. If a system administrator can recover a password directly, or use a brute force search on the available information, the administrator can use the password on other accounts.",NA
257,User's passwords may be revealed.,NA
257,Revealed passwords may be reused elsewhere to impersonate the users in question.,NA
257,COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.,NA
258,Using an empty string as a password is insecure.,NA
258,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
259,"The software contains a hard-coded password, which it uses for its own inbound authentication or for outbound communication to external components.",NA
259,"A hard-coded password typically leads to a significant authentication failure that can be difficult for the system administrator to detect. Once detected, it can be difficult to fix, so the administrator may be forced into disabling the product entirely. There are two main variations:",NA
259,"In the Inbound variant, a default administration account is created, and a simple password is hard-coded into the product and associated with that account. This hard-coded password is the same for each installation of the product, and it usually cannot be changed or disabled by system administrators without manually modifying the program, or otherwise patching the software. If the password is ever discovered or published (a common occurrence on the Internet), then anybody with knowledge of this password can access the product. Finally, since all installations of the software will have the same password, even across different organizations, this enables massive attacks such as worms to take place.",NA
259,"The Outbound variant applies to front-end systems that authenticate with a back-end service. The back-end service may require a fixed password which can be easily discovered. The programmer may simply hard-code those back-end credentials into the front-end software. Any user of that program may be able to extract the password. Client-side systems with hard-coded passwords pose even more of a threat, since the extraction of a password from a binary is usually very simple.",NA
259,"If hard-coded passwords are used, it is almost certain that malicious users will gain access through the account in question.",NA
259,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
26,"The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize ""/dir/../filename"" sequences that can resolve to a location that is outside of that directory.",NA
26,This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.,NA
26,"The '/dir/../filename' manipulation is useful for bypassing some path traversal protection schemes. Sometimes a program only checks for ""../"" at the beginning of the input, so a ""/../"" can bypass that check.",NA
260,The software stores a password in a configuration file that might be accessible to actors who do not know the password.,NA
260,"This can result in compromise of the system for which the password is used. An attacker could gain access to this file and learn the stored password or worse yet, change the password to one of their choosing.",NA
260,OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.,NA
261,Obscuring a password with a trivial encoding does not protect the password.,NA
261,"Password management issues occur when a password is stored in plaintext in an application's properties or configuration file. A programmer can attempt to remedy the password management problem by obscuring the password with an encoding function, such as base 64 encoding, but this effort does not adequately protect the password.",NA
261,COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.,NA
262,"If no mechanism is in place for managing password aging, users will have no incentive to update passwords in a timely manner.",NA
262,"Security experts have often recommended that users change their passwords regularly and avoid reusing passwords. Although this can be an effective mitigation, if the expiration window is too short, it can cause users to generate poor or predictable passwords. As such, it is important to discourage creating similar passwords. It is also useful to have a password aging mechanism that notifies users when passwords are considered old and requests that they replace them with new, strong passwords. Companion documentation which stresses how important this practice is can help users understand and better support this approach.",NA
262,"As passwords age, the probability that they are compromised grows.",NA
262,COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.,NA
263,Allowing password aging to occur unchecked can result in the possibility of diminished password integrity.,NA
263,"Just as neglecting to include functionality for the management of password aging is dangerous, so is allowing password aging to continue unchecked. Passwords must be given a maximum life span, after which a user is required to update with a new and different password.",NA
263,"As passwords age, the probability that they are compromised grows.",NA
263,COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.,NA
266,"A product incorrectly assigns a privilege to a particular actor, creating an unintended sphere of control for that actor.",NA
266,A user can access restricted functionality and/or sensitive information that may include administrative functionality and user accounts.,NA
266,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
267,"A particular privilege, role, capability, or right can be used to perform unsafe actions that were not intended, even when it is assigned to the correct entity.",NA
267,A user can access restricted functionality and/or sensitive information that may include administrative functionality and user accounts.,NA
267,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
268,"Two distinct privileges, roles, capabilities, or rights can be combined in a way that allows an entity to perform unsafe actions that would not be allowed without that combination.",NA
268,A user can be given or gain access rights of another user. This can give the user unauthorized access to sensitive information including the access information of another user.,NA
268,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
269,"The software does not properly assign, modify, track, or check privileges for an actor, creating an unintended sphere of control for that actor.",NA
269,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
27,"The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize multiple internal ""../"" sequences that can resolve to a location that is outside of that directory.",NA
27,This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.,NA
27,"The 'directory/../../filename' manipulation is useful for bypassing some path traversal protection schemes. Sometimes a program only removes one ""../"" sequence, so multiple ""../"" can bypass that check. Alternately, this manipulation could be used to bypass a check for ""../"" at the beginning of the pathname, moving up more than one directory level.",NA
270,The software does not properly manage privileges while it is switching between different contexts that have different privileges or spheres of control.,NA
270,A user can assume the identity of another user with separate privileges in another context. This will give the user unauthorized access that may allow them to acquire the access information of other users.,NA
270,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
271,The software does not drop privileges before passing control of a resource to an actor that does not have those privileges.,NA
271,"In some contexts, a system executing with elevated permissions will hand off a process/file/etc. to another process or user. If the privileges of an entity are not reduced, then elevated privileges are spread throughout a system and possibly to an attacker.",NA
271,"If privileges are not dropped, neither are access rights of the user. Often these rights can be prevented from being dropped.",NA
271,"If privileges are not dropped, in some cases the system may record actions as the user which is being impersonated rather than the impersonator.",NA
271,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
272,The elevated privilege level required to perform operations such as chroot() should be dropped immediately after the operation is performed.,NA
272,"An attacker may be able to access resources with the elevated privilege that could not be accessed with the attacker's original privileges. This is particularly likely in conjunction with another flaw, such as a buffer overflow.",NA
272,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
273,The software attempts to drop privileges but does not check or incorrectly checks to see if the drop succeeded.,NA
273,"If the drop fails, the software will continue to run with the raised privileges, which might provide additional access to unprivileged users.",NA
273,"In Windows based environments that have access control, impersonation is used so that access checks can be performed on a client identity by a server with higher privileges. By impersonating the client, the server is restricted to client-level security -- although in different threads it may have much higher privileges.",NA
273,"If privileges are not dropped, neither are access rights of the user. Often these rights can be prevented from being dropped.",NA
273,"If privileges are not dropped, in some cases the system may record actions as the user which is being impersonated rather than the impersonator.",NA
274,"The software does not handle or incorrectly handles when it has insufficient privileges to perform an operation, leading to resultant weaknesses.",NA
274,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
276,"The product, upon installation, sets incorrect permissions for an object that exposes it to an unintended actor.",NA
276,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
277,A product defines a set of insecure permissions that are inherited by objects that are created by the program.,NA
277,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
278,"A product inherits a set of insecure permissions for an object, e.g. when copying from an archive file, without user awareness or involvement.",NA
279,"While it is executing, the software sets the permissions of an object in a way that violates the intended permissions that have been specified by the user.",NA
279,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
28,"The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize ""..\"" sequences that can resolve to a location that is outside of that directory.",NA
28,This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.,NA
28,"The '..\' manipulation is the canonical manipulation for operating systems that use ""\"" as directory separators, such as Windows. However, it is also useful for bypassing path traversal protection schemes that only assume that the ""/"" separator is valid.",NA
280,The application does not handle or incorrectly handles when it has insufficient privileges to access resources or functionality as specified by their permissions. This may cause it to follow unexpected code paths that may leave the application in an invalid state.,NA
280,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
281,"The software does not preserve permissions or incorrectly preserves permissions when copying, restoring, or sharing objects, which can cause them to have less restrictive permissions than intended.",NA
281,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
282,"The software assigns the wrong ownership, or does not properly verify the ownership, of an object or resource.",NA
282,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
283,The software does not properly verify that a critical resource is owned by the proper entity.,NA
283,An attacker could gain unauthorized access to system resources.,NA
283,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
284,The software does not restrict or incorrectly restricts access to a resource from an unauthorized actor.,NA
284,Access control involves the use of several protection mechanisms such as:,NA
284,"When any mechanism is not applied or otherwise fails, attackers can compromise the security of the software by gaining privileges, reading sensitive information, executing commands, evading detection, etc.",NA
284,There are two distinct behaviors that can introduce access control weaknesses:,NA
284,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
285,The software does not perform or incorrectly performs an authorization check when an actor attempts to access a resource or perform an action.,NA
285,"Assuming a user with a given identity, authorization is the process of determining whether that user can access a given resource, based on the user's privileges and any permissions or other access-control specifications that apply to the resource.",NA
285,"When access control checks are not applied consistently - or not at all - users are able to access data or perform actions that they should not be allowed to perform. This can lead to a wide range of problems, including information exposures, denial of service, and arbitrary code execution.",NA
285,"An access control list (ACL) represents who/what has permissions to a given object. Different operating systems implement (ACLs) in different ways. In UNIX, there are three types of permissions: read, write, and execute. Users are divided into three classes for file access: owner, group owner, and all other users where each class has a separate set of rights. In Windows NT, there are four basic types of permissions for files: ""No access"", ""Read access"", ""Change access"", and ""Full control"". Windows NT extends the concept of three types of users in UNIX to include a list of users and groups along with their associated permissions. A user can create an object (file) and assign specified permissions to that object.",NA
285,"An attacker could read sensitive data, either by reading the data directly from a data store that is not properly restricted, or by accessing insufficiently-protected, privileged functionality to read the data.",NA
285,"An attacker could modify sensitive data, either by writing the data directly to a data store that is not properly restricted, or by accessing insufficiently-protected, privileged functionality to write the data.",NA
285,"An attacker could gain privileges by modifying or reading critical data directly, or by accessing insufficiently-protected, privileged functionality.",NA
286,The software does not properly manage a user within its environment.,NA
286,Users can be assigned to the wrong group (class) of permissions resulting in unintended access rights to sensitive objects.,NA
286,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
287,"When an actor claims to have a given identity, the software does not prove or insufficiently proves that the claim is correct.",NA
287,"This weakness can lead to the exposure of resources or functionality to unintended actors, possibly providing attackers with sensitive information or even execute arbitrary code.",NA
287,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
288,"A product requires authentication, but the product has an alternate path or channel that does not require authentication.",NA
288,COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.,NA
288,"This is often seen in web applications that assume that access to a particular CGI program can only be obtained through a ""front"" screen, when the supporting programs are directly accessible. But this problem is not just in web apps.",NA
289,"The software performs authentication based on the name of a resource being accessed, or the name of the actor performing the access, but it does not properly check all possible names for that resource or actor.",NA
289,COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.,NA
29,"The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '\..\filename' (leading backslash dot dot) sequences that can resolve to a location that is outside of that directory.",NA
29,This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.,NA
29,"This is similar to CWE-25, except using ""\"" instead of ""/"". Sometimes a program checks for ""..\"" at the beginning of the input, so a ""\..\"" can bypass that check. It is also useful for bypassing path traversal protection schemes that only assume that the ""/"" separator is valid.",NA
290,This attack-focused weakness is caused by improperly implemented authentication schemes that are subject to spoofing attacks.,NA
290,This weakness can allow an attacker to access resources which are not otherwise accessible without proper authentication.,NA
290,COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.,NA
291,The software uses an IP address for authentication.,NA
291,"IP addresses can be easily spoofed. Attackers can forge the source IP address of the packets they send, but response packets will return to the forged IP address. To see the response packets, the attacker has to sniff the traffic between the victim machine and the forged IP address. In order to accomplish the required sniffing, attackers typically attempt to locate themselves on the same subnet as the victim machine. Attackers may be able to circumvent this requirement by using source routing, but source routing is disabled across much of the Internet today. In summary, IP address verification can be a useful part of an authentication scheme, but it should not be the single factor required for authentication.",NA
291,"Malicious users can fake authentication information, impersonating any IP address.",NA
291,COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.,NA
292,This entry has been deprecated because it was a duplicate of CWE-350. All content has been transferred to CWE-350.,NA
293,"The referer field in HTTP requests can be easily modified and, as such, is not a valid means of message integrity checking.",NA
293,"The referer field in HTML requests can be simply modified by malicious users, rendering it useless as a means of checking the validity of the request in question.",NA
293,"Actions, which may not be authorized otherwise, can be carried out as if they were validated by the server referred to.",NA
293,COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.,NA
294,A capture-replay flaw exists when the design of the software makes it possible for a malicious user to sniff network traffic and bypass authentication by replaying it to the server in question to the same effect as the original message (or with minor changes).,NA
294,"Capture-replay attacks are common and can be difficult to defeat without cryptography. They are a subset of network injection attacks that rely on observing previously-sent valid commands, then changing them slightly if necessary and resending the same commands to the server.",NA
294,Messages sent with a capture-relay attack allow access to resources which are not otherwise accessible without proper authentication.,NA
294,COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.,NA
295,"The software does not validate, or incorrectly validates, a certificate.",NA
295,"When a certificate is invalid or malicious, it might allow an attacker to spoof a trusted entity by interfering in the communication path between the host and client. The software might connect to a malicious host while believing it is a trusted host, or the software might be deceived into accepting spoofed data that appears to originate from a trusted host.",NA
295,A certificate is a token that associates an identity (principal) to a cryptographic key. Certificates can be used to check if a public key belongs to the assumed owner.,NA
295,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
295,"When the software uses certificate pinning, the developer might not properly validate all relevant components of the certificate before pinning the certificate. This can make it difficult or expensive to test after the pinning is complete.",NA
296,"The software does not follow, or incorrectly follows, the chain of trust for a certificate back to a trusted root certificate, resulting in incorrect trust of any resource that is associated with that certificate.",NA
296,"If a system does not follow the chain of trust of a certificate to a root server, the certificate loses all usefulness as a metric of trust. Essentially, the trust gained from a certificate is derived from a chain of trust -- with a reputable trusted entity at the end of that list. The end user must trust that reputable source, and this reputable source must vouch for the resource in question through the medium of the certificate.",NA
296,"In some cases, this trust traverses several entities who vouch for one another. The entity trusted by the end user is at one end of this trust chain, while the certificate-wielding resource is at the other end of the chain. If the user receives a certificate at the end of one of these trust chains and then proceeds to check only that the first link in the chain, no real trust has been derived, since the entire chain must be traversed back to a trusted source to verify the certificate.",NA
296,"There are several ways in which the chain of trust might be broken, including but not limited to:",NA
296,Exploitation of this flaw can lead to the trust of data that may have originated with a spoofed source.,NA
296,"Data, requests, or actions taken by the attacking entity can be carried out as a spoofed benign entity.",NA
296,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
296,"When the software uses certificate pinning, the developer might not properly validate all relevant components of the certificate before pinning the certificate. This can make it difficult or expensive to test after the pinning is complete.",NA
297,"The software communicates with a host that provides a certificate, but the software does not properly ensure that the certificate is actually associated with that host.",NA
297,"Even if a certificate is well-formed, signed, and follows the chain of trust, it may simply be a valid certificate for a different site than the site that the software is interacting with. If the certificate's host-specific data is not properly checked - such as the Common Name (CN) in the Subject or the Subject Alternative Name (SAN) extension of an X.509 certificate - it may be possible for a redirection or spoofing attack to allow a malicious host with a valid certificate to provide data, impersonating a trusted host. In order to ensure data integrity, the certificate must be valid and it must pertain to the site that is being accessed.",NA
297,"Even if the software attempts to check the hostname, it is still possible to incorrectly check the hostname. For example, attackers could create a certificate with a name that begins with a trusted name followed by a NUL byte, which could cause some string-based comparisons to only examine the portion that contains the trusted name.",NA
297,"This weakness can occur even when the software uses Certificate Pinning, if the software does not verify the hostname at the time a certificate is pinned.",NA
297,The data read from the system vouched for by the certificate may not be from the expected system.,NA
297,Trust afforded to the system in question - based on the malicious certificate - may allow for spoofing or redirection attacks.,NA
297,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
297,"When the software uses certificate pinning, the developer might not properly validate all relevant components of the certificate before pinning the certificate. This can make it difficult or expensive to test after the pinning is complete.",NA
298,"A certificate expiration is not validated or is incorrectly validated, so trust may be assigned to certificates that have been abandoned due to age.",NA
298,"When the expiration of a certificate is not taken into account, no trust has necessarily been conveyed through it. Therefore, the validity of the certificate cannot be verified and all benefit of the certificate is lost.",NA
298,The data read from the system vouched for by the expired certificate may be flawed due to malicious spoofing.,NA
298,Trust afforded to the system in question - based on the expired certificate - may allow for spoofing attacks.,NA
298,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
298,"When the software uses certificate pinning, the developer might not properly validate all relevant components of the certificate before pinning the certificate. This can make it difficult or expensive to test after the pinning is complete.",NA
299,"The software does not check or incorrectly checks the revocation status of a certificate, which may cause it to use a certificate that has been compromised.",NA
299,"An improper check for certificate revocation is a far more serious flaw than related certificate failures. This is because the use of any revoked certificate is almost certainly malicious. The most common reason for certificate revocation is compromise of the system in question, with the result that no legitimate servers will be using a revoked certificate, unless they are sorely out of sync.",NA
299,Trust may be assigned to an entity who is not who it claims to be.,NA
299,Data from an untrusted (and possibly malicious) source may be integrated.,NA
299,"Data may be disclosed to an entity impersonating a trusted entity, resulting in information disclosure.",NA
299,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
299,"When the software uses certificate pinning, the developer might not properly validate all relevant components of the certificate before pinning the certificate. This can make it difficult or expensive to test after the pinning is complete.",NA
30,"The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '\dir\..\filename' (leading backslash dot dot) sequences that can resolve to a location that is outside of that directory.",NA
30,This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.,NA
30,"This is similar to CWE-26, except using ""\"" instead of ""/"". The '\dir\..\filename' manipulation is useful for bypassing some path traversal protection schemes. Sometimes a program only checks for ""..\"" at the beginning of the input, so a ""\..\"" can bypass that check.",NA
300,"The product does not adequately verify the identity of actors at both ends of a communication channel, or does not adequately ensure the integrity of the channel, in a way that allows the channel to be accessed or influenced by an actor that is not an endpoint.",NA
300,"In order to establish secure communication between two parties, it is often important to adequately verify the identity of entities at each end of the communication channel. Inadequate or inconsistent verification may result in insufficient or incorrect identification of either communicating entity. This can have negative consequences such as misplaced trust in the entity at the other end of the channel. An attacker can leverage this by interposing between the communicating entities and masquerading as the original entity. In the absence of sufficient verification of identity, such an attacker can eavesdrop and potentially modify the communication between the original entities.",NA
300,An attacker could pose as one of the entities and read or possibly modify the communication.,NA
300,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
301,Simple authentication protocols are subject to reflection attacks if a malicious user can use the target machine to impersonate a trusted user.,NA
301,"A mutual authentication protocol requires each party to respond to a random challenge by the other party by encrypting it with a pre-shared key. Often, however, such protocols employ the same pre-shared key for communication with a number of different entities. A malicious user or an attacker can easily compromise this protocol without possessing the correct key by employing a reflection attack on the protocol.",NA
301,The primary result of reflection attacks is successful authentication with a target machine -- as an impersonated user.,NA
301,COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.,NA
302,"The authentication scheme or implementation uses key data elements that are assumed to be immutable, but can be controlled or modified by the attacker.",NA
302,COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.,NA
303,"The requirements for the software dictate the use of an established authentication algorithm, but the implementation of the algorithm is incorrect.",NA
303,This incorrect implementation may allow authentication to be bypassed.,NA
303,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
304,"The software implements an authentication technique, but it skips a step that weakens the technique.",NA
304,"Authentication techniques should follow the algorithms that define them exactly, otherwise authentication can be bypassed or more easily subjected to brute force attacks.",NA
304,"This weakness can lead to the exposure of resources or functionality to unintended actors, possibly providing attackers with sensitive information or allowing attackers to execute arbitrary code.",NA
304,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
305,"The authentication algorithm is sound, but the implemented mechanism can be bypassed as the result of a separate weakness that is primary to the authentication error.",NA
305,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
306,The software does not perform any authentication for functionality that requires a provable user identity or consumes a significant amount of resources.,NA
306,"Exposing critical functionality essentially provides an attacker with the privilege level of that functionality. The consequences will depend on the associated functionality, but they can range from reading or modifying sensitive data, access to administrative or other privileged functionality, or possibly even execution of arbitrary code.",NA
306,OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.,NA
307,"The software does not implement sufficient measures to prevent multiple failed authentication attempts within in a short time frame, making it more susceptible to brute force attacks.",NA
307,"An attacker could perform an arbitrary number of authentication attempts using different passwords, and eventually gain access to the targeted account.",NA
307,COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.,NA
308,The use of single-factor authentication can lead to unnecessary risk of compromise when compared with the benefits of a dual-factor authentication scheme.,NA
308,"While the use of multiple authentication schemes is simply piling on more complexity on top of authentication, it is inestimably valuable to have such measures of redundancy. The use of weak, reused, and common passwords is rampant on the internet. Without the added protection of multiple authentication schemes, a single mistake can result in the compromise of an account. For this reason, if multiple schemes are possible and also easy to use, they should be implemented and required.",NA
308,"If the secret in a single-factor authentication scheme gets compromised, full authentication is possible.",NA
308,COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.,NA
309,"The use of password systems as the primary means of authentication may be subject to several flaws or shortcomings, each reducing the effectiveness of the mechanism.",NA
309,"Password systems are the simplest and most ubiquitous authentication mechanisms. However, they are subject to such well known attacks,and such frequent compromise that their use in the most simple implementation is not practical.",NA
309,A password authentication mechanism error will almost always result in attackers being authorized as valid users.,NA
31,"The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize 'dir\..\..\filename' (multiple internal backslash dot dot) sequences that can resolve to a location that is outside of that directory.",NA
31,This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.,NA
31,"The 'dir\..\..\filename' manipulation is useful for bypassing some path traversal protection schemes. Sometimes a program only removes one ""..\"" sequence, so multiple ""..\"" can bypass that check. Alternately, this manipulation could be used to bypass a check for ""..\"" at the beginning of the pathname, moving up more than one directory level.",NA
311,The software does not encrypt sensitive or critical information before storage or transmission.,NA
311,"The lack of proper data encryption passes up the guarantees of confidentiality, integrity, and accountability that properly implemented encryption conveys.",NA
311,"If the application does not use a secure channel, such as SSL, to exchange sensitive information, it is possible for an attacker with access to the network traffic to sniff packets from the connection and uncover the data. This attack is not technically difficult, but does require physical access to some portion of the network over which the sensitive data travels. This access is usually somewhere near where the user is connected to the network (such as a colleague on the company network) but can be anywhere along the path from the user to the end server.",NA
311,"Omitting the use of encryption in any program which transfers data over a network of any kind should be considered on par with delivering the data sent to each user on the local networks of both the sender and receiver. Worse, this omission allows for the injection of data into a stream of communication between two parties -- with no means for the victims to separate valid data from invalid. In this day of widespread network attacks and password collection sniffers, it is an unnecessary risk to omit encryption from the design of any system which might benefit from it.",NA
311,OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.,NA
312,The application stores sensitive information in cleartext within a resource that might be accessible to another control sphere.,NA
312,"Because the information is stored in cleartext, attackers could potentially read it. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information.",NA
312,An attacker with access to the system could read sensitive information stored in cleartext.,NA
312,OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.,NA
313,"The application stores sensitive information in cleartext in a file, or on disk.",NA
313,"The sensitive information could be read by attackers with access to the file, or with physical or administrator access to the raw disk. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information.",NA
313,OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.,NA
314,The application stores sensitive information in cleartext in the registry.,NA
314,"Attackers can read the information by accessing the registry key. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information.",NA
314,OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.,NA
315,The application stores sensitive information in cleartext in a cookie.,NA
315,"Attackers can use widely-available tools to view the cookie and read the sensitive information. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information.",NA
315,OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.,NA
316,The application stores sensitive information in cleartext in memory.,NA
316,"The sensitive memory might be saved to disk, stored in a core dump, or remain uncleared if the application crashes, or if the programmer does not properly clear the memory before freeing it.",NA
316,"It could be argued that such problems are usually only exploitable by those with administrator privileges. However, swapping could cause the memory to be written to disk and leave it accessible to physical attack afterwards. Core dump files might have insecure permissions or be stored in archive files that are accessible to untrusted people. Or, uncleared sensitive memory might be inadvertently exposed to attackers due to another weakness.",NA
316,OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.,NA
317,The application stores sensitive information in cleartext within the GUI.,NA
317,"An attacker can often obtain data from a GUI, even if hidden, by using an API to directly access GUI objects such as windows and menus. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information.",NA
317,OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.,NA
318,The application stores sensitive information in cleartext in an executable.,NA
318,"Attackers can reverse engineer binary code to obtain secret data. This is especially easy when the cleartext is plain ASCII. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information.",NA
318,OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.,NA
319,The software transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors.,NA
319,"Many communication channels can be ""sniffed"" by attackers during data transmission. For example, network traffic can often be sniffed by any attacker who has access to a network interface. This significantly lowers the difficulty of exploitation by attackers.",NA
319,Anyone can read the information by gaining access to the channel being used for communication.,NA
319,OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.,NA
32,"The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '...' (triple dot) sequences that can resolve to a location that is outside of that directory.",NA
32,This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.,NA
32,"The '...' manipulation is useful for bypassing some path traversal protection schemes. On some Windows systems, it is equivalent to ""..\.."" and might bypass checks that assume only two dots are valid. Incomplete filtering, such as removal of ""./"" sequences, can ultimately produce valid "".."" sequences due to a collapse into unsafe value (CWE-182).",NA
321,The use of a hard-coded cryptographic key significantly increases the possibility that encrypted data may be recovered.,NA
321,"If hard-coded cryptographic keys are used, it is almost certain that malicious users will gain access through the account in question.",NA
321,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
322,The software performs a key exchange with an actor without verifying the identity of that actor.,NA
322,"Performing a key exchange will preserve the integrity of the information sent between two entities, but this will not guarantee that the entities are who they claim they are. This may enable an attacker to impersonate an actor by modifying traffic between the two entities.  Typically, this involves a victim client that contacts a malicious server that is impersonating a trusted server. If the client skips authentication or ignores an authentication failure, the malicious server may request authentication information from the user. The malicious server can then use this authentication information to log in to the trusted server using the victim's credentials, sniff traffic between the victim and trusted server, etc.",NA
322,"No authentication takes place in this process, bypassing an assumed protection of encryption.",NA
322,The encrypted communication between a user and a trusted host may be subject to sniffing by any actor in the communication path.,NA
322,OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.,NA
323,Nonces should be used for the present occasion and only once.,NA
323,Nonces are often bundled with a key in a communication exchange to produce a new session key for each exchange.,NA
323,"Potentially a replay attack, in which an attacker could send the same data twice, could be crafted if nonces are allowed to be reused. This could allow a user to send a message which masquerades as a valid message from a valid user.",NA
323,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
324,"The product uses a cryptographic key or password past its expiration date, which diminishes its safety significantly by increasing the timing window for cracking attacks against that key.",NA
324,"While the expiration of keys does not necessarily ensure that they are compromised, it is a significant concern that keys which remain in use for prolonged periods of time have a decreasing probability of integrity. For this reason, it is important to replace keys within a period of time proportional to their strength.",NA
324,"The cryptographic key in question may be compromised, providing a malicious user with a method for authenticating as the victim.",NA
324,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
325,"The product does not implement a required step in a cryptographic algorithm, resulting in weaker encryption than advertised by that algorithm.",NA
325,"Cryptographic implementations should precisely follow the algorithms that define them, otherwise encryption can be weaker than expected.",NA
325,"If the cryptographic algorithm is used for authentication and authorization, then an attacker could gain unauthorized access to the system.",NA
325,Sensitive data may be compromised by the use of a broken or risky cryptographic algorithm.,NA
325,"If the cryptographic algorithm is used to ensure the identity of the source of the data (such as digital signatures), then a broken algorithm will compromise this scheme and the source of the data cannot be proven.",NA
326,"The software stores or transmits sensitive data using an encryption scheme that is theoretically sound, but is not strong enough for the level of protection required.",NA
326,A weak encryption scheme can be subjected to brute force attacks that have a reasonable chance of succeeding using current attack methods and resources.,NA
326,An attacker may be able to decrypt the data using brute force attacks.,NA
326,COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.,NA
327,The use of a broken or risky cryptographic algorithm is an unnecessary risk that may result in the exposure of sensitive information.,NA
327,The use of a non-standard algorithm is dangerous because a determined attacker may be able to break the algorithm and compromise whatever data has been protected. Well-known techniques may exist to break the algorithm.,NA
327,The confidentiality of sensitive data may be compromised by the use of a broken or risky cryptographic algorithm.,NA
327,The integrity of sensitive data may be compromised by the use of a broken or risky cryptographic algorithm.,NA
327,"If the cryptographic algorithm is used to ensure the identity of the source of the data (such as digital signatures), then a broken algorithm will compromise this scheme and the source of the data cannot be proven.",NA
327,COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.,NA
328,"The product uses a hashing algorithm that produces a hash value that can be used to determine the original input, or to find an input that can produce the same hash, more efficiently than brute force techniques.",NA
328,"This weakness is especially dangerous when the hash is used in security algorithms that require the one-way property to hold. For example, if an authentication system takes an incoming password and generates a hash, then compares the hash to another hash that it has stored in its authentication database, then the ability to create a collision could allow an attacker to provide an alternate password that produces the same target hash, bypassing authentication.",NA
328,COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.,NA
329,Not using a random initialization Vector (IV) with Cipher Block Chaining (CBC) Mode causes algorithms to be susceptible to dictionary attacks.,NA
329,"CBC is the most commonly used mode of operation for a block cipher. It solves electronic code book's dictionary problems by XORing the ciphertext with plaintext. If it used to encrypt multiple data streams, dictionary attacks are possible, provided that the streams have a common beginning sequence.",NA
329,"If the CBC is not properly initialized, data that is encrypted can be compromised and therefore be read.",NA
329,"If the CBC is not properly initialized, encrypted data could be tampered with in transfer.",NA
329,Cryptographic based authentication systems could be defeated.,NA
33,"The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '....' (multiple dot) sequences that can resolve to a location that is outside of that directory.",NA
33,This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.,NA
33,"The '....' manipulation is useful for bypassing some path traversal protection schemes. On some Windows systems, it is equivalent to ""..\..\.."" and might bypass checks that assume only two dots are valid. Incomplete filtering, such as removal of ""./"" sequences, can ultimately produce valid "".."" sequences due to a collapse into unsafe value (CWE-182).",NA
330,The software uses insufficiently random numbers or values in a security context that depends on unpredictable numbers.,NA
330,"When software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information.",NA
330,"Computers are deterministic machines, and as such are unable to produce true randomness. Pseudo-Random Number Generators (PRNGs) approximate randomness algorithmically, starting with a seed from which subsequent values are calculated. There are two types of PRNGs: statistical and cryptographic. Statistical PRNGs provide useful statistical properties, but their output is highly predictable and forms an easy to reproduce numeric stream that is unsuitable for use in cases where security depends on generated values being unpredictable. Cryptographic PRNGs address this problem by generating output that is more difficult to predict. For a value to be cryptographically secure, it must be impossible or highly improbable for an attacker to distinguish between it and a truly random value.",NA
330,"When a protection mechanism relies on random values to restrict access to a sensitive resource, such as a session ID or a seed for generating a cryptographic key, then the resource being protected could be accessed by guessing the ID or key.",NA
330,"If software relies on unique, unguessable IDs to identify a resource, an attacker might be able to guess an ID for a resource that is owned by another user. The attacker could then read the resource, or pre-create a resource with the same ID to prevent the legitimate program from properly sending the resource to the intended user. For example, a product might maintain session information in a file whose name is based on a username. An attacker could pre-create this file for a victim user, then set the permissions so that the application cannot generate the session for the victim, preventing the victim from using the application.",NA
330,"When an authorization or authentication mechanism relies on random values to restrict access to restricted functionality, such as a session ID or a seed for generating a cryptographic key, then an attacker may access the restricted functionality by guessing the ID or key.",NA
330,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
331,"The software uses an algorithm or scheme that produces insufficient entropy, leaving patterns or clusters of values that are more likely to occur than others.",NA
331,An attacker could guess the random numbers generated and could gain unauthorized access to a system if the random numbers are used for authentication and authorization.,NA
331,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
332,"The lack of entropy available for, or used by, a Pseudo-Random Number Generator (PRNG) can be a stability and security threat.",NA
332,"If a pseudo-random number generator is using a limited entropy source which runs out (if the generator fails closed), the program may pause or crash.",NA
332,"If a PRNG is using a limited entropy source which runs out, and the generator fails open, the generator could produce predictable random numbers. Potentially a weak source of random numbers could weaken the encryption method used for authentication of users.",NA
332,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
333,True random number generators (TRNG) generally have a limited source of entropy and therefore can fail or block.,NA
333,The rate at which true random numbers can be generated is limited. It is important that one uses them only when they are needed for security.,NA
333,A program may crash or block if it runs out of random numbers.,NA
333,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
334,"The number of possible random values is smaller than needed by the product, making it more susceptible to brute force attacks.",NA
334,An attacker could easily guess the values used. This could lead to unauthorized access to a system if the seed is used for authentication and authorization.,NA
334,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
335,The software uses a Pseudo-Random Number Generator (PRNG) that does not correctly manage seeds.,NA
335,"if a PRNG is used incorrectly, such as using the same seed for each initialization or using a predictable seed, then an attacker may be able to easily guess the seed and thus the random numbers. This could lead to unauthorized access to a system if the seed is used for authentication and authorization.",NA
335,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
336,A Pseudo-Random Number Generator (PRNG) uses the same seed each time the product is initialized.,NA
336,"If an attacker can guess (or knows) the seed, then the attacker may be able to determine the random numbers that will be produced from the PRNG.",NA
336,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
337,"A Pseudo-Random Number Generator (PRNG) is initialized from a predictable seed, such as the process ID or system time.",NA
337,The use of predictable seeds significantly reduces the number of possible seeds that an attacker would need to test in order to predict which random numbers will be generated by the PRNG.,NA
337,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
338,"The product uses a Pseudo-Random Number Generator (PRNG) in a security context, but the PRNG's algorithm is not cryptographically strong.",NA
338,"When a non-cryptographic PRNG is used in a cryptographic context, it can expose the cryptography to certain types of attacks.",NA
338,"Often a pseudo-random number generator (PRNG) is not designed for cryptography. Sometimes a mediocre source of randomness is sufficient or preferable for algorithms that use random numbers. Weak generators generally take less processing power and/or do not use the precious, finite, entropy sources on a system. While such PRNGs might have very useful features, these same features could be used to break the cryptography.",NA
338,"If a PRNG is used for authentication and authorization, such as a session ID or a seed for generating a cryptographic key, then an attacker may be able to easily guess the ID or cryptographic key and gain access to restricted functionality.",NA
338,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
339,A PRNG uses a relatively small space of seeds.,NA
339,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
34,"The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '....//' (doubled dot dot slash) sequences that can resolve to a location that is outside of that directory.",NA
34,This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.,NA
34,"The '....//' manipulation is useful for bypassing some path traversal protection schemes. If ""../"" is filtered in a sequential fashion, as done by some regular expression engines, then ""....//"" can collapse into the ""../"" unsafe value (CWE-182). It could also be useful when "".."" is removed, if the operating system treats ""//"" and ""/"" as equivalent.",NA
340,The product uses a scheme that generates numbers or identifiers that are more predictable than required.,NA
341,"A number or object is predictable based on observations that the attacker can make about the state of the system or network, such as time, process ID, etc.",NA
341,"This weakness could be exploited by an attacker in a number ways depending on the context. If a predictable number is used to generate IDs or keys that are used within protection mechanisms, then an attacker could gain unauthorized access to the system. If predictable filenames are used for storing sensitive information, then an attacker might gain access to the system and may be able to gain access to the information in the file.",NA
341,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
342,An exact value or random number can be precisely predicted by observing previous values.,NA
343,"The software's random number generator produces a series of values which, when observed, can be used to infer a relatively small range of possibilities for the next value that could be generated.",NA
343,"The output of a random number generator should not be predictable based on observations of previous values. In some cases, an attacker cannot predict the exact value that will be produced next, but can narrow down the possibilities significantly. This reduces the amount of effort to perform a brute force attack. For example, suppose the product generates random numbers between 1 and 100, but it always produces a larger value until it reaches 100. If the generator produces an 80, then the attacker knows that the next value will be somewhere between 81 and 100. Instead of 100 possibilities, the attacker only needs to consider 20.",NA
344,"The product uses a constant value, name, or reference, but this value can (or should) vary across different environments.",NA
345,"The software does not sufficiently verify the origin or authenticity of data, in a way that causes it to accept invalid data.",NA
345,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
346,The software does not properly verify that the source of data or communication is valid.,NA
346,An attacker can access any functionality that is inadvertently accessible to the source.,NA
346,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
347,"The software does not verify, or incorrectly verifies, the cryptographic signature for data.",NA
347,An attacker could gain access to sensitive data and possibly execute unauthorized code.,NA
347,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
348,"The software has two different sources of the same data or information, but it uses the source that has less support for verification, is less trusted, or is less resistant to attack.",NA
348,An attacker could utilize the untrusted data source to bypass protection mechanisms and gain access to sensitive data.,NA
349,"The software, when processing trusted data, accepts any untrusted data that is also included with the trusted data, treating the untrusted data as if it were trusted.",NA
349,An attacker could package untrusted data with trusted data to bypass protection mechanisms to gain access to and possibly modify sensitive data.,NA
349,OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.,NA
35,"The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '.../...//' (doubled triple dot slash) sequences that can resolve to a location that is outside of that directory.",NA
35,This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.,NA
35,"The '.../...//' manipulation is useful for bypassing some path traversal protection schemes. If ""../"" is filtered in a sequential fashion, as done by some regular expression engines, then "".../...//"" can collapse into the ""../"" unsafe value (CWE-182). Removing the first ""../"" yields ""....//""; the second removal yields ""../"". Depending on the algorithm, the software could be susceptible to CWE-34 but not CWE-35, or vice versa.",NA
350,"The software performs reverse DNS resolution on an IP address to obtain the hostname and make a security decision, but it does not properly ensure that the IP address is truly associated with the hostname.",NA
350,"Since DNS names can be easily spoofed or misreported, and it may be difficult for the software to detect if a trusted DNS server has been compromised, DNS names do not constitute a valid authentication mechanism.",NA
350,"When the software performs a reverse DNS resolution for an IP address, if an attacker controls the server for that IP address, then the attacker can cause the server to return an arbitrary hostname. As a result, the attacker may be able to bypass authentication, cause the wrong hostname to be recorded in log files to hide activities, or perform other attacks.",NA
350,"Attackers can spoof DNS names by either (1) compromising a DNS server and modifying its records (sometimes called DNS cache poisoning), or (2) having legitimate control over a DNS server associated with their IP address.",NA
350,Malicious users can fake authentication information by providing false DNS information.,NA
351,The software does not properly distinguish between different types of elements in a way that leads to insecure behavior.,NA
352,"The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.",NA
352,"When a web server is designed to receive a request from a client without any mechanism for verifying that it was intentionally sent, then it might be possible for an attacker to trick a client into making an unintentional request to the web server which will be treated as an authentic request. This can be done via a URL, image load, XMLHttpRequest, etc. and can result in exposure of data or unintended code execution.",NA
352,"The consequences will vary depending on the nature of the functionality that is vulnerable to CSRF. An attacker could effectively perform any operations as the victim. If the victim is an administrator or privileged user, the consequences may include obtaining complete control over the web application - deleting or stealing data, uninstalling the product, or using it to launch other attacks against all of the product's users. Because the attacker has the identity of the victim, the scope of CSRF is limited only by the victim's privileges.",NA
352,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
353,"The software uses a transmission protocol that does not include a mechanism for verifying the integrity of the data during transmission, such as a checksum.",NA
353,"If integrity check values or ""checksums"" are omitted from a protocol, there is no way of determining if data has been corrupted in transmission. The lack of checksum functionality in a protocol removes the first application-level check of data that can be used. The end-to-end philosophy of checks states that integrity checks should be performed at the lowest level that they can be completely implemented. Excluding further sanity checks and input validation performed by applications, the protocol's checksum is the most important level of checksum, since it can be performed more completely than at any previous level and takes into account entire messages, as opposed to single packets.",NA
353,Data that is parsed and used may be corrupted.,NA
353,Without a checksum it is impossible to determine if any changes have been made to the data after it was sent.,NA
353,OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.,NA
354,"The software does not validate or incorrectly validates the integrity check values or ""checksums"" of a message. This may prevent it from detecting if the data has been modified or corrupted in transmission.",NA
354,Improper validation of checksums before use results in an unnecessary risk that can easily be mitigated. The protocol specification describes the algorithm used for calculating the checksum. It is then a simple matter of implementing the calculation and verifying that the calculated checksum and the received checksum match. Improper verification of the calculated checksum and the received checksum can lead to far greater consequences.,NA
354,Integrity checks usually use a secret key that helps authenticate the data origin. Skipping integrity checking generally opens up the possibility that new data from an invalid source can be injected.,NA
354,Data that is parsed and used may be corrupted.,NA
354,"Without a checksum check, it is impossible to determine if any changes have been made to the data after it was sent.",NA
354,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
356,The software's user interface does not warn the user before undertaking an unsafe action on behalf of that user. This makes it easier for attackers to trick users into inflicting damage to their system.,NA
356,"Software systems should warn users that a potentially dangerous action may occur if the user proceeds. For example, if the user downloads a file from an unknown source and attempts to execute the file on their machine, then the application's GUI can indicate that the file is unsafe.",NA
357,"The user interface provides a warning to a user regarding dangerous or sensitive operations, but the warning is not noticeable enough to warrant attention.",NA
358,"The software does not implement or incorrectly implements one or more security-relevant checks as specified by the design of a standardized algorithm, protocol, or technique.",NA
359,"The product does not properly prevent a person's private, personal information from being accessed by actors who either (1) are not explicitly authorized to access the information or (2) do not have the implicit consent of the person about whom the information is collected.",NA
359,"There are many types of sensitive information that products must protect from attackers, including system data, communications, configuration, business secrets, intellectual property, and an individual's personal (private) information.  Private personal information may include a password, phone number, geographic location, personal messages, credit card number, etc.  Private information is important to consider whether the person is a user of the product, or part of a data set that is processed by the product.  An exposure of private information does not necessarily prevent the product from working properly, and in fact the exposure might be intended by the developer, e.g. as part of data sharing with other organizations.  However, the exposure of personal private information can still be undesirable or explicitly prohibited by law or regulation.",NA
359,Some types of private information include:,NA
359,"Some of this information may be characterized as PII (Personally Identifiable Information), Protected Health Information (PHI), etc. Categories of private information may overlap or vary based on the intended usage or the policies and practices of a particular industry.",NA
359,"Sometimes data that is not labeled as private can have a privacy implication in a different context. For example, student identification numbers are usually not considered private because there is no explicit and publicly-available mapping to an individual student's personal information. However, if a school generates identification numbers based on student social security numbers, then the identification numbers should be considered private.",NA
359,OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.,NA
36,"The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as ""/abs/path"" that can resolve to a location that is outside of that directory.",NA
36,This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.,NA
36,"The attacker may be able to create or overwrite critical files that are used to execute code, such as programs or libraries.",NA
36,"The attacker may be able to overwrite or create critical files, such as programs, libraries, or important data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, appending a new account at the end of a password file may allow an attacker to bypass authentication.",NA
36,"The attacker may be able read the contents of unexpected files and expose sensitive data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, by reading a password file, the attacker could conduct brute force password guessing attacks in order to break into an account on the system.",NA
36,"The attacker may be able to overwrite, delete, or corrupt unexpected critical files such as programs, libraries, or important data. This may prevent the software from working at all and in the case of a protection mechanisms such as authentication, it has the potential to lockout every user of the software.",NA
360,Security based on event locations are insecure and can be spoofed.,NA
360,"Events are a messaging system which may provide control data to programs listening for events. Events often do not have any type of authentication framework to allow them to be verified from a trusted source. Any application, in Windows, on a given desktop can send a message to any window on the same desktop. There is no authentication framework for these messages. Therefore, any message can be used to manipulate any process on the desktop if the process does not check the validity and safeness of those messages.",NA
360,"If one trusts the system-event information and executes commands based on it, one could potentially take actions based on a spoofed identity.",NA
362,"The program contains a code sequence that can run concurrently with other code, and the code sequence requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence that is operating concurrently.",NA
362,"This can have security implications when the expected synchronization is in security-critical code, such as recording whether a user is authenticated or modifying important state information that should not be influenced by an outsider.",NA
362,"A race condition occurs within concurrent environments, and is effectively a property of a code sequence. Depending on the context, a code sequence may be in the form of a function call, a small number of instructions, a series of program invocations, etc.",NA
362,"A race condition violates these properties, which are closely related:",NA
362,"A race condition exists when an ""interfering code sequence"" can still access the shared resource, violating exclusivity. Programmers may assume that certain code sequences execute too quickly to be affected by an interfering code sequence; when they are not, this violates atomicity. For example, the single ""x++"" statement may appear atomic at the code layer, but it is actually non-atomic at the instruction layer, since it involves a read (the original value of x), followed by a computation (x+1), followed by a write (save the result to x).",NA
362,"The interfering code sequence could be ""trusted"" or ""untrusted."" A trusted interfering code sequence occurs within the program; it cannot be modified by the attacker, and it can only be invoked indirectly. An untrusted interfering code sequence can be authored directly by the attacker, and typically it is external to the vulnerable program.",NA
362,"When a race condition makes it possible to bypass a resource cleanup routine or trigger multiple initialization routines, it may lead to resource exhaustion (CWE-400).",NA
362,"When a race condition allows multiple control flows to access a resource simultaneously, it might lead the program(s) into unexpected states, possibly resulting in a crash.",NA
362,"When a race condition is combined with predictable resource names and loose permissions, it may be possible for an attacker to overwrite or access confidential data (CWE-59).",NA
363,"The software checks the status of a file or directory before accessing it, which produces a race condition in which the file can be replaced with a link before the access is performed, causing the software to access the wrong file.",NA
363,"While developers might expect that there is a very narrow time window between the time of check and time of use, there is still a race condition. An attacker could cause the software to slow down (e.g. with memory consumption), causing the time window to become larger. Alternately, in some situations, the attacker could win the race by performing a large number of attacks.",NA
364,The software uses a signal handler that introduces a race condition.,NA
364,"Race conditions frequently occur in signal handlers, since signal handlers support asynchronous actions. These race conditions have a variety of root causes and symptoms. Attackers may be able to exploit a signal handler race condition to cause the software state to be corrupted, possibly leading to a denial of service or even code execution.",NA
364,"These issues occur when non-reentrant functions, or state-sensitive actions occur in the signal handler, where they may be called at any time. These behaviors can violate assumptions being made by the ""regular"" code that is interrupted, or by other signal handlers that may also be invoked. If these functions are called at an inopportune moment - such as while a non-reentrant function is already running - memory corruption could occur that may be exploitable for code execution. Another signal race condition commonly found occurs when free is called within a signal handler, resulting in a double free and therefore a write-what-where condition. Even if a given pointer is set to NULL after it has been freed, a race condition still exists between the time the memory was freed and the pointer was set to NULL. This is especially problematic if the same signal handler has been set for more than one signal -- since it means that the signal handler itself may be reentered.",NA
364,"There are several known behaviors related to signal handlers that have received the label of ""signal handler race condition"":",NA
364,"Signal handler vulnerabilities are often classified based on the absence of a specific protection mechanism, although this style of classification is discouraged in CWE because programmers often have a choice of several different mechanisms for addressing the weakness. Such protection mechanisms may preserve exclusivity of access to the shared resource, and behavioral atomicity for the relevant code:",NA
364,"It may be possible to cause data corruption and possibly execute arbitrary code by modifying global variables or data structures at unexpected times, violating the assumptions of code that uses this global data.",NA
364,"If a signal handler interrupts code that is executing with privileges, it may be possible that the signal handler will also be executed with elevated privileges, possibly making subsequent exploits more severe.",NA
365,"The code contains a switch statement in which the switched variable can be modified while the switch is still executing, resulting in unexpected behavior.",NA
365,"This issue is particularly important in the case of switch statements that involve fall-through style case statements - i.e., those which do not end with break. If the variable being tested by the switch changes in the course of execution, this could change the intended logic of the switch so much that it places the process in a contradictory state and in some cases could even result in memory corruption.",NA
365,"This weakness may lead to unexpected system state, resulting in unpredictable behavior.",NA
366,"If two threads of execution use a resource simultaneously, there exists the possibility that resources may be used while invalid, in turn making the state of execution undefined.",NA
366,The main problem is that -- if a lock is overcome -- data could be altered in a bad state.,NA
367,"The software checks the state of a resource before using that resource, but the resource's state can change between the check and the use in a way that invalidates the results of the check. This can cause the software to perform invalid actions when the resource is in an unexpected state.",NA
367,"This weakness can be security-relevant when an attacker can influence the state of the resource between check and use. This can happen with shared resources such as files, memory, or even variables in multithreaded programs.",NA
367,The attacker can gain access to otherwise unauthorized resources.,NA
367,Race conditions such as this kind may be employed to gain read or write access to resources which are not normally readable or writable by the user in question.,NA
367,"The resource in question, or other resources (through the corrupted one), may be changed in undesirable ways by a malicious user.",NA
367,"If a file or other resource is written in this method, as opposed to in a valid way, logging of the activity may not occur.",NA
367,"In some cases it may be possible to delete files a malicious user might not otherwise have access to, such as log files.",NA
368,"A product performs a series of non-atomic actions to switch between contexts that cross privilege or other security boundaries, but a race condition allows an attacker to modify or misrepresent the product's behavior during the switch.",NA
368,"This is commonly seen in web browser vulnerabilities in which the attacker can perform certain actions while the browser is transitioning from a trusted to an untrusted domain, or vice versa, and the browser performs the actions on one domain using the trust level and resources of the other domain.",NA
369,The product divides a value by zero.,NA
369,"This weakness typically occurs when an unexpected value is provided to the product, or if an error occurs that is not properly detected. It frequently occurs in calculations involving physical dimensions such as size, length, width, and height.",NA
369,A Divide by Zero results in a crash.,NA
37,A software system that accepts input in the form of a slash absolute path ('/absolute/pathname/here') without appropriate validation can allow an attacker to traverse the file system to unintended locations or access arbitrary files.,NA
370,"The software does not check the revocation status of a certificate after its initial revocation check, which can cause the software to perform privileged actions even after the certificate is revoked at a later time.",NA
370,"If the revocation status of a certificate is not checked before each action that requires privileges, the system may be subject to a race condition. If a certificate is revoked after the initial check, all subsequent actions taken with the owner of the revoked certificate will lose all benefits guaranteed by the certificate. In fact, it is almost certain that the use of a revoked certificate indicates malicious activity.",NA
370,Trust may be assigned to an entity who is not who it claims to be.,NA
370,Data from an untrusted (and possibly malicious) source may be integrated.,NA
370,"Data may be disclosed to an entity impersonating a trusted entity, resulting in information disclosure.",NA
370,OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.,NA
372,"The software does not properly determine which state it is in, causing it to assume it is in state X when in fact it is in state Y, causing it to perform incorrect operations in a security-relevant manner.",NA
373,This entry was deprecated because it overlapped the same concepts as race condition (CWE-362) and Improper Synchronization (CWE-662).,NA
374,The program sends non-cloned mutable data as an argument to a method or function.,NA
374,"The function or method that has been called can alter or delete the mutable data. This could violate assumptions that the calling function has made about its state. In situations where unknown code is called with references to mutable data, this external code could make changes to the data sent. If this data was not previously cloned, the modified data might not be valid in the context of execution.",NA
374,Potentially data could be tampered with by another function which should not have been tampered with.,NA
375,Sending non-cloned mutable data as a return value may result in that data being altered or deleted by the calling function.,NA
375,"In situations where functions return references to mutable data, it is possible that the external code which called the function may make changes to the data sent. If this data was not previously cloned, the class will then be using modified data which may violate assumptions about its internal state.",NA
375,Potentially data could be tampered with by another function which should not have been tampered with.,NA
377,Creating and using insecure temporary files can leave application and system data vulnerable to attack.,NA
378,"Opening temporary files without appropriate measures or controls can leave the file, its contents and any function that it impacts vulnerable to attack.",NA
378,"If the temporary file can be read by the attacker, sensitive information may be in that file which could be revealed.",NA
378,"If that file can be written to by the attacker, the file might be moved into a place to which the attacker does not have access. This will allow the attacker to gain selective resource access-control privileges.",NA
378,"Depending on the data stored in the temporary file, there is the potential for an attacker to gain an additional input vector which is trusted as non-malicious. It may be possible to make arbitrary changes to data structures, user information, or even process ownership.",NA
379,The software creates a temporary file in a directory whose permissions allow unintended actors to determine the file's existence or otherwise access that file.,NA
379,"On some operating systems, the fact that the temporary file exists may be apparent to any user with sufficient privileges to access that directory. Since the file is visible, the application that is using the temporary file could be known. If one has access to list the processes on the system, the attacker has gained information about what the user is doing at that time. By correlating this with the applications the user is running, an attacker could potentially discover what a user's actions are. From this, higher levels of security could be breached.",NA
379,"Since the file is visible and the application which is using the temp file could be known, the attacker has gained information about what the user is doing at that time.",NA
38,A software system that accepts input in the form of a backslash absolute path ('\absolute\pathname\here') without appropriate validation can allow an attacker to traverse the file system to unintended locations or access arbitrary files.,NA
382,"A J2EE application uses System.exit(), which also shuts down its container.",NA
382,It is never a good idea for a web application to attempt to shut down the application container. Access to a function that can shut down the application is an avenue for Denial of Service (DoS) attacks.,NA
382,A call to System.exit() is probably part of leftover debug code or code imported from a non-J2EE application.,NA
383,Thread management in a Web application is forbidden in some circumstances and is always highly error prone.,NA
383,"Thread management in a web application is forbidden by the J2EE standard in some circumstances and is always highly error prone. Managing threads is difficult and is likely to interfere in unpredictable ways with the behavior of the application container. Even without interfering with the container, thread management usually leads to bugs that are hard to detect and diagnose like deadlock, race conditions, and other synchronization errors.",NA
384,"Authenticating a user, or otherwise establishing a new user session, without invalidating any existing session identifier gives an attacker the opportunity to steal authenticated sessions.",NA
384,Such a scenario is commonly observed when:,NA
385,"Covert timing channels convey information by modulating some aspect of system behavior over time, so that the program receiving the information can observe system behavior and infer protected information.",NA
385,"In some instances, knowing when data is transmitted between parties can provide a malicious user with privileged information. Also, externally monitoring the timing of operations can potentially reveal sensitive data. For example, a cryptographic operation can expose its internal state if the time it takes to perform the operation varies, based on the state.",NA
385,"Covert channels are frequently classified as either storage or timing channels. Some examples of covert timing channels are the system's paging rate, the time a certain transaction requires to execute, and the time it takes to gain access to a shared bus.",NA
385,Information exposure.,NA
386,"A constant symbolic reference to an object is used, even though the reference can resolve to a different object over time.",NA
386,The attacker can gain access to otherwise unauthorized resources.,NA
386,Race conditions such as this kind may be employed to gain read or write access to resources not normally readable or writable by the user in question.,NA
386,"The resource in question, or other resources (through the corrupted one) may be changed in undesirable ways by a malicious user.",NA
386,"If a file or other resource is written in this method, as opposed to a valid way, logging of the activity may not occur.",NA
386,In some cases it may be possible to delete files that a malicious user might not otherwise have access to -- such as log files.,NA
39,An attacker can inject a drive letter or Windows volume letter ('C:dirname') into a software system to potentially redirect access to an unintended location or arbitrary file.,NA
39,"The attacker may be able to create or overwrite critical files that are used to execute code, such as programs or libraries.",NA
39,"The attacker may be able to overwrite or create critical files, such as programs, libraries, or important data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, appending a new account at the end of a password file may allow an attacker to bypass authentication.",NA
39,"The attacker may be able read the contents of unexpected files and expose sensitive data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, by reading a password file, the attacker could conduct brute force password guessing attacks in order to break into an account on the system.",NA
39,"The attacker may be able to overwrite, delete, or corrupt unexpected critical files such as programs, libraries, or important data. This may prevent the software from working at all and in the case of a protection mechanisms such as authentication, it has the potential to lockout every user of the software.",NA
390,"The software detects a specific error, but takes no actions to handle the error.",NA
390,An attacker could utilize an ignored error condition to place the system in an unexpected state that could lead to the execution of unintended logic and could cause other unintended behavior.,NA
390,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
391,[PLANNED FOR DEPRECATION. SEE MAINTENANCE NOTES.] Ignoring exceptions and other error conditions may allow an attacker to induce unexpected behavior unnoticed.,NA
391,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
392,The software encounters an error but does not provide a status code or return value to indicate that an error has occurred.,NA
392,Errors that are not properly reported could place the system in an unexpected state that could lead to unintended behaviors.,NA
392,OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.,NA
393,"A function or operation returns an incorrect return value or status code that does not indicate an error, but causes the product to modify its behavior based on the incorrect result.",NA
393,"This can lead to unpredictable behavior. If the function is used to make security-critical decisions or provide security-critical information, then the wrong status code can cause the software to assume that an action is safe, even when it is not.",NA
393,This weakness could place the system in a state that could lead unexpected logic to be executed or other unintended behaviors.,NA
394,"The software does not properly check when a function or operation returns a value that is legitimate for the function, but is not expected by the software.",NA
395,Catching NullPointerException should not be used as an alternative to programmatic checks to prevent dereferencing a null pointer.,NA
395,Programmers typically catch NullPointerException under three circumstances:,NA
395,"Of these three circumstances, only the last is acceptable.",NA
396,Catching overly broad exceptions promotes complex error handling code that is more likely to contain security vulnerabilities.,NA
396,"Multiple catch blocks can get ugly and repetitive, but ""condensing"" catch blocks by catching a high-level class like Exception can obscure exceptions that deserve special treatment or that should not be caught at this point in the program. Catching an overly broad exception essentially defeats the purpose of Java's typed exceptions, and can become particularly dangerous if the program grows and begins to throw new types of exceptions. The new exception types will not receive any attention.",NA
397,Throwing overly broad exceptions promotes complex error handling code that is more likely to contain security vulnerabilities.,NA
397,"Declaring a method to throw Exception or Throwable makes it difficult for callers to perform proper error handling and error recovery. Java's exception mechanism, for example, is set up to make it easy for callers to anticipate what can go wrong and write code to handle each specific exceptional circumstance. Declaring that a method throws a generic form of exception defeats this system.",NA
40,An attacker can inject a Windows UNC share ('\\UNC\share\name') into a software system to potentially redirect access to an unintended location or arbitrary file.,NA
400,"The software does not properly control the allocation and maintenance of a limited resource thereby enabling an actor to influence the amount of resources consumed, eventually leading to the exhaustion of available resources.",NA
400,"Limited resources include memory, file system storage, database connection pool entries, and CPU. If an attacker can trigger the allocation of these limited resources, but the number or size of the resources is not controlled, then the attacker could cause a denial of service that consumes all available resources. This would prevent valid users from accessing the software, and it could potentially have an impact on the surrounding environment. For example, a memory exhaustion attack against an application could slow down the application as well as its host operating system.",NA
400,There are at least three distinct scenarios which can commonly lead to resource exhaustion:,NA
400,Resource exhaustion problems are often result due to an incorrect implementation of the following situations:,NA
400,"The most common result of resource exhaustion is denial of service. The software may slow down, crash due to unhandled errors, or lock out legitimate users.",NA
400,"In some cases it may be possible to force the software to ""fail open"" in the event of resource exhaustion. The state of the software -- and possibly the security functionality - may then be compromised.",NA
401,"The software does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory.",NA
401,"This is often triggered by improper handling of malformed data or unexpectedly interrupted sessions.  In some languages, developers are responsible for tracking memory allocation and releasing the memory.  If there are no more pointers or references to the memory, then it can no longer be tracked and identified for release.",NA
401,"Most memory leaks result in general software reliability problems, but if an attacker can intentionally trigger a memory leak, the attacker might be able to launch a denial of service attack (by crashing or hanging the program) or take advantage of other unexpected program behavior resulting from a low memory condition.",NA
402,The software makes resources available to untrusted parties when those resources are only intended to be accessed by the software.,NA
403,"A process does not close sensitive file descriptors before invoking a child process, which allows the child to perform unauthorized I/O operations using those descriptors.",NA
403,"When a new process is forked or executed, the child process inherits any open file descriptors. When the child process has fewer privileges than the parent process, this might introduce a vulnerability if the child process can access the file descriptor but does not have the privileges to access the associated file.",NA
403,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
404,The program does not release or incorrectly releases a resource before it is made available for re-use.,NA
404,"When a resource is created or allocated, the developer is responsible for properly releasing the resource as well as accounting for all potential paths of expiration or invalidation, such as a set period of time or revocation.",NA
404,"Most unreleased resource issues result in general software reliability problems, but if an attacker can intentionally trigger a resource leak, the attacker might be able to launch a denial of service attack by depleting the resource pool.",NA
404,"When a resource containing sensitive information is not correctly shutdown, it may expose the sensitive data in a subsequent allocation.",NA
405,Software that does not appropriately monitor or control resource consumption can lead to adverse system performance.,NA
405,"This situation is amplified if the software allows malicious users or attackers to consume more resources than their access level permits. Exploiting such a weakness can lead to asymmetric resource consumption, aiding in amplification attacks against the system or the network.",NA
405,"Sometimes this is a factor in ""flood"" attacks, but other types of amplification exist.",NA
406,"The software does not sufficiently monitor or control transmitted network traffic volume, so that an actor can cause the software to transmit more traffic than should be allowed for that actor.",NA
406,"In the absence of a policy to restrict asymmetric resource consumption, the application or system cannot distinguish between legitimate transmissions and traffic intended to serve as an amplifying attack on target systems. Systems can often be configured to restrict the amount of traffic sent out on behalf of a client, based on the client's origin or access level. This is usually defined in a resource allocation policy. In the absence of a mechanism to keep track of transmissions, the system or application can be easily abused to transmit asymmetrically greater traffic than the request or client should be permitted to.",NA
406,System resources can be quickly consumed leading to poor application performance or system crash. This may affect network performance and could be used to attack other systems and applications relying on network performance.,NA
406,"If the application uses UDP, then it could potentially be subject to spoofing attacks that use the inherent weaknesses of UDP to perform traffic amplification, although this problem can exist in other protocols or contexts.",NA
407,"An algorithm in a product has an inefficient worst-case computational complexity that may be detrimental to system performance and can be triggered by an attacker, typically using crafted manipulations that ensure that the worst case is being reached.",NA
407,"The typical consequence is CPU consumption, but memory consumption and consumption of other resources can also occur.",NA
408,The software allows an entity to perform a legitimate but expensive operation before authentication or authorization has taken place.,NA
408,"System resources, CPU and memory, can be quickly consumed. This can lead to poor system performance or system crash.",NA
409,The software does not handle or incorrectly handles a compressed input with a very high compression ratio that produces a large output.,NA
409,"An example of data amplification is a ""decompression bomb,"" a small ZIP file that can produce a large amount of data when it is decompressed.",NA
409,"System resources, CPU and memory, can be quickly consumed. This can lead to poor system performance or system crash.",NA
41,The system or application is vulnerable to file system contents disclosure through path equivalence. Path equivalence involves the use of special characters in file and directory names. The associated manipulations are intended to generate multiple names for the same object.,NA
41,"Path equivalence is usually employed in order to circumvent access controls expressed using an incomplete set of file name or file path representations. This is different from path traversal, wherein the manipulations are performed to generate a name for a different object.",NA
41,An attacker may be able to traverse the file system to unintended locations and read or overwrite the contents of unexpected files. If the files are used for a security mechanism than an attacker may be able to bypass the mechanism.,NA
410,"The software's resource pool is not large enough to handle peak demand, which allows an attacker to prevent others from accessing the resource by using a (relatively) large number of requests for resources.",NA
410,"Frequently the consequence is a ""flood"" of connection or sessions.",NA
410,"Floods often cause a crash or other problem besides denial of the resource itself; these are likely examples of *other* vulnerabilities, not an insufficient resource pool.",NA
412,"The software properly checks for the existence of a lock, but the lock can be externally controlled or influenced by an actor that is outside of the intended sphere of control.",NA
412,"This prevents the software from acting on associated resources or performing other behaviors that are controlled by the presence of the lock. Relevant locks might include an exclusive lock or mutex, or modifying a shared resource that is treated as a lock. If the lock can be held for an indefinite period of time, then the denial of service could be permanent.",NA
412,"When an attacker can control a lock, the program may wait indefinitely until the attacker releases the lock, causing a denial of service to other users of the program. This is especially problematic if there is a blocking operation on the lock.",NA
413,The software does not lock or does not correctly lock a resource when the software must have exclusive access to the resource.,NA
413,"When a resource is not properly locked, an attacker could modify the resource while it is being operated on by the software. This might violate the software's assumption that the resource will not change, potentially leading to unexpected behaviors.",NA
414,A product does not check to see if a lock is present before performing sensitive operations on a resource.,NA
415,"The product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations.",NA
415,"When a program calls free() twice with the same argument, the program's memory management data structures become corrupted. This corruption can cause the program to crash or, in some circumstances, cause two later calls to malloc() to return the same pointer. If malloc() returns the same value twice and the program later gives the attacker control over the data that is written into this doubly-allocated memory, the program becomes vulnerable to a buffer overflow attack.",NA
415,"Doubly freeing memory may result in a write-what-where condition, allowing an attacker to execute arbitrary code.",NA
416,"Referencing memory after it has been freed can cause a program to crash, use unexpected values, or execute code.",NA
416,"The use of previously-freed memory can have any number of adverse consequences, ranging from the corruption of valid data to the execution of arbitrary code, depending on the instantiation and timing of the flaw. The simplest way data corruption may occur involves the system's reuse of the freed memory. Use-after-free errors have two common and sometimes overlapping causes:",NA
416,"In this scenario, the memory in question is allocated to another pointer validly at some point after it has been freed. The original pointer to the freed memory is used again and points to somewhere within the new allocation. As the data is changed, it corrupts the validly used memory; this induces undefined behavior in the process.",NA
416,"If the newly allocated data chances to hold a class, in C++ for example, various function pointers may be scattered within the heap data. If one of these function pointers is overwritten with an address to valid shellcode, execution of arbitrary code can be achieved.",NA
416,"The use of previously freed memory may corrupt valid data, if the memory area in question has been allocated and used properly elsewhere.",NA
416,"If chunk consolidation occurs after the use of previously freed data, the process may crash when invalid data is used as chunk information.",NA
416,"If malicious data is entered before chunk consolidation can take place, it may be possible to take advantage of a write-what-where primitive to execute arbitrary code.",NA
419,"The software uses a primary channel for administration or restricted functionality, but it does not properly protect the channel.",NA
419,OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.,NA
42,A software system that accepts path input in the form of trailing dot ('filedir.') without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.,NA
420,"The software protects a primary channel, but it does not use the same level of protection for an alternate channel.",NA
420,OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.,NA
421,"The product opens an alternate channel to communicate with an authorized user, but the channel is accessible to other actors.",NA
421,This creates a race condition that allows an attacker to access the channel before the authorized user does.,NA
422,"The software does not properly verify the source of a message in the Windows Messaging System while running at elevated privileges, creating an alternate channel through which an attacker can directly send a message to the product.",NA
423,This entry has been deprecated because it was a duplicate of CWE-441. All content has been transferred to CWE-441.,NA
424,The product does not sufficiently protect all possible paths that a user can take to access restricted functionality or resources.,NA
425,"The web application does not adequately enforce appropriate authorization on all restricted URLs, scripts, or files.",NA
425,Web applications susceptible to direct request attacks often make the false assumption that such resources can only be reached through a given navigation path and so only apply authorization at certain points in the path.,NA
425,OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.,NA
426,The application searches for critical resources using an externally-supplied search path that can point to resources that are not under the application's direct control.,NA
426,"This might allow attackers to execute their own programs, access unauthorized data files, or modify configuration in unexpected ways. If the application uses a search path to locate critical resources such as programs, then an attacker could modify that search path to point to a malicious program, which the targeted application would then execute. The problem extends to any type of critical resource that the application trusts.",NA
426,Some of the most common variants of untrusted search path are:,NA
426,There is the potential for arbitrary code execution with privileges of the vulnerable program.,NA
426,"The program could be redirected to the wrong files, potentially triggering a crash or hang when the targeted file is too large or does not have the expected format.",NA
426,The program could send the output of unauthorized files to the attacker.,NA
427,"The product uses a fixed or controlled search path to find resources, but one or more locations in that path can be under the control of unintended actors.",NA
427,"Although this weakness can occur with any type of resource, it is frequently introduced when a product uses a directory search path to find executables or code libraries, but the path contains a directory that can be modified by an attacker, such as ""/tmp"" or the current working directory.",NA
427,"In Windows-based systems, when the LoadLibrary or LoadLibraryEx function is called with a DLL name that does not contain a fully qualified path, the function follows a search order that includes two path elements that might be uncontrolled:",NA
427,"In some cases, the attack can be conducted remotely, such as when SMB or WebDAV network shares are used.",NA
427,"In some Unix-based systems, a PATH might be created that contains an empty element, e.g. by splicing an empty variable into the PATH. This empty element can be interpreted as equivalent to the current working directory, which might be an untrusted search element.",NA
428,"The product uses a search path that contains an unquoted element, in which the element contains whitespace or other separators. This can cause the product to access resources in a parent path.",NA
428,"If a malicious individual has access to the file system, it is possible to elevate privileges by inserting such a file as ""C:\Program.exe"" to be run by a privileged program making use of WinExec.",NA
43,A software system that accepts path input in the form of multiple trailing dot ('filedir....') without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.,NA
430,"The wrong ""handler"" is assigned to process an object.",NA
430,"An example of deploying the wrong handler would be calling a servlet to reveal source code of a .JSP file, or automatically ""determining"" type of the object even if it is contradictory to an explicitly specified type.",NA
431,A handler is not available or implemented.,NA
431,"When an exception is thrown and not caught, the process has given up an opportunity to decide if a given failure or event is worth a change in execution.",NA
432,"The application uses a signal handler that shares state with other signal handlers, but it does not properly mask or prevent those signal handlers from being invoked while the original signal handler is still running.",NA
432,"During the execution of a signal handler, it can be interrupted by another handler when a different signal is sent. If the two handlers share state - such as global variables - then an attacker can corrupt the state by sending another signal before the first handler has completed execution.",NA
433,The software stores raw content or supporting code under the web document root with an extension that is not specifically handled by the server.,NA
433,"If code is stored in a file with an extension such as "".inc"" or "".pl"", and the web server does not have a handler for that extension, then the server will likely send the contents of the file directly to the requester without the pre-processing that was expected. When that file contains sensitive information such as database credentials, this may allow the attacker to compromise the application or associated components.",NA
434,The software allows the attacker to upload or transfer files of dangerous types that can be automatically processed within the product's environment.,NA
434,"Arbitrary code execution is possible if an uploaded file is interpreted and executed as code by the recipient. This is especially true for .asp and .php extensions uploaded to web servers because these file types are often treated as automatically executable, even when file system permissions do not specify execution. For example, in Unix environments, programs typically cannot run unless the execute bit is set, but PHP programs may be executed by the web server without directly invoking them on the operating system.",NA
434,OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.,NA
435,"An interaction error occurs when two entities have correct behavior when running independently of each other, but when they are integrated as components in a larger system or process, they introduce incorrect behaviors that may cause resultant weaknesses.",NA
435,"When a system or process combines multiple independent components, this often produces new, emergent behaviors at the system level.  However, if the interactions between these components are not fully accounted for, some of the emergent behaviors can be incorrect or even insecure.",NA
436,"Product A handles inputs or steps differently than Product B, which causes A to perform incorrect actions based on its perception of B's state.",NA
436,"This is generally found in proxies, firewalls, anti-virus software, and other intermediary devices that monitor, allow, deny, or modify traffic based on how the client or server is expected to behave.",NA
437,"A product acts as an intermediary or monitor between two or more endpoints, but it does not have a complete model of an endpoint's features, behaviors, or state, potentially causing the product to perform incorrect actions based on this incomplete model.",NA
439,"A's behavior or functionality changes with a new version of A, or a new environment, which is not known (or manageable) by B.",NA
44,A software system that accepts path input in the form of internal dot ('file.ordir') without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.,NA
440,"A feature, API, or function being used by a product behaves differently than the product expects.",NA
441,"The software receives a request, message, or directive from an upstream component, but the software does not sufficiently preserve the original source of the request before forwarding the request to an external actor that is outside of the software's control sphere. This causes the software to appear to be the source of the request, leading it to act as a proxy or other intermediary between the upstream component and the external actor.",NA
441,"If an attacker cannot directly contact a target, but the software has access to the target, then the attacker can send a request to the software and have it be forwarded from the target. The request would appear to be coming from the software's system, not the attacker's system. As a result, the attacker can bypass access controls (such as firewalls) or hide the source of malicious requests, since the requests would not be coming directly from the attacker.",NA
441,"Since proxy functionality and message-forwarding often serve a legitimate purpose, this issue only becomes a vulnerability when:",NA
441,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
443,This weakness can be found at CWE-113.,NA
444,"When malformed or abnormal HTTP requests are interpreted by one or more entities in the data flow between the user and the web server, such as a proxy or firewall, they can be interpreted inconsistently, allowing the attacker to ""smuggle"" a request to one device without the other device being aware of it.",NA
444,"An attacker could create a request to exploit a number of weaknesses including 1) the request can trick the web server to associate a URL with another URLs webpage and caching the contents of the webpage (web cache poisoning attack), 2) the request can be structured to bypass the firewall protection mechanisms and gain unauthorized access to a web application, and 3) the request can invoke a script or a page that returns client credentials (similar to a Cross Site Scripting attack).",NA
446,"The user interface does not correctly enable or configure a security feature, but the interface provides feedback that causes the user to believe that the feature is in a secure state.",NA
446,"When the user interface does not properly reflect what the user asks of it, then it can lead the user into a false sense of security. For example, the user might check a box to enable a security option to enable encrypted communications, but the software does not actually enable the encryption. Alternately, the user might provide a ""restrict ALL'"" access control rule, but the software only implements ""restrict SOME"".",NA
447,"A UI function for a security feature appears to be supported and gives feedback to the user that suggests that it is supported, but the underlying functionality is not implemented.",NA
448,A UI function is obsolete and the product does not warn the user.,NA
449,The UI performs the wrong action with respect to the user's request.,NA
45,A software system that accepts path input in the form of multiple internal dot ('file...dir') without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.,NA
450,The UI has multiple interpretations of user input but does not prompt the user when it selects the less secure interpretation.,NA
451,"The user interface (UI) does not properly represent critical information to the user, allowing the information - or its source - to be obscured or spoofed. This is often a component in phishing attacks.",NA
451,"If an attacker can cause the UI to display erroneous data, or to otherwise convince the user to display information that appears to come from a trusted source, then the attacker could trick the user into performing the wrong action. This is often a component in phishing attacks, but other kinds of problems exist. For example, if the UI is used to monitor the security state of a system or network, then omitting or obscuring an important indicator could prevent the user from detecting and reacting to a security-critical event.",NA
451,UI misrepresentation can take many forms:,NA
453,"The software, by default, initializes an internal variable with an insecure or less secure value than is possible.",NA
453,An attacker could gain access to and modify sensitive data or system information.,NA
454,The software initializes critical internal variables or data stores using inputs that can be modified by untrusted actors.,NA
454,"A software system should be reluctant to trust variables that have been initialized outside of its trust boundary, especially if they are initialized by users. The variables may have been initialized incorrectly. If an attacker can initialize the variable, then they can influence what the vulnerable system will do.",NA
454,An attacker could gain access to and modify sensitive data or system information.,NA
455,"The software does not exit or otherwise modify its operation when security-relevant errors occur during initialization, such as when a configuration file has a format error, which can cause the software to execute in a less secure fashion than intended by the administrator.",NA
455,The application could be placed in an insecure state that may allow an attacker to modify sensitive data or allow unintended logic to be executed.,NA
456,"The software does not initialize critical variables, which causes the execution environment to use unexpected values.",NA
456,"The uninitialized data may be invalid, causing logic errors within the program. In some cases, this could result in a security problem.",NA
457,"The code uses a variable that has not been initialized, leading to unpredictable or unintended results.",NA
457,"In some languages such as C and C++, stack variables are not initialized by default. They generally contain junk data with the contents of stack memory before the function was invoked. An attacker can sometimes control or read these contents. In other languages or conditions, a variable that is not explicitly initialized can be given a default value that has security implications, depending on the logic of the program. The presence of an uninitialized variable can sometimes indicate a typographic error in the code.",NA
457,"Initial variables usually contain junk, which can not be trusted for consistency. This can lead to denial of service conditions, or modify control flow in unexpected ways. In some cases, an attacker can ""pre-initialize"" the variable using previous actions, which might enable code execution. This can cause a race condition if a lock variable check passes when it should not.",NA
457,"Strings that are not initialized are especially dangerous, since many functions expect a null at the end -- and only at the end -- of a string.",NA
457,"In C, using an uninitialized char * in some string libraries will return incorrect results, as the libraries expect the null terminator to always be at the end of a string, even if the string is empty.",NA
458,"This weakness has been deprecated because its name and description did not match. The description duplicated CWE-454, while the name suggested a more abstract initialization problem. Please refer to CWE-665 for the more abstract problem.",NA
459,"The software does not properly ""clean up"" and remove temporary or supporting resources after they have been used.",NA
459,It is possible to overflow the number of temporary files because directories typically have limits on the number of files allowed. This could create a denial of service problem.,NA
46,A software system that accepts path input in the form of trailing space ('filedir ') without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.,NA
460,"The product does not clean up its state or incorrectly cleans up its state when an exception is thrown, leading to unexpected state or control flow.",NA
460,"Often, when functions or loops become complicated, some level of resource cleanup is needed throughout execution. Exceptions can disturb the flow of the code and prevent the necessary cleanup from happening.",NA
460,The code could be left in a bad state.,NA
460,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
462,Duplicate keys in associative lists can lead to non-unique keys being mistaken for an error.,NA
462,"A duplicate key entry -- if the alist is designed properly -- could be used as a constant time replace function. However, duplicate key entries could be inserted by mistake. Because of this ambiguity, duplicate key entries in an association list are not recommended and should not be allowed.",NA
463,The accidental deletion of a data-structure sentinel can cause serious programming logic problems.,NA
463,"Often times data-structure sentinels are used to mark structure of the data structure. A common example of this is the null character at the end of strings. Another common example is linked lists which may contain a sentinel to mark the end of the list. It is dangerous to allow this type of control data to be easily accessible. Therefore, it is important to protect from the deletion or modification outside of some wrapper interface which provides safety.",NA
463,Generally this error will cause the data structure to not work properly.,NA
463,"If a control character, such as NULL is removed, one may cause resource access control problems.",NA
464,The accidental addition of a data-structure sentinel can cause serious programming logic problems.,NA
464,"Data-structure sentinels are often used to mark the structure of data. A common example of this is the null character at the end of strings or a special sentinel to mark the end of a linked list. It is dangerous to allow this type of control data to be easily accessible. Therefore, it is important to protect from the addition or modification of sentinels.",NA
464,Generally this error will cause the data structure to not work properly by truncating the data.,NA
466,A function can return a pointer to memory that is outside of the buffer that the pointer is expected to reference.,NA
467,"The code calls sizeof() on a malloced pointer type, which always returns the wordsize/8. This can produce an unexpected result if the programmer intended to determine how much memory has been allocated.",NA
467,"The use of sizeof() on a pointer can sometimes generate useful information. An obvious case is to find out the wordsize on a platform. More often than not, the appearance of sizeof(pointer) indicates a bug.",NA
467,"This error can often cause one to allocate a buffer that is much smaller than what is needed, leading to resultant weaknesses such as buffer overflows.",NA
468,"In C and C++, one may often accidentally refer to the wrong memory due to the semantics of when math operations are implicitly scaled.",NA
468,Incorrect pointer scaling will often result in buffer overflow conditions. Confidentiality can be compromised if the weakness is in the context of a buffer over-read or under-read.,NA
468,Programmers may try to index from a pointer by adding a number of bytes. This is incorrect because C and C++ implicitly scale the operand by the size of the data type.,NA
469,"The application subtracts one pointer from another in order to determine size, but this calculation can be incorrect if the pointers do not exist in the same memory chunk.",NA
469,There is the potential for arbitrary code execution with privileges of the vulnerable program.,NA
47,A software system that accepts path input in the form of leading space (' filedir') without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.,NA
470,"The application uses external input with reflection to select which classes or code to use, but it does not sufficiently prevent the input from selecting improper classes or code.",NA
470,"If the application uses external inputs to determine which class to instantiate or which method to invoke, then an attacker could supply values to select unexpected classes or methods. If this occurs, then the attacker could create control flow paths that were not intended by the developer. These paths could bypass authentication or access control checks, or otherwise cause the application to behave in an unexpected manner. This situation becomes a doomsday scenario if the attacker can upload files into a location that appears on the application's classpath (CWE-427) or add new entries to the application's classpath (CWE-426). Under either of these conditions, the attacker can use reflection to introduce new, malicious behavior into the application.",NA
470,"The attacker might be able to execute code that is not directly accessible to the attacker. Alternately, the attacker could call unexpected code in the wrong place or the wrong time, possibly modifying critical system state.",NA
470,"The attacker might be able to use reflection to call the wrong code, possibly with unexpected arguments that violate the API (CWE-227). This could cause the application to exit or hang.",NA
470,"By causing the wrong code to be invoked, the attacker might be able to trigger a runtime error that leaks sensitive information in the error message, such as CWE-536.",NA
471,The software does not properly protect an assumed-immutable element from being modified by an attacker.,NA
471,"This occurs when a particular input is critical enough to the functioning of the application that it should not be modifiable at all, but it is. Certain resources are often assumed to be immutable when they are not, such as hidden form fields in web applications, cookies, and reverse DNS lookups.",NA
471,"Common data types that are attacked are environment variables, web application parameters, and HTTP headers.",NA
472,"The web application does not sufficiently verify inputs that are assumed to be immutable but are actually externally controllable, such as hidden form fields.",NA
472,"If a web product does not properly protect assumed-immutable values from modification in hidden form fields, parameters, cookies, or URLs, this can lead to modification of critical data. Web applications often mistakenly make the assumption that data passed to the client in hidden fields or cookies is not susceptible to tampering. Improper validation of data that are user-controllable can lead to the application processing incorrect, and often malicious, input.",NA
472,"For example, custom cookies commonly store session data or persistent data across sessions. This kind of session data is normally involved in security related decisions on the server side, such as user authentication and access control. Thus, the cookies might contain sensitive data such as user credentials and privileges. This is a dangerous practice, as it can often lead to improper reliance on the value of the client-provided cookie by the server side application.",NA
472,"Without appropriate protection mechanisms, the client can easily tamper with cookies and similar web data. Reliance on the cookies without detailed validation can lead to problems such as SQL injection. If you use cookie values for security related decisions on the server side, manipulating the cookies might lead to violations of security policies such as authentication bypassing, user impersonation and privilege escalation. In addition, storing sensitive data in the cookie without appropriate protection can also lead to disclosure of sensitive user data, especially data stored in persistent cookies.",NA
472,OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.,NA
473,"A PHP application does not properly protect against the modification of variables from external sources, such as query parameters or cookies. This can expose the application to numerous weaknesses that would not exist otherwise.",NA
473,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
474,The code uses a function that has inconsistent implementations across operating systems and versions.,NA
474,"The use of inconsistent implementations can cause changes in behavior when the code is ported or built under a different environment than the programmer expects, which can lead to security problems in some cases.",NA
474,"The implementation of many functions varies by platform, and at times, even by different versions of the same platform. Implementation differences can include:",NA
475,The behavior of this function is undefined unless its control parameter is set to a specific value.,NA
476,"A NULL pointer dereference occurs when the application dereferences a pointer that it expects to be valid, but is NULL, typically causing a crash or exit.",NA
476,"NULL pointer dereference issues can occur through a number of flaws, including race conditions, and simple programming omissions.",NA
476,"NULL pointer dereferences usually result in the failure of the process unless exception handling (on some platforms) is available and implemented. Even when exception handling is being used, it can still be very difficult to return the software to a safe state of operation.",NA
476,"In very rare circumstances and environments, code execution is possible.",NA
477,"The code uses deprecated or obsolete functions, which suggests that the code has not been actively reviewed or maintained.",NA
477,"As programming languages evolve, functions occasionally become obsolete due to:",NA
477,Functions that are removed are usually replaced by newer counterparts that perform the same task in some different and hopefully improved way.,NA
478,"The code does not have a default case in a switch statement, which might lead to complex logical errors and resultant weaknesses.",NA
478,"This flaw represents a common problem in software development, in which not all possible values for a variable are considered or handled by a given process. Because of this, further decisions are made based on poor information, and cascading failure results. This cascading failure may result in any number of security issues, and constitutes a significant failure in the system.",NA
478,"Depending on the logical circumstances involved, any consequences may result: e.g., issues of confidentiality, authentication, authorization, availability, integrity, accountability, or non-repudiation.",NA
479,The program defines a signal handler that calls a non-reentrant function.,NA
479,"Non-reentrant functions are functions that cannot safely be called, interrupted, and then recalled before the first call has finished without resulting in memory corruption. This can lead to an unexpected system state and unpredictable results with a variety of potential consequences depending on context, including denial of service and code execution.",NA
479,"Many functions are not reentrant, but some of them can result in the corruption of memory if they are used in a signal handler. The function call syslog() is an example of this. In order to perform its functionality, it allocates a small amount of memory as ""scratch space."" If syslog() is suspended by a signal call and the signal handler calls syslog(), the memory used by both of these functions enters an undefined, and possibly, exploitable state. Implementations of malloc() and free() manage metadata in global structures in order to track which memory is allocated versus which memory is available, but they are non-reentrant. Simultaneous calls to these functions can cause corruption of the metadata.",NA
479,It may be possible to execute arbitrary code through the use of a write-what-where condition.,NA
479,Signal race conditions often result in data corruption.,NA
48,A software system that accepts path input in the form of internal space ('file(SPACE)name') without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.,NA
480,"The programmer accidentally uses the wrong operator, which changes the application logic in security-relevant ways.",NA
480,These types of errors are generally the result of a typo.,NA
480,This weakness can cause unintended logic to be executed and other unexpected application behavior.,NA
481,The code uses an operator for assignment when the intention was to perform a comparison.,NA
481,"In many languages the compare statement is very close in appearance to the assignment statement and are often confused. This bug is generally the result of a typo and usually causes obvious problems with program execution. If the comparison is in an if statement, the if statement will usually evaluate the value of the right-hand side of the predicate.",NA
482,The code uses an operator for comparison when the intention was to perform an assignment.,NA
482,"In many languages, the compare statement is very close in appearance to the assignment statement; they are often confused.",NA
482,"The assignment will not take place, which should cause obvious program execution problems.",NA
482,This bug primarily originates from a typo.,NA
483,"The code does not explicitly delimit a block that is intended to contain 2 or more statements, creating a logic error.",NA
483,"In some languages, braces (or other delimiters) are optional for blocks. When the delimiter is omitted, it is possible to insert a logic error in which a statement is thought to be in a block but is not. In some cases, the logic error can have security implications.",NA
483,"This is a general logic error which will often lead to obviously-incorrect behaviors that are quickly noticed and fixed. In lightly tested or untested code, this error may be introduced it into a production environment and provide additional attack vectors by creating a control flow path leading to an unexpected state in the application. The consequences will depend on the types of behaviors that are being incorrectly executed.",NA
484,"The program omits a break statement within a switch or similar construct, causing code associated with multiple conditions to execute. This can cause problems when the programmer only intended to execute code associated with one condition.",NA
484,This can lead to critical code executing in situations where it should not.,NA
484,This weakness can cause unintended logic to be executed and other unexpected application behavior.,NA
486,"The program compares classes by name, which can cause it to use the wrong class when multiple classes can have the same name.",NA
486,"If the decision to trust the methods and data of an object is based on the name of a class, it is possible for malicious users to send objects of the same name as trusted classes and thereby gain the trust afforded to known classes and types.",NA
486,"If a program relies solely on the name of an object to determine identity, it may execute the incorrect or unintended code.",NA
487,"Java packages are not inherently closed; therefore, relying on them for code security is not a good practice.",NA
487,The purpose of package scope is to prevent accidental access by other parts of a program. This is an ease-of-software-development feature but not a security feature.,NA
487,Any data in a Java package can be accessed outside of the Java framework if the package is distributed.,NA
487,The data in a Java class can be modified by anyone outside of the Java framework if the packages is distributed.,NA
488,"The product does not sufficiently enforce boundaries between the states of different sessions, causing data to be provided to, or used by, the wrong session.",NA
488,"Data can ""bleed"" from one session to another through member variables of singleton objects, such as Servlets, and objects from a shared pool.",NA
488,"In the case of Servlets, developers sometimes do not understand that, unless a Servlet implements the SingleThreadModel interface, the Servlet is a singleton; there is only one instance of the Servlet, and that single instance is used and re-used to handle multiple requests that are processed simultaneously by different threads. A common result is that developers use Servlet member fields in such a way that one user may inadvertently see another user's data. In other words, storing user data in Servlet member fields introduces a data access race condition.",NA
488,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
489,"The application is deployed to unauthorized actors with debugging code still enabled or active, which can create unintended entry points or expose sensitive information.",NA
489,"A common development practice is to add ""back door"" code specifically designed for debugging or testing purposes that is not intended to be shipped or deployed with the application. These back door entry points create security risks because they are not considered during design or testing and fall outside of the expected operating conditions of the application.",NA
489,"The severity of the exposed debug application will depend on the particular instance. At the least, it will give an attacker sensitive information about the settings and mechanics of web applications on the server. At worst, as is often the case, the debug application will allow an attacker complete control over the web application and server, as well as confidential information that either of these access.",NA
489,"In web-based applications, debug code is used to test and modify web application properties, configuration information, and functions. If a debug application is left on a production server, this oversight during the ""software process"" allows attackers access to debug functionality.",NA
49,A software system that accepts path input in the form of trailing slash ('filedir/') without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.,NA
491,"A class has a cloneable() method that is not declared final, which allows an object to be created without calling the constructor. This can cause the object to be in an unexpected state.",NA
492,Inner classes are translated into classes that are accessible at package scope and may expose code that the programmer intended to keep private to attackers.,NA
492,"Inner classes quietly introduce several security concerns because of the way they are translated into Java bytecode. In Java source code, it appears that an inner class can be declared to be accessible only by the enclosing class, but Java bytecode has no concept of an inner class, so the compiler must transform an inner class declaration into a peer class with package level access to the original outer class. More insidiously, since an inner class can access private fields in its enclosing class, once an inner class becomes a peer class in bytecode, the compiler converts private fields accessed by the inner class into protected fields.",NA
492,"""Inner Classes"" data confidentiality aspects can often be overcome.",NA
493,"The product has a critical public variable that is not final, which allows the variable to be modified to contain unexpected values.",NA
493,"If a field is non-final and public, it can be changed once the value is set by any function that has access to the class which contains the field. This could lead to a vulnerability if other parts of the program make assumptions about the contents of that field.",NA
493,"Mobile code, such as a Java Applet, is code that is transmitted across a network and executed on a remote machine. Because mobile code developers have little if any control of the environment in which their code will execute, special security concerns become relevant. One of the biggest environmental threats results from the risk that the mobile code will run side-by-side with other, potentially malicious, mobile code. Because all of the popular web browsers execute code from multiple sources together in the same JVM, many of the security guidelines for mobile code are focused on preventing manipulation of your objects' state and behavior by adversaries who have access to the same virtual machine where your program is running.",NA
493,"Final provides security by only allowing non-mutable objects to be changed after being set. However, only objects which are not extended can be made final.",NA
493,The object could potentially be tampered with.,NA
493,The object could potentially allow the object to be read.,NA
494,The product downloads source code or an executable from a remote location and executes the code without sufficiently verifying the origin and integrity of the code.,NA
494,"An attacker can execute malicious code by compromising the host server, performing DNS spoofing, or modifying the code in transit.",NA
494,"Executing untrusted code could compromise the control flow of the program. The untrusted code could execute attacker-controlled commands, read or modify sensitive resources, or prevent the software from functioning correctly for legitimate users.",NA
494,OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.,NA
495,"The product has a method that is declared public, but returns a reference to a private data structure, which could then be modified in unexpected ways.",NA
495,The contents of the data structure can be modified from outside the intended scope.,NA
496,Assigning public data to a private array is equivalent to giving public access to the array.,NA
496,The contents of the array can be modified from outside the intended scope.,NA
497,The application does not properly prevent sensitive system-level information from being accessed by unauthorized actors who do not have the same level of access to the underlying system as the application does.,NA
497,"Network-based software, such as web applications, often runs on top of an operating system or similar environment.  When the application communicates with outside parties, details about the underlying system are expected to remain hidden, such as path names for data files, other OS users, installed packages, the application environment, etc. This system information may be provided by the application itself, or buried within diagnostic or debugging messages. Debugging information helps an adversary learn about the system and form an attack plan.",NA
497,"An information exposure occurs when system data or debugging information leaves the program through an output stream or logging function that makes it accessible to unauthorized parties. Using other weaknesses, an attacker could cause errors to occur; the response to these errors can reveal detailed system information, along with other impacts.  An attacker can use messages that reveal technologies, operating systems, and product versions to tune the attack against known vulnerabilities in these technologies. An application may use diagnostic methods that provide significant implementation details such as stack traces as part of its error handling mechanism.",NA
498,"The code contains a class with sensitive data, but the class is cloneable. The data can then be accessed by cloning the class.",NA
498,"Cloneable classes are effectively open classes, since data cannot be hidden in them. Classes that do not explicitly deny cloning can be cloned by any other class without running the constructor.",NA
498,"A class that can be cloned can be produced without executing the constructor. This is dangerous since the constructor may perform security-related checks. By allowing the object to be cloned, those checks may be bypassed.",NA
499,"The code contains a class with sensitive data, but the class does not explicitly deny serialization. The data can be accessed by serializing the class through another class.",NA
499,"Serializable classes are effectively open classes since data cannot be hidden in them. Classes that do not explicitly deny serialization can be serialized by any other class, which can then in turn use the data stored inside it.",NA
499,"an attacker can write out the class to a byte stream, then extract the important data from it.",NA
5,Information sent over a network can be compromised while in transit. An attacker may be able to read or modify the contents if the data are sent in plaintext or are weakly encrypted.,NA
50,A software system that accepts path input in the form of multiple leading slash ('//multiple/leading/slash') without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.,NA
500,"An object contains a public static field that is not marked final, which might allow it to be modified in unexpected ways.",NA
500,Public static variables can be read without an accessor and changed without a mutator by any classes in the application.,NA
500,"When a field is declared public but not final, the field can be read and written to by arbitrary Java code.",NA
500,The object could potentially be tampered with.,NA
500,The object could potentially allow the object to be read.,NA
501,The product mixes trusted and untrusted data in the same data structure or structured message.,NA
501,"A trust boundary can be thought of as line drawn through a program. On one side of the line, data is untrusted. On the other side of the line, data is assumed to be trustworthy. The purpose of validation logic is to allow data to safely cross the trust boundary - to move from untrusted to trusted. A trust boundary violation occurs when a program blurs the line between what is trusted and what is untrusted. By combining trusted and untrusted data in the same data structure, it becomes easier for programmers to mistakenly trust unvalidated data.",NA
502,The application deserializes untrusted data without sufficiently verifying that the resulting data will be valid.,NA
502,"It is often convenient to serialize objects for communication or to save them for later use. However, deserialized data or code can often be modified without using the provided accessor functions if it does not use cryptography to protect itself. Furthermore, any cryptography would still be client-side security -- which is a dangerous security assumption.",NA
502,Data that is untrusted can not be trusted to be well-formed.,NA
502,"When developers place no restrictions on ""gadget chains,"" or series of instances and method invocations that can self-execute during the deserialization process (i.e., before the object is returned to the caller), it is sometimes possible for attackers to leverage them to perform unauthorized actions, like generating a shell.",NA
502,"Serialization and deserialization refer to the process of taking program-internal object-related data, packaging it in a way that allows the data to be externally stored or transferred (""serialization""), then extracting the serialized data to reconstruct the original object (""deserialization"").",NA
502,Attackers can modify unexpected objects or data that was assumed to be safe from modification.,NA
502,"If a function is making an assumption on when to terminate, based on a sentry in a string, it could easily never terminate.",NA
502,"The consequences can vary widely, because it depends on which objects or methods are being deserialized, and how they are used. Making an assumption that the code in the deserialized object is valid is dangerous and can enable exploitation.",NA
502,OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.,NA
506,The application contains code that appears to be malicious in nature.,NA
506,"Malicious flaws have acquired colorful names, including Trojan horse, trapdoor, timebomb, and logic-bomb. A developer might insert malicious code with the intent to subvert the security of an application or its host system at some time in the future. It generally refers to a program that performs a useful service but exploits rights of the program's user in a way the user does not intend.",NA
507,"The software appears to contain benign or useful functionality, but it also contains code that is hidden from normal operation that violates the intended security policy of the user or the system administrator.",NA
508,Non-replicating malicious code only resides on the target system or software that is attacked; it does not attempt to spread to other systems.,NA
509,"Replicating malicious code, including viruses and worms, will attempt to attack other systems once it has successfully compromised the target system or software.",NA
51,A software system that accepts path input in the form of multiple internal slash ('/multiple//internal/slash/') without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.,NA
510,"A trapdoor is a hidden piece of code that responds to a special input, allowing its user access to resources without passing through the normal security enforcement mechanism.",NA
511,"The software contains code that is designed to disrupt the legitimate operation of the software (or its environment) when a certain time passes, or when a certain logical condition is met.",NA
511,"When the time bomb or logic bomb is detonated, it may perform a denial of service such as crashing the system, deleting critical data, or degrading system response time. This bomb might be placed within either a replicating or non-replicating Trojan horse.",NA
512,"The software collects personally identifiable information about a human user or the user's activities, but the software accesses this information using other resources besides itself, and it does not require that user's explicit approval or direct input into the software.",NA
512,"""Spyware"" is a commonly used term with many definitions and interpretations. In general, it is meant to software that collects information or installs functionality that human users might not allow if they were fully aware of the actions being taken by the software. For example, a user might expect that tax software would collect a social security number and include it when filing a tax return, but that same user would not expect gaming software to obtain the social security number from that tax software's data.",NA
514,A covert channel is a path that can be used to transfer information in a way not intended by the system's designers.,NA
514,Typically the system has not given authorization for the transmission and has no knowledge of its occurrence.,NA
515,A covert storage channel transfers information through the setting of bits by one program and the reading of those bits by another. What distinguishes this case from that of ordinary operation is that the bits are used to convey encoded information.,NA
515,"Covert storage channels occur when out-of-band data is stored in messages for the purpose of memory reuse. Covert channels are frequently classified as either storage or timing channels. Examples would include using a file intended to hold only audit information to convey user passwords--using the name of a file or perhaps status bits associated with it that can be read by all users to signal the contents of the file. Steganography, concealing information in such a manner that no one but the intended recipient knows of the existence of the message, is a good example of a covert storage channel.",NA
515,Covert storage channels may provide attackers with important information about the system in question.,NA
515,"If these messages or packets are sent with unnecessary data contained within, it may tip off malicious listeners as to the process that created the message. With this information, attackers may learn any number of things, including the hardware platform, operating system, or algorithms used by the sender. This information can be of significant value to the user in launching further attacks.",NA
516,This weakness can be found at CWE-385.,NA
52,A software system that accepts path input in the form of multiple trailing slash ('/multiple/trailing/slash//') without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.,NA
520,Allowing a .NET application to run at potentially escalated levels of access to the underlying operating and file systems can be dangerous and result in various forms of attacks.,NA
520,".NET server applications can optionally execute using the identity of the user authenticated to the client. The intention of this functionality is to bypass authentication and access control checks within the .NET application code. Authentication is done by the underlying web server (Microsoft Internet Information Service IIS), which passes the authenticated token, or unauthenticated anonymous token, to the .NET application. Using the token to impersonate the client, the application then relies on the settings within the NTFS directories and files to control access. Impersonation enables the application, on the server running the .NET application, to both execute code and access resources in the context of the authenticated and authorized user.",NA
521,"The product does not require that users should have strong passwords, which makes it easier for attackers to compromise user accounts.",NA
521,Authentication mechanisms often rely on a memorized secret (also known as a password) to provide an assertion of identity for a user of a system. It is therefore important that this password be of sufficient complexity and impractical for an adversary to guess. The specific requirements around how complex a password needs to be depends on the type of system being protected. Selecting the correct password requirements and enforcing them through implementation are critical to the overall success of the authentication mechanism.,NA
521,An attacker could easily guess user passwords and gain access user accounts.,NA
521,COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.,NA
521,Not enforcing the password policy stated in a products design can allow users to create passwords that do not provide the necessary level of protection.,NA
522,"The product transmits or stores authentication credentials, but it uses an insecure method that is susceptible to unauthorized interception and/or retrieval.",NA
522,An attacker could gain access to user accounts and access sensitive data used by the user accounts.,NA
522,COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.,NA
523,Login pages do not use adequate measures to protect the user name and password while they are in transit from the client to the server.,NA
523,"SSL (Secure Socket Layer) provides data confidentiality and integrity to HTTP. By encrypting HTTP messages, SSL protects from attackers eavesdropping or altering message contents.",NA
523,OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.,NA
524,"The code uses a cache that contains sensitive information, but the cache can be read by an actor outside of the intended control sphere.",NA
524,"   Applications may use caches to improve efficiency when communicating with remote entities or performing intensive calculations.  A cache maintains a pool of objects, threads, connections, pages, financial data, passwords, or other resources to minimize the time it takes to initialize and access these resources.  If the cache is accessible to unauthorized actors, attackers can read the cache and obtain this sensitive information. ",NA
525,The web application does not use an appropriate caching policy that specifies the extent to which each web page and associated form fields should be cached.,NA
525,"Browsers often store information in a client-side cache, which can leave behind sensitive information for other users to find and exploit, such as passwords or credit card numbers. The locations at most risk include public terminals, such as those in libraries and Internet cafes.",NA
526,Environmental variables may contain sensitive information about a remote server.,NA
527,"The product stores a CVS, git, or other repository in a directory, archive, or other resource that is stored, transferred, or otherwise made accessible to unauthorized actors.",NA
527,"Version control repositories such as CVS or git store version-specific metadata and other details within subdirectories. If these subdirectories are stored on a web server or added to an archive, then these could be used by an attacker. This information may include usernames, filenames, path root, IP addresses, and detailed ""diff"" data about how files have been changed - which could reveal source code snippets that were never intended to be made public.",NA
527,OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.,NA
528,"The product generates a core dump file in a directory, archive, or other resource that is stored, transferred, or otherwise made accessible to unauthorized actors.",NA
528,OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.,NA
529,The product stores access control list files in a directory or other container that is accessible to actors outside of the intended control sphere.,NA
529,Exposure of these access control list files may give the attacker information about the configuration of the site or system. This information may then be used to bypass the intended security policy or identify trusted systems from which an attack can be launched.,NA
529,OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.,NA
53,A software system that accepts path input in the form of multiple internal backslash ('\multiple\trailing\\slash') without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.,NA
530,A backup file is stored in a directory or archive that is made accessible to unauthorized actors.,NA
530,"Often, older backup files are renamed with an extension such as .~bk to distinguish them from production files. The source code for old files that have been renamed in this manner and left in the webroot can often be retrieved. This renaming may have been performed automatically by the web server, or manually by the administrator.",NA
530,"At a minimum, an attacker who retrieves this file would have all the information contained in it, whether that be database calls, the format of parameters accepted by the application, or simply information regarding the architectural structure of your site.",NA
530,OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.,NA
531,"Accessible test applications can pose a variety of security risks. Since developers or administrators rarely consider that someone besides themselves would even know about the existence of these applications, it is common for them to contain sensitive information or functions.",NA
532,Information written to log files can be of a sensitive nature and give valuable guidance to an attacker or expose sensitive user information.,NA
532,"While logging all information may be helpful during development stages, it is important that logging levels be set appropriately before a product ships so that sensitive user data and system information are not accidentally exposed to potential attackers.",NA
532,Different log files may be produced and stored for:,NA
532,"Logging sensitive user data often provides attackers with an additional, less-protected path to acquiring the information.",NA
532,COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.,NA
533,This entry has been deprecated because its abstraction was too low-level.  See CWE-532.,NA
534,This entry has been deprecated because its abstraction was too low-level.  See CWE-532.,NA
535,"A command shell error message indicates that there exists an unhandled exception in the web application code. In many cases, an attacker can leverage the conditions that cause these errors in order to gain unauthorized access to the system.",NA
536,A servlet error message indicates that there exists an unhandled exception in your web application code and may provide useful information to an attacker.,NA
536,"The error message may contain the location of the file in which the offending function is located. This may disclose the web root's absolute path as well as give the attacker the location of application files or configuration information. It may even disclose the portion of code that failed. In many cases, an attacker can use the data to launch further attacks against the system.",NA
537,"In many cases, an attacker can leverage the conditions that cause unhandled exception errors in order to gain unauthorized access to the system.",NA
538,"The product places sensitive information into files or directories that are accessible to actors who are allowed to have access to the files, but not to the sensitive information.",NA
538,OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.,NA
538,OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.,NA
539,"The web application uses persistent cookies, but the cookies contain sensitive information.",NA
539,"Cookies are small bits of data that are sent by the web application but stored locally in the browser. This lets the application use the cookie to pass information between pages and store variable information. The web application controls what information is stored in a cookie and how it is used. Typical types of information stored in cookies are session identifiers, personalization and customization information, and in rare cases even usernames to enable automated logins. There are two different types of cookies: session cookies and persistent cookies. Session cookies just live in the browser's memory and are not stored anywhere, but persistent cookies are stored on the browser's hard drive. This can cause security and privacy issues depending on the information stored in the cookie and how it is accessed.",NA
54,A software system that accepts path input in the form of trailing backslash ('filedir\') without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.,NA
540,Source code on a web server or repository often contains sensitive information and should generally not be accessible to users.,NA
540,"There are situations where it is critical to remove source code from an area or server. For example, obtaining Perl source code on a system allows an attacker to understand the logic of the script and extract extremely useful information such as code bugs or logins and passwords.",NA
541,"If an include file source is accessible, the file can contain usernames and passwords, as well as sensitive information pertaining to the application and system.",NA
542,This entry has been deprecated because its abstraction was too low-level.  See CWE-532.,NA
543,The software uses the singleton pattern when creating a resource within a multithreaded environment.,NA
543,The use of a singleton pattern may not be thread-safe.,NA
544,"The software does not use a standardized method for handling errors throughout the code, which might introduce inconsistent error handling and resultant weaknesses.",NA
544,"If the application handles error messages individually, on a one-by-one basis, this is likely to result in inconsistent error handling. The causes of errors may be lost. Also, detailed information about the causes of an error may be unintentionally returned to the user.",NA
544,OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.,NA
545,"This weakness has been deprecated because it partially overlaps CWE-470, it describes legitimate programmer behavior, and other portions will need to be integrated into other entries.",NA
546,"The code contains comments that suggest the presence of bugs, incomplete functionality, or weaknesses.",NA
546,"Many suspicious comments, such as BUG, HACK, FIXME, LATER, LATER2, TODO, in the code indicate missing security functionality and checking. Others indicate code problems that programmers should fix, such as hard-coded variables, error handling, not using stored procedures, and performance issues.",NA
546,Suspicious comments could be an indication that there are problems in the source code that may need to be fixed and is an indication of poor quality. This could lead to further bugs and the introduction of weaknesses.,NA
547,"The program uses hard-coded constants instead of symbolic names for security-critical values, which increases the likelihood of mistakes during code maintenance or security policy change.",NA
547,"If the developer does not find all occurrences of the hard-coded constants, an incorrect policy decision may be made if one of the constants is not changed. Making changes to these values will require code changes that may be difficult or impossible once the system is released to the field. In addition, these hard-coded values may become available to attackers if the code is ever disclosed.",NA
547,The existence of hardcoded constants could cause unexpected behavior and the introduction of weaknesses during code maintenance or when making changes to the code if all occurrences are not modified. The use of hardcoded constants is an indication of poor quality.,NA
548,"A directory listing is inappropriately exposed, yielding potentially sensitive information to attackers.",NA
548,A directory listing provides an attacker with the complete index of all the resources located inside of the directory. The specific risks and consequences vary depending on which files are listed and accessible.,NA
548,"Exposing the contents of a directory can lead to an attacker gaining access to source code or providing useful information for the attacker to devise exploits, such as creation times of files or any information that may be encoded in file names. The directory listing may also compromise private or confidential data.",NA
549,"The software does not mask passwords during entry, increasing the potential for attackers to observe and capture passwords.",NA
55,A software system that accepts path input in the form of single dot directory exploit ('/./') without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.,NA
550,"Certain conditions, such as network failure, will cause a server error message to be displayed.",NA
550,"While error messages in and of themselves are not dangerous, per se, it is what an attacker can glean from them that might cause eventual problems.",NA
550,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
551,"If a web server does not fully parse requested URLs before it examines them for authorization, it may be possible for an attacker to bypass authorization protection.",NA
551,"For instance, the character strings /./ and / both mean current directory. If /SomeDirectory is a protected directory and an attacker requests /./SomeDirectory, the attacker may be able to gain access to the resource if /./ is not converted to / before the authorization check is performed.",NA
551,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
552,"The product makes files or directories accessible to unauthorized actors, even though they should not be.",NA
552,"Web servers, FTP servers, and similar servers may store a set of files underneath a ""root"" directory that is accessible to the server's users.  Applications may store sensitive files underneath this root without also using access control to limit which users may request those files, if any.  Alternately, an application might package multiple files or directories into an archive file (e.g., ZIP or tar), but the application might not exclude sensitive files that are underneath those directories. ",NA
552,OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.,NA
552,OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.,NA
553,A possible shell file exists in /cgi-bin/ or other accessible directories. This is extremely dangerous and can be used by an attacker to execute commands on the web server.,NA
554,The ASP.NET application does not use an input validation framework.,NA
554,"Unchecked input leads to cross-site scripting, process control, and SQL injection vulnerabilities, among others.",NA
555,The J2EE application stores a plaintext password in a configuration file.,NA
555,"Storing a plaintext password in a configuration file allows anyone who can read the file to access the password-protected resource, making it an easy target for attackers.",NA
556,Configuring an ASP.NET application to run with impersonated credentials may give the application unnecessary privileges.,NA
556,The use of impersonated credentials allows an ASP.NET application to run with either the privileges of the client on whose behalf it is executing or with arbitrary privileges granted in its configuration.,NA
558,"The application uses the getlogin() function in a multithreaded context, potentially causing it to return incorrect values.",NA
558,"The getlogin() function returns a pointer to a string that contains the name of the user associated with the calling process. The function is not reentrant, meaning that if it is called from another process, the contents are not locked out and the value of the string can be changed by another process. This makes it very risky to use because the username can be changed by other processes, so the results of the function cannot be trusted.",NA
56,A software system that accepts path input in the form of asterisk wildcard ('filedir*') without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.,NA
560,The product calls umask() with an incorrect argument that is specified as if it is an argument to chmod().,NA
561,"The software contains dead code, which can never be executed.",NA
561,Dead code is source code that can never be executed in a running program. The surrounding code makes it impossible for a section of code to ever be executed.,NA
561,Dead code that results from code that can never be executed is an indication of problems with the source code that needs to be fixed and is an indication of poor quality.,NA
562,"A function returns the address of a stack variable, which will cause unintended program behavior, typically in the form of a crash.",NA
562,"Because local variables are allocated on the stack, when a program returns a pointer to a local variable, it is returning a stack address. A subsequent function call is likely to re-use this same stack address, thereby overwriting the value of the pointer, which no longer corresponds to the same variable since a function's stack frame is invalidated when it returns. At best this will cause the value of the pointer to change unexpectedly. In many cases it causes the program to crash the next time the pointer is dereferenced.",NA
563,"The variable's value is assigned but never used, making it a dead store.",NA
563,"After the assignment, the variable is either assigned another value or goes out of scope. It is likely that the variable is simply vestigial, but it is also possible that the unused variable points out a bug.",NA
563,This weakness could be an indication of a bug in the program or a deprecated variable that was not removed and is an indication of poor quality. This could lead to further bugs and the introduction of weaknesses.,NA
564,Using Hibernate to execute a dynamic SQL statement built with user-controlled input can allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.,NA
565,"The application relies on the existence or values of cookies when performing security-critical operations, but it does not properly ensure that the setting is valid for the associated user.",NA
565,"Attackers can easily modify cookies, within the browser or by implementing the client-side code outside of the browser. Reliance on cookies without detailed validation and integrity checking can allow attackers to bypass authentication, conduct injection attacks such as SQL injection and cross-site scripting, or otherwise modify inputs in unexpected ways.",NA
565,It is dangerous to use cookies to set a user's privileges. The cookie can be manipulated to escalate an attacker's privileges to an administrative level.,NA
565,OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.,NA
566,"The software uses a database table that includes records that should not be accessible to an actor, but it executes a SQL statement with a primary key that can be controlled by that actor.",NA
566,"When a user can set a primary key to any value, then the user can modify the key to point to unauthorized records.",NA
566,Database access control errors occur when:,NA
566,COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.,NA
567,"The product does not properly synchronize shared data, such as static variables across threads, which can lead to undefined behavior and unpredictable data changes.",NA
567,"Within servlets, shared static variables are not protected from concurrent access, but servlets are multithreaded. This is a typical programming mistake in J2EE applications, since the multithreading is handled by the framework. When a shared variable can be influenced by an attacker, one thread could wind up modifying the variable to contain data that is not valid for a different thread that is also using the data within the variable.",NA
567,Note that this weakness is not unique to servlets.,NA
567,"If the shared variable contains sensitive data, it may be manipulated or displayed in another user session. If this data is used to control the application, its value can be manipulated to cause the application to crash or perform poorly.",NA
568,The software contains a finalize() method that does not call super.finalize().,NA
568,The Java Language Specification states that it is a good practice for a finalize() method to call super.finalize().,NA
57,"The software contains protection mechanisms to restrict access to 'realdir/filename', but it constructs pathnames using external input in the form of 'fakedir/../realdir/filename' that are not handled by those mechanisms. This allows attackers to perform unauthorized actions against the targeted file.",NA
570,The software contains an expression that will always evaluate to false.,NA
571,The software contains an expression that will always evaluate to true.,NA
572,"The program calls a thread's run() method instead of calling start(), which causes the code to run in the thread of the caller instead of the callee.",NA
572,"In most cases a direct call to a Thread object's run() method is a bug. The programmer intended to begin a new thread of control, but accidentally called run() instead of start(), so the run() method will execute in the caller's thread of control.",NA
573,"The software does not follow or incorrectly follows the specifications as required by the implementation language, environment, framework, protocol, or platform.",NA
573,"When leveraging external functionality, such as an API, it is important that the caller does so in accordance with the requirements of the external functionality or else unintended behaviors may result, possibly leaving the system vulnerable to any number of exploits.",NA
574,The program violates the Enterprise JavaBeans (EJB) specification by using thread synchronization primitives.,NA
574,"The Enterprise JavaBeans specification requires that every bean provider follow a set of programming guidelines designed to ensure that the bean will be portable and behave consistently in any EJB container. In this case, the program violates the following EJB guideline: ""An enterprise bean must not use thread synchronization primitives to synchronize execution of multiple instances."" The specification justifies this requirement in the following way: ""This rule is required to ensure consistent runtime semantics because while some EJB containers may use a single JVM to execute all enterprise bean's instances, others may distribute the instances across multiple JVMs.""",NA
575,The program violates the Enterprise JavaBeans (EJB) specification by using AWT/Swing.,NA
575,"The Enterprise JavaBeans specification requires that every bean provider follow a set of programming guidelines designed to ensure that the bean will be portable and behave consistently in any EJB container. In this case, the program violates the following EJB guideline: ""An enterprise bean must not use the AWT functionality to attempt to output information to a display, or to input information from a keyboard."" The specification justifies this requirement in the following way: ""Most servers do not allow direct interaction between an application program and a keyboard/display attached to the server system.""",NA
576,The program violates the Enterprise JavaBeans (EJB) specification by using the java.io package.,NA
576,"The Enterprise JavaBeans specification requires that every bean provider follow a set of programming guidelines designed to ensure that the bean will be portable and behave consistently in any EJB container. In this case, the program violates the following EJB guideline: ""An enterprise bean must not use the java.io package to attempt to access files and directories in the file system."" The specification justifies this requirement in the following way: ""The file system APIs are not well-suited for business components to access data. Business components should use a resource manager API, such as JDBC, to store data.""",NA
577,The program violates the Enterprise JavaBeans (EJB) specification by using sockets.,NA
577,"The Enterprise JavaBeans specification requires that every bean provider follow a set of programming guidelines designed to ensure that the bean will be portable and behave consistently in any EJB container. In this case, the program violates the following EJB guideline: ""An enterprise bean must not attempt to listen on a socket, accept connections on a socket, or use a socket for multicast."" The specification justifies this requirement in the following way: ""The EJB architecture allows an enterprise bean instance to be a network socket client, but it does not allow it to be a network server. Allowing the instance to become a network server would conflict with the basic function of the enterprise bean-- to serve the EJB clients.""",NA
578,The program violates the Enterprise JavaBeans (EJB) specification by using the class loader.,NA
578,"The Enterprise JavaBeans specification requires that every bean provider follow a set of programming guidelines designed to ensure that the bean will be portable and behave consistently in any EJB container. In this case, the program violates the following EJB guideline: ""The enterprise bean must not attempt to create a class loader; obtain the current class loader; set the context class loader; set security manager; create a new security manager; stop the JVM; or change the input, output, and error streams."" The specification justifies this requirement in the following way: ""These functions are reserved for the EJB container. Allowing the enterprise bean to use these functions could compromise security and decrease the container's ability to properly manage the runtime environment.""",NA
579,"The application stores a non-serializable object as an HttpSession attribute, which can hurt reliability.",NA
579,"A J2EE application can make use of multiple JVMs in order to improve application reliability and performance. In order to make the multiple JVMs appear as a single application to the end user, the J2EE container can replicate an HttpSession object across multiple JVMs so that if one JVM becomes unavailable another can step in and take its place without disrupting the flow of the application. This is only possible if all session data is serializable, allowing the session to be duplicated between the JVMs.",NA
579,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
58,"The software contains a protection mechanism that restricts access to a long filename on a Windows operating system, but the software does not properly restrict access to the equivalent short ""8.3"" filename.",NA
58,"On later Windows operating systems, a file can have a ""long name"" and a short name that is compatible with older Windows file systems, with up to 8 characters in the filename and 3 characters for the extension. These ""8.3"" filenames, therefore, act as an alternate name for files with long names, so they are useful pathname equivalence manipulations.",NA
580,The software contains a clone() method that does not call super.clone() to obtain the new object.,NA
580,"All implementations of clone() should obtain the new object by calling super.clone(). If a class does not follow this convention, a subclass's clone() method will return an object of the wrong type.",NA
581,The software does not maintain equal hashcodes for equal objects.,NA
581,"Java objects are expected to obey a number of invariants related to equality. One of these invariants is that equal objects must have equal hashcodes. In other words, if a.equals(b) == true then a.hashCode() == b.hashCode().",NA
581,"If this invariant is not upheld, it is likely to cause trouble if objects of this class are stored in a collection. If the objects of the class in question are used as a key in a Hashtable or if they are inserted into a Map or Set, it is critical that equal objects have equal hashcodes.",NA
582,"The program declares an array public, final, and static, which is not sufficient to prevent the array's contents from being modified.",NA
582,"Because arrays are mutable objects, the final constraint requires that the array object itself be assigned only once, but makes no guarantees about the values of the array elements. Since the array is public, a malicious program can change the values stored in the array. As such, in most cases an array declared public, final and static is a bug.",NA
582,"Mobile code, in this case a Java Applet, is code that is transmitted across a network and executed on a remote machine. Because mobile code developers have little if any control of the environment in which their code will execute, special security concerns become relevant. One of the biggest environmental threats results from the risk that the mobile code will run side-by-side with other, potentially malicious, mobile code. Because all of the popular web browsers execute code from multiple sources together in the same JVM, many of the security guidelines for mobile code are focused on preventing manipulation of your objects' state and behavior by adversaries who have access to the same virtual machine where your program is running.",NA
583,The program violates secure coding principles for mobile code by declaring a finalize() method public.,NA
583,"A program should never call finalize explicitly, except to call super.finalize() inside an implementation of finalize(). In mobile code situations, the otherwise error prone practice of manual garbage collection can become a security threat if an attacker can maliciously invoke a finalize() method because it is declared with public access.",NA
584,"The code has a return statement inside a finally block, which will cause any thrown exception in the try block to be discarded.",NA
585,The software contains an empty synchronized block.,NA
585,An empty synchronized block does not actually accomplish any synchronization and may indicate a troubled section of code. An empty synchronized block can occur because code no longer needed within the synchronized block is commented out without removing the synchronized block.,NA
585,"An empty synchronized block will wait until nobody else is using the synchronizer being specified. While this may be part of the desired behavior, because you haven't protected the subsequent code by placing it inside the synchronized block, nothing is stopping somebody else from modifying whatever it was you were waiting for while you run the subsequent code.",NA
586,The software makes an explicit call to the finalize() method from outside the finalizer.,NA
586,"While the Java Language Specification allows an object's finalize() method to be called from outside the finalizer, doing so is usually a bad idea. For example, calling finalize() explicitly means that finalize() will be called more than once: the first time will be the explicit call and the last time will be the call that is made after the object is garbage collected.",NA
587,The software sets a pointer to a specific address other than NULL or 0.,NA
587,Using a fixed address is not portable because that address will probably not be valid in all environments or platforms.,NA
587,"If one executes code at a known location, an attacker might be able to inject code there beforehand.",NA
587,"If the code is ported to another platform or environment, the pointer is likely to be invalid and cause a crash.",NA
587,The data at a known pointer location can be easily read or influenced by an attacker.,NA
588,Casting a non-structure type to a structure type and accessing a field can lead to memory access errors or data corruption.,NA
588,Adjacent variables in memory may be corrupted by assignments performed on fields after the cast.,NA
588,Execution may end due to a memory access error.,NA
589,The software uses an API function that does not exist on all versions of the target platform. This could cause portability problems or inconsistencies that allow denial of service or other consequences.,NA
589,"Some functions that offer security features supported by the OS are not available on all versions of the OS in common use. Likewise, functions are often deprecated or made obsolete for security reasons and should not be used.",NA
59,"The software attempts to access a file based on the filename, but it does not properly prevent that filename from identifying a link or shortcut that resolves to an unintended resource.",NA
59,Soft links are a UNIX term that is synonymous with simple shortcuts on windows based platforms.,NA
59,An attacker may be able to traverse the file system to unintended locations and read or overwrite the contents of unexpected files. If the files are used for a security mechanism then an attacker may be able to bypass the mechanism.,NA
59,"Windows simple shortcuts, sometimes referred to as soft links, can be exploited remotely since a "".LNK"" file can be uploaded like a normal file. This can enable remote execution.",NA
59,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
590,"The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc().",NA
590,"When free() is called on an invalid pointer, the program's memory management data structures may become corrupted. This corruption can cause the program to crash or, in some circumstances, an attacker may be able to cause free() to operate on controllable memory locations to modify critical program variables or execute code.",NA
590,"There is the potential for arbitrary code execution with privileges of the vulnerable program via a ""write, what where"" primitive. If pointers to memory which hold user information are freed, a malicious user will be able to write 4 bytes anywhere in memory.",NA
591,"The application stores sensitive data in memory that is not locked, or that has been incorrectly locked, which might cause the memory to be written to swap files on disk by the virtual memory manager. This can make the data more accessible to external actors.",NA
591,"On Windows systems the VirtualLock function can lock a page of memory to ensure that it will remain present in memory and not be swapped to disk. However, on older versions of Windows, such as 95, 98, or Me, the VirtualLock() function is only a stub and provides no protection. On POSIX systems the mlock() call ensures that a page will stay resident in memory but does not guarantee that the page will not appear in the swap. Therefore, it is unsuitable for use as a protection mechanism for sensitive data. Some platforms, in particular Linux, do make the guarantee that the page will not be swapped, but this is non-standard and is not portable. Calls to mlock() also require supervisor privilege. Return values for both of these calls must be checked to ensure that the lock operation was actually successful.",NA
591,Sensitive data that is written to a swap file may be exposed.,NA
592,This weakness has been deprecated because it covered redundant concepts already described in CWE-287.,NA
593,The software modifies the SSL context after connection creation has begun.,NA
593,"If the program modifies the SSL_CTX object after creating SSL objects from it, there is the possibility that older SSL objects created from the original context could all be affected by that change.",NA
593,"No authentication takes place in this process, bypassing an assumed protection of encryption.",NA
593,The encrypted communication between a user and a trusted host may be subject to a sniffing attack.,NA
593,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
594,When the J2EE container attempts to write unserializable objects to disk there is no guarantee that the process will complete successfully.,NA
594,"In heavy load conditions, most J2EE application frameworks flush objects to disk to manage memory requirements of incoming requests. For example, session scoped objects, and even application scoped objects, are written to disk when required. While these application frameworks do the real work of writing objects to disk, they do not enforce that those objects be serializable, thus leaving the web application vulnerable to crashes induced by serialization failure. An attacker may be able to mount a denial of service attack by sending enough requests to the server to force the web application to save objects to disk.",NA
594,Data represented by unserializable objects can be corrupted.,NA
594,Non-serializability of objects can lead to system crash.,NA
595,"The program compares object references instead of the contents of the objects themselves, preventing it from detecting equivalent objects.",NA
595,"For example, in Java, comparing objects using == usually produces deceptive results, since the == operator compares object references rather than values; often, this means that using == for strings is actually comparing the strings' references, not their values.",NA
595,This weakness can lead to erroneous results that can cause unexpected application behaviors.,NA
596,This weakness has been deprecated.  It was poorly described and difficult to distinguish from other entries.  It was also inappropriate to assign a separate ID solely because of domain-specific considerations.  Its closest equivalent is CWE-1023.,NA
597,"The product uses the wrong operator when comparing a string, such as using ""=="" when the equals() method should be used instead.",NA
597,"In Java, using == or != to compare two strings for equality actually compares two objects for equality, not their values. Chances are good that the two references will never be equal. While this weakness often only affects program correctness, if the equality is used for a security decision, it could be leveraged to affect program security.",NA
598,The web application uses the HTTP GET method to process a request and includes sensitive information in the query string of that requests.,NA
598,"The query string can be saved in the browser's history, passed through Referers to other web sites, stored in web logs, or otherwise recorded in other sources.  If the query string contains sensitive information such as session identifiers, then attackers can use this information to launch further attacks. ",NA
598,"At a minimum, attackers can garner information from query strings that can be utilized in escalating their method of attack, such as information about the internal workings of the application or database column names. Successful exploitation of query string parameter vulnerabilities could lead to an attacker impersonating a legitimate user, obtaining proprietary data, or simply executing actions not intended by the application developers.",NA
599,The software uses OpenSSL and trusts or uses a certificate without using the SSL_get_verify_result() function to ensure that the certificate satisfies all necessary security requirements.,NA
599,"This could allow an attacker to use an invalid certificate to claim to be a trusted host, use expired certificates, or conduct other attacks that could be detected if the certificate is properly validated.",NA
599,"The data read may not be properly secured, it might be viewed by an attacker.",NA
599,Trust afforded to the system in question may allow for spoofing or redirection attacks.,NA
599,"If the certificate is not checked, it may be possible for a redirection or spoofing attack to allow a malicious host with a valid certificate to provide data under the guise of a trusted host. While the attacker in question may have a valid certificate, it may simply be a valid certificate for a different site. In order to ensure data integrity, we must check that the certificate is valid, and that it pertains to the site we wish to access.",NA
599,OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.,NA
6,The J2EE application is configured to use an insufficient session ID length.,NA
6,"If an attacker can guess or steal a session ID, then they may be able to take over the user's session (called session hijacking). The number of possible session IDs increases with increased session ID length, making it more difficult to guess or steal a session ID.",NA
6,"If an attacker can guess an authenticated user's session identifier, they can take over the user's session.",NA
6,COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.,NA
600,"The Servlet does not catch all exceptions, which may reveal sensitive debugging information.",NA
600,"When a Servlet throws an exception, the default error response the Servlet container sends back to the user typically includes debugging information. This information is of great value to an attacker. For example, a stack trace might show the attacker a malformed SQL query string, the type of database being used, and the version of the application container. This information enables the attacker to target known vulnerabilities in these components.",NA
601,"A web application accepts a user-controlled input that specifies a link to an external site, and uses that link in a Redirect. This simplifies phishing attacks.",NA
601,"An http parameter may contain a URL value and could cause the web application to redirect the request to the specified URL. By modifying the URL value to a malicious site, an attacker may successfully launch a phishing scam and steal user credentials. Because the server name in the modified link is identical to the original site, phishing attempts have a more trustworthy appearance.",NA
601,Phishing is a general term for deceptive attempts to coerce private information from users that will be used for identity theft.,NA
601,"The user may be redirected to an untrusted page that contains malware which may then compromise the user's machine. This will expose the user to extensive risk and the user's interaction with the web server may also be compromised if the malware conducts keylogging or other attacks that steal credentials, personally identifiable information (PII), or other important data.",NA
601,The user may be subjected to phishing attacks by being redirected to an untrusted page. The phishing attack may point to an attacker controlled web page that appears to be a trusted web site. The phishers may then steal the user's credentials and then use these credentials to access the legitimate web site.,NA
601,OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.,NA
602,The software is composed of a server that relies on the client to implement a mechanism that is intended to protect the server.,NA
602,"When the server relies on protection mechanisms placed on the client side, an attacker can modify the client-side behavior to bypass the protection mechanisms resulting in potentially unexpected interactions between the client and server. The consequences will vary, depending on what the mechanisms are trying to protect.",NA
602,"Client-side validation checks can be easily bypassed, allowing malformed or unexpected input to pass into the application, potentially as trusted data. This may lead to unexpected states, behaviors and possibly a resulting crash.",NA
602,"Client-side checks for authentication can be easily bypassed, allowing clients to escalate their access levels and perform unintended actions.",NA
602,COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.,NA
602,"Consider a product that consists of two or more processes or nodes that must interact closely, such as a client/server model. If the product uses protection schemes in the client in order to defend from attacks against the server, and the server does not use the same schemes, then an attacker could modify the client in a way that bypasses those schemes. This is a fundamental design flaw that is primary to many weaknesses.",NA
603,"A client/server product performs authentication within client code but not in server code, allowing server-side authentication to be bypassed via a modified client that omits the authentication check.",NA
603,Client-side authentication is extremely weak and may be breached easily. Any attacker may read the source code and reverse-engineer the authentication mechanism to access parts of the application which would otherwise be protected.,NA
603,COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.,NA
605,"When multiple sockets are allowed to bind to the same port, other services on that port may be stolen or spoofed.",NA
605,"On most systems, a combination of setting the SO_REUSEADDR socket option, and a call to bind() allows any process to bind to a port to which a previous process has bound with INADDR_ANY. This allows a user to bind to the specific address of a server bound to INADDR_ANY on an unprivileged port, and steal its UDP packets/TCP connection.",NA
605,Packets from a variety of network services may be stolen or the services spoofed.,NA
606,"The product does not properly check inputs that are used for loop conditions, potentially leading to a denial of service because of excessive looping.",NA
607,"A public or protected static final field references a mutable object, which allows the object to be changed by malicious code, or accidentally from another package.",NA
608,"An ActionForm class contains a field that has not been declared private, which can be accessed without using a setter or getter.",NA
609,"The program uses double-checked locking to access a resource without the overhead of explicit synchronization, but the locking is insufficient.",NA
609,"Double-checked locking refers to the situation where a programmer checks to see if a resource has been initialized, grabs a lock, checks again to see if the resource has been initialized, and then performs the initialization if it has not occurred yet. This should not be done, as is not guaranteed to work in all languages and on all architectures. In summary, other threads may not be operating inside the synchronous block and are not guaranteed to see the operations execute in the same order as they would appear inside the synchronous block.",NA
61,"The software, when opening a file or directory, does not sufficiently account for when the file is a symbolic link that resolves to a target outside of the intended control sphere. This could allow an attacker to cause the software to operate on unauthorized files.",NA
61,A software system that allows UNIX symbolic links (symlink) as part of paths whether in internal code or through user input can allow an attacker to spoof the symbolic link and traverse the file system to unintended locations or access arbitrary files. The symbolic link can permit an attacker to read/write/corrupt a file that they originally did not have permissions to access.,NA
61,These are typically reported for temporary files or privileged programs.,NA
610,The product uses an externally controlled name or reference that resolves to a resource that is outside of the intended control sphere.,NA
610,COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.,NA
611,"The software processes an XML document that can contain XML entities with URIs that resolve to documents outside of the intended sphere of control, causing the product to embed incorrect documents into its output.",NA
611,"XML documents optionally contain a Document Type Definition (DTD), which, among other features, enables the definition of XML entities. It is possible to define an entity by providing a substitution string in the form of a URI. The XML parser can access the contents of this URI and embed these contents back into the XML document for further processing.",NA
611,"By submitting an XML file that defines an external entity with a file:// URI, an attacker can cause the processing application to read the contents of a local file. For example, a URI such as ""file:///c:/winnt/win.ini"" designates (in Windows) the file C:\Winnt\win.ini, or file:///etc/passwd designates the password file in Unix-based systems. Using URIs with other schemes such as http://, the attacker can force the application to make outgoing requests to servers that the attacker cannot reach directly, which can be used to bypass firewall restrictions or hide the source of attacks such as port scanning.",NA
611,"Once the content of the URI is read, it is fed back into the application that is processing the XML. This application may echo back the data (e.g. in an error message), thereby exposing the file contents.",NA
611,"If the attacker is able to include a crafted DTD and a default entity resolver is enabled, the attacker may be able to access arbitrary files on the system.",NA
611,The DTD may include arbitrary HTTP requests that the server may execute. This could lead to other attacks leveraging the server's trust relationship with other entities.,NA
611,"The software could consume excessive CPU cycles or memory using a URI that points to a large file, or a device that always returns data such as /dev/random. Alternately, the URI could reference a file that contains many nested or recursive entity references to further slow down parsing.",NA
611,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
612,"The product creates a search index of private or sensitive documents, but it does not properly limit index access to actors who are authorized to see the original information.",NA
612,"Web sites and other document repositories may apply an indexing routine against a group of private documents to facilitate search.  If the index's results are available to parties who do not have access to the documents being indexed, then attackers could obtain portions of the documents by conducting targeted searches and reading the results.  The risk is especially dangerous if search results include surrounding text that was not part of the search query. This issue can appear in search engines that are not configured (or implemented) to ignore critical files that should remain hidden; even without permissions to download these files directly, the remote user could read them.",NA
613,"According to WASC, ""Insufficient Session Expiration is when a web site permits an attacker to reuse old session credentials or session IDs for authorization.""",NA
613,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
614,"The Secure attribute for sensitive cookies in HTTPS sessions is not set, which could cause the user agent to send those cookies in plaintext over an HTTP session.",NA
615,"While adding general comments is very useful, some programmers tend to leave important data, such as: filenames related to the web application, old links or links which were not meant to be browsed by users, old code fragments, etc.",NA
615,"An attacker who finds these comments can map the application's structure and files, expose hidden parts of the site, and study the fragments of code to reverse engineer the application, which may help develop further attacks against the site.",NA
616,"The PHP application uses an old method for processing uploaded files by referencing the four global variables that are set for each file (e.g. $varname, $varname_size, $varname_name, $varname_type). These variables could be overwritten by attackers, causing the application to process unauthorized files.",NA
616,"These global variables could be overwritten by POST requests, cookies, or other methods of populating or overwriting these variables. This could be used to read or process arbitrary files by providing values such as ""/etc/passwd"".",NA
617,"The product contains an assert() or similar statement that can be triggered by an attacker, which leads to an application exit or other behavior that is more severe than necessary.",NA
617,"While assertion is good for catching logic errors and reducing the chances of reaching more serious vulnerability conditions, it can still lead to a denial of service.",NA
617,"For example, if a server handles multiple simultaneous connections, and an assert() occurs in one single connection that causes all other connections to be dropped, this is a reachable assertion that leads to a denial of service.",NA
617,"An attacker that can trigger an assert statement can still lead to a denial of service if the relevant code can be triggered by an attacker, and if the scope of the assert() extends beyond the attacker's own session.",NA
618,"An ActiveX control is intended for use in a web browser, but it exposes dangerous methods that perform actions that are outside of the browser's security model (e.g. the zone or domain).",NA
618,"ActiveX controls can exercise far greater control over the operating system than typical Java or javascript. Exposed methods can be subject to various vulnerabilities, depending on the implemented behaviors of those methods, and whether input validation is performed on the provided arguments. If there is no integrity checking or origin validation, this method could be invoked by attackers.",NA
619,"If a database cursor is not closed properly, then it could become accessible to other users while retaining the same privileges that were originally assigned, leaving the cursor ""dangling.""",NA
619,"For example, an improper dangling cursor could arise from unhandled exceptions. The impact of the issue depends on the cursor's role, but SQL injection attacks are commonly possible.",NA
619,A cursor is a feature in Oracle PL/SQL and other languages that provides a handle for executing and accessing the results of SQL queries.,NA
619,"This issue is currently reported for unhandled exceptions, but it is theoretically possible any time the programmer does not close the cursor at the proper time.",NA
62,"The software, when opening a file or directory, does not sufficiently account for when the name is associated with a hard link to a target that is outside of the intended control sphere. This could allow an attacker to cause the software to operate on unauthorized files.",NA
62,"Failure for a system to check for hard links can result in vulnerability to different types of attacks. For example, an attacker can escalate their privileges if a file used by a privileged program is replaced with a hard link to a sensitive file (e.g. /etc/passwd). When the process opens the file, the attacker can assume the privileges of that process.",NA
620,"When setting a new password for a user, the product does not require knowledge of the original password, or using another form of authentication.",NA
620,"This could be used by an attacker to change passwords for another user, thus gaining the privileges associated with that user.",NA
620,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
621,"The product uses external input to determine the names of variables into which information is extracted, without verifying that the names of the specified variables are valid. This could cause the program to overwrite unintended variables.",NA
621,"For example, in PHP, extraction can be used to provide functionality similar to register_globals, a dangerous functionality that is frequently disabled in production systems. Calling extract() or import_request_variables() without the proper arguments could allow arbitrary global variables to be overwritten, including superglobals.",NA
621,"Similar functionality is possible in other interpreted languages, including custom languages.",NA
621,An attacker could modify sensitive data or program variables.,NA
622,"A product adds hooks to user-accessible API functions, but does not properly validate the arguments. This could lead to resultant vulnerabilities.",NA
622,"Such hooks can be used in defensive software that runs with privileges, such as anti-virus or firewall, which hooks kernel calls. When the arguments are not validated, they could be used to bypass the protection scheme or attack the product itself.",NA
623,"An ActiveX control is intended for restricted use, but it has been marked as safe-for-scripting.",NA
623,"This might allow attackers to use dangerous functionality via a web page that accesses the control, which can lead to different resultant vulnerabilities, depending on the control's behavior.",NA
624,"The product uses a regular expression that either (1) contains an executable component with user-controlled inputs, or (2) allows a user to enable execution by inserting pattern modifiers.",NA
624,"Case (2) is possible in the PHP preg_replace() function, and possibly in other languages when a user-controlled input is inserted into a string that is later parsed as a regular expression.",NA
625,The product uses a regular expression that does not sufficiently restrict the set of allowed values.,NA
625,"This effectively causes the regexp to accept substrings that match the pattern, which produces a partial comparison to the target. In some cases, this can lead to other weaknesses. Common errors include:",NA
625,This problem is frequently found when the regular expression is used in input validation or security features such as authentication.,NA
626,The product does not properly handle null bytes or NUL characters when passing data between different representations or components.,NA
626,"A null byte (NUL character) can have different meanings across representations or languages. For example, it is a string terminator in standard C libraries, but Perl and PHP strings do not treat it as a terminator. When two representations are crossed - such as when Perl or PHP invokes underlying C functionality - this can produce an interaction error with unexpected results. Similar issues have been reported for ASP. Other interpreters written in C might also be affected.",NA
626,The poison null byte is frequently useful in path traversal attacks by terminating hard-coded extensions that are added to a filename. It can play a role in regular expression processing in PHP.,NA
627,"In a language where the user can influence the name of a variable at runtime, if the variable names are not controlled, an attacker can read or write to arbitrary variables, or access arbitrary functions.",NA
627,"The resultant vulnerabilities depend on the behavior of the application, both at the crossover point and in any control/data flow that is reachable by the related variables or functions.",NA
627,"Many interpreted languages support the use of a ""$$varname"" construct to set a variable whose name is specified by the $varname variable. In PHP, these are referred to as ""variable variables."" Functions might also be invoked using similar syntax, such as $$funcname(arg1, arg2).",NA
627,An attacker could gain unauthorized access to internal program variables and execute arbitrary code.,NA
628,"The product calls a function, procedure, or routine with arguments that are not correctly specified, leading to always-incorrect behavior and resultant weaknesses.",NA
628,"There are multiple ways in which this weakness can be introduced, including:",NA
628,This weakness can cause unintended behavior and can lead to additional weaknesses such as allowing an attacker to gain unintended access to system resources.,NA
636,"When the product encounters an error condition or failure, its design requires it to fall back to a state that is less secure than other options that are available, such as selecting the weakest encryption algorithm or using the most permissive access control restrictions.",NA
636,"By entering a less secure state, the product inherits the weaknesses associated with that state, making it easier to compromise. At the least, it causes administrators to have a false sense of security. This weakness typically occurs as a result of wanting to ""fail functional"" to minimize administration and support costs, instead of ""failing safe.""",NA
636,"Intended access restrictions can be bypassed, which is often contradictory to what the product's administrator expects.",NA
637,"The software uses a more complex mechanism than necessary, which could lead to resultant weaknesses when the mechanism is not correctly understood, modeled, configured, implemented, or used.",NA
637,"Security mechanisms should be as simple as possible. Complex security mechanisms may engender partial implementations and compatibility problems, with resulting mismatches in assumptions and implemented security. A corollary of this principle is that data specifications should be as simple as possible, because complex data specifications result in complex validation code. Complex tasks and systems may also need to be guarded by complex security checks, so simple systems should be preferred.",NA
638,"The software does not perform access checks on a resource every time the resource is accessed by an entity, which can create resultant weaknesses if that entity's rights or privileges change over time.",NA
638,"A user might retain access to a critical resource even after privileges have been revoked, possibly allowing access to privileged functionality or sensitive information, depending on the role of the resource.",NA
639,The system's authorization functionality does not prevent one user from gaining access to another user's data or record by modifying the key value identifying the data.,NA
639,"Retrieval of a user record occurs in the system based on some key value that is under user control. The key would typically identify a user-related record stored in the system and would be used to lookup that record for presentation to the user. It is likely that an attacker would have to be an authenticated user in the system. However, the authorization process would not properly check the data access operation to ensure that the authenticated user performing the operation has sufficient entitlements to perform the requested data access, hence bypassing any other authorization checks present in the system.",NA
639,"For example, attackers can look at places where user specific data is retrieved (e.g. search screens) and determine whether the key for the item being looked up is controllable externally. The key may be a hidden field in the HTML form field, might be passed as a URL parameter or as an unencrypted cookie variable, then in each of these cases it will be possible to tamper with the key value.",NA
639,One manifestation of this weakness is when a system uses sequential or otherwise easily-guessable session IDs that would allow one user to easily switch to another user's session and read/modify their data.,NA
639,Access control checks for specific user data or functionality can be bypassed.,NA
639,Horizontal escalation of privilege is possible (one user can view/modify information of another user).,NA
639,"Vertical escalation of privilege is possible if the user-controlled key is actually a flag that indicates administrator status, allowing the attacker to gain administrative access.",NA
639,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
64,"The software, when opening a file or directory, does not sufficiently handle when the file is a Windows shortcut (.LNK) whose target is outside of the intended control sphere. This could allow an attacker to cause the software to operate on unauthorized files.",NA
64,The shortcut (file with the .lnk extension) can permit an attacker to read/write a file that they originally did not have permissions to access.,NA
640,"The software contains a mechanism for users to recover or change their passwords without knowing the original password, but the mechanism is weak.",NA
640,"It is common for an application to have a mechanism that provides a means for a user to gain access to their account in the event they forget their password. Very often the password recovery mechanism is weak, which has the effect of making it more likely that it would be possible for a person other than the legitimate system user to gain access to that user's account. Weak password recovery schemes completely undermine a strong password authentication scheme.",NA
640,"This weakness may be that the security question is too easy to guess or find an answer to (e.g. because the question is too common, or the answers can be found using social media). Or there might be an implementation weakness in the password recovery mechanism code that may for instance trick the system into e-mailing the new password to an e-mail account other than that of the user. There might be no throttling done on the rate of password resets so that a legitimate user can be denied service by an attacker if an attacker tries to recover their password in a rapid succession. The system may send the original password to the user rather than generating a new temporary password. In summary, password recovery functionality, if not carefully designed and implemented can often become the system's weakest link that can be misused in a way that would allow an attacker to gain unauthorized access to the system.",NA
640,An attacker could gain unauthorized access to the system by retrieving legitimate user's authentication credentials.,NA
640,An attacker could deny service to legitimate system users by launching a brute force attack on the password recovery mechanism using user ids of legitimate users.,NA
640,The system's security functionality is turned against the system by the attacker.,NA
640,COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.,NA
641,"The application constructs the name of a file or other resource using input from an upstream component, but it does not restrict or incorrectly restricts the resulting name.",NA
641,"This may produce resultant weaknesses. For instance, if the names of these resources contain scripting characters, it is possible that a script may get executed in the client's browser if the application ever displays the name of the resource on a dynamically generated web page. Alternately, if the resources are consumed by some application parser, a specially crafted name can exploit some vulnerability internal to the parser, potentially resulting in execution of arbitrary code on the server machine. The problems will vary based on the context of usage of such malformed resource names and whether vulnerabilities are present in or assumptions are made by the targeted technology that would make code execution possible.",NA
641,Execution of arbitrary code in the context of usage of the resources with dangerous names.,NA
641,Crash of the consumer code of these resources resulting in information leakage or denial of service.,NA
641,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
642,"The software stores security-critical state information about its users, or the software itself, in a location that is accessible to unauthorized actors.",NA
642,"If an attacker can modify the state information without detection, then it could be used to perform unauthorized actions or access unexpected resources, since the application programmer does not expect that the state can be changed.",NA
642,"State information can be stored in various locations such as a cookie, in a hidden web form field, input parameter or argument, an environment variable, a database record, within a settings file, etc. All of these locations have the potential to be modified by an attacker. When this state information is used to control security or determine resource usage, then it may create a vulnerability. For example, an application may perform authentication, then save the state in an ""authenticated=true"" cookie. An attacker may simply create this cookie in order to bypass the authentication.",NA
642,"An attacker could potentially modify the state in malicious ways. If the state is related to the privileges or level of authentication that the user has, then state modification might allow the user to bypass authentication or elevate privileges.",NA
642,The state variables may contain sensitive information that should not be known by the client.,NA
642,"By modifying state variables, the attacker could violate the application's expectations for the contents of the state, leading to a denial of service due to an unexpected error condition.",NA
642,OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.,NA
643,"The software uses external input to dynamically construct an XPath expression used to retrieve data from an XML database, but it does not neutralize or incorrectly neutralizes that input. This allows an attacker to control the structure of the query.",NA
643,"The net effect is that the attacker will have control over the information selected from the XML database and may use that ability to control application flow, modify logic, retrieve unauthorized data, or bypass important checks (e.g. authentication).",NA
643,Controlling application flow (e.g. bypassing authentication).,NA
643,The attacker could read restricted XML content.,NA
643,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
644,"The application does not neutralize or incorrectly neutralizes web scripting syntax in HTTP headers that can be used by web browser components that can process raw headers, such as Flash.",NA
644,An attacker may be able to conduct cross-site scripting and other attacks against users who have these components enabled.,NA
644,"If an application does not neutralize user controlled data being placed in the header of an HTTP response coming from the server, the header may contain a script that will get executed in the client's browser context, potentially resulting in a cross site scripting vulnerability or possibly an HTTP response splitting attack. It is important to carefully control data that is being placed both in HTTP response header and in the HTTP response body to ensure that no scripting syntax is present, taking various encodings into account.",NA
644,Run arbitrary code.,NA
644,Attackers may be able to obtain sensitive information.,NA
645,"The software contains an account lockout protection mechanism, but the mechanism is too restrictive and can be triggered too easily, which allows attackers to deny service to legitimate users by causing their accounts to be locked out.",NA
645,"Account lockout is a security feature often present in applications as a countermeasure to the brute force attack on the password based authentication mechanism of the system. After a certain number of failed login attempts, the users' account may be disabled for a certain period of time or until it is unlocked by an administrator. Other security events may also possibly trigger account lockout. However, an attacker may use this very security feature to deny service to legitimate system users. It is therefore important to ensure that the account lockout security mechanism is not overly restrictive.",NA
645,Users could be locked out of accounts.,NA
645,COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.,NA
646,"The software allows a file to be uploaded, but it relies on the file name or extension of the file to determine the appropriate behaviors. This could be used by attackers to cause the file to be misclassified and processed in a dangerous fashion.",NA
646,"An application might use the file name or extension of of a user-supplied file to determine the proper course of action, such as selecting the correct process to which control should be passed, deciding what data should be made available, or what resources should be allocated. If the attacker can cause the code to misclassify the supplied file, then the wrong action could occur. For example, an attacker could supply a file that ends in a "".php.gif"" extension that appears to be a GIF image, but would be processed as PHP code. In extreme cases, code execution is possible, but the attacker could also cause exhaustion of resources, denial of service, exposure of debug or system data (including application source code), or being bound to a particular server side process. This weakness may be due to a vulnerability in any of the technologies used by the web and application servers, due to misconfiguration, or resultant from another flaw in the application itself.",NA
646,An attacker may be able to read sensitive data.,NA
646,An attacker may be able to cause a denial of service.,NA
646,An attacker may be able to gain privileges.,NA
647,The software defines policy namespaces and makes authorization decisions based on the assumption that a URL is canonical. This can allow a non-canonical URL to bypass the authorization.,NA
647,"If an application defines policy namespaces and makes authorization decisions based on the URL, but it does not require or convert to a canonical URL before making the authorization decision, then it opens the application to attack. For example, if the application only wants to allow access to http://www.example.com/mypage, then the attacker might be able to bypass this restriction using equivalent URLs such as:",NA
647,Therefore it is important to specify access control policy that is based on the path information in some canonical form with all alternate encodings rejected (which can be accomplished by a default deny rule).,NA
647,An attacker may be able to bypass the authorization mechanism to gain access to the otherwise-protected URL.,NA
647,"If a non-canonical URL is used, the server may choose to return the contents of the file, instead of pre-processing the file (e.g. as a program).",NA
647,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
648,The application does not conform to the API requirements for a function call that requires extra privileges. This could allow attackers to gain privileges by causing the function to be called incorrectly.,NA
648,"When an application contains certain functions that perform operations requiring an elevated level of privilege, the caller of a privileged API must be careful to:",NA
648,"If the caller of the API does not follow these requirements, then it may allow a malicious user or process to elevate their privilege, hijack the process, or steal sensitive data.",NA
648,"For instance, it is important to know if privileged APIs do not shed their privileges before returning to the caller or if the privileged function might make certain assumptions about the data, context or state information passed to it by the caller. It is important to always know when and how privileged APIs can be called in order to ensure that their elevated level of privilege cannot be exploited.",NA
648,An attacker may be able to elevate privileges.,NA
648,An attacker may be able to obtain sensitive information.,NA
648,An attacker may be able to execute code.,NA
649,"The software uses obfuscation or encryption of inputs that should not be mutable by an external actor, but the software does not use integrity checks to detect if those inputs have been modified.",NA
649,"When an application relies on obfuscation or incorrectly applied / weak encryption to protect client-controllable tokens or parameters, that may have an effect on the user state, system state, or some decision made on the server. Without protecting the tokens/parameters for integrity, the application is vulnerable to an attack where an adversary blindly traverses the space of possible values of the said token/parameter in order to attempt to gain an advantage. The goal of the attacker is to find another admissible value that will somehow elevate their privileges in the system, disclose information or change the behavior of the system in some way beneficial to the attacker. If the application does not protect these critical tokens/parameters for integrity, it will not be able to determine that these values have been tampered with. Measures that are used to protect data for confidentiality should not be relied upon to provide the integrity service.",NA
649,"The inputs could be modified without detection, causing the software to have unexpected system state or make incorrect security decisions.",NA
649,OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.,NA
65,"The software, when opening a file or directory, does not sufficiently handle when the name is associated with a hard link to a target that is outside of the intended control sphere. This could allow an attacker to cause the software to operate on unauthorized files.",NA
65,"Failure for a system to check for hard links can result in vulnerability to different types of attacks. For example, an attacker can escalate their privileges if a file used by a privileged program is replaced with a hard link to a sensitive file (e.g. AUTOEXEC.BAT). When the process opens the file, the attacker can assume the privileges of that process, or prevent the program from accurately processing data.",NA
650,"The server contains a protection mechanism that assumes that any URI that is accessed using HTTP GET will not cause a state change to the associated resource. This might allow attackers to bypass intended access restrictions and conduct resource modification and deletion attacks, since some applications allow GET to modify state.",NA
650,"The HTTP GET method and some other methods are designed to retrieve resources and not to alter the state of the application or resources on the server side. Furthermore, the HTTP specification requires that GET requests (and other requests) should not have side effects. Believing that it will be enough to prevent unintended resource alterations, an application may disallow the HTTP requests to perform DELETE, PUT and POST operations on the resource representation. However, there is nothing in the HTTP protocol itself that actually prevents the HTTP GET method from performing more than just query of the data. Developers can easily code programs that accept a HTTP GET request that do in fact create, update or delete data on the server. For instance, it is a common practice with REST based Web Services to have HTTP GET requests modifying resources on the server side. However, whenever that happens, the access control needs to be properly enforced in the application. No assumptions should be made that only HTTP DELETE, PUT, POST, and other methods have the power to alter the representation of the resource being accessed in the request.",NA
650,An attacker could escalate privileges.,NA
650,An attacker could modify resources.,NA
650,An attacker could obtain sensitive information.,NA
651,The Web services architecture may require exposing a Web Service Definition Language (WSDL) file that contains information on the publicly accessible services and how callers of these services should interact with them (e.g. what parameters they expect and what types they return).,NA
651,An information exposure may occur if any of the following apply:,NA
651,The attacker may find sensitive information located in the WSDL file.,NA
652,"The software uses external input to dynamically construct an XQuery expression used to retrieve data from an XML database, but it does not neutralize or incorrectly neutralizes that input. This allows an attacker to control the structure of the query.",NA
652,"The net effect is that the attacker will have control over the information selected from the XML database and may use that ability to control application flow, modify logic, retrieve unauthorized data, or bypass important checks (e.g. authentication).",NA
652,An attacker might be able to read sensitive information from the XML database.,NA
652,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
653,"The product does not sufficiently compartmentalize functionality or processes that require different privilege levels, rights, or permissions.",NA
653,"When a weakness occurs in functionality that is accessible by lower-privileged users, then without strong boundaries, an attack might extend the scope of the damage to higher-privileged users.",NA
653,The exploitation of a weakness in low-privileged areas of the software can be leveraged to reach higher-privileged areas without having to overcome any additional obstacles.,NA
653,COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.,NA
654,"A protection mechanism relies exclusively, or to a large extent, on the evaluation of a single condition or the integrity of a single object or entity in order to make a decision about granting access to restricted resources or functionality.",NA
654,"If the single factor is compromised (e.g. by theft or spoofing), then the integrity of the entire security mechanism can be violated with respect to the user that is identified by that factor.",NA
654,"It can become difficult or impossible for the product to be able to distinguish between legitimate activities by the entity who provided the factor, versus illegitimate activities by an attacker.",NA
655,"The software has a protection mechanism that is too difficult or inconvenient to use, encouraging non-malicious users to disable or bypass the mechanism, whether by accident or on purpose.",NA
655,"By bypassing the security mechanism, a user might leave the system in a less secure state than intended by the administrator, making it more susceptible to compromise.",NA
656,"The software uses a protection mechanism whose strength depends heavily on its obscurity, such that knowledge of its algorithms or key data is sufficient to defeat the mechanism.",NA
656,"This reliance on ""security through obscurity"" can produce resultant weaknesses if an attacker is able to reverse engineer the inner workings of the mechanism. Note that obscurity can be one small part of defense in depth, since it can create more work for an attacker; however, it is a significant risk if used as the primary means of protection.",NA
656,The security mechanism can be bypassed easily.,NA
656,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
657,The product violates well-established principles for secure design.,NA
657,"This can introduce resultant weaknesses or make it easier for developers to introduce related weaknesses during implementation. Because code is centered around design, it can be resource-intensive to fix design problems.",NA
66,"The product does not handle or incorrectly handles a file name that identifies a ""virtual"" resource that is not directly specified within the directory that is associated with the file name, causing the product to perform file-based operations on a resource that is not a file.",NA
66,"Virtual file names are represented like normal file names, but they are effectively aliases for other resources that do not behave like normal files. Depending on their functionality, they could be alternate entities. They are not necessarily listed in directories.",NA
662,"The software utilizes multiple threads or processes to allow temporary access to a shared resource that can only be exclusive to one process at a time, but it does not properly synchronize these actions, which might cause simultaneous accesses of this resource by multiple threads or processes.",NA
663,The software calls a non-reentrant function in a concurrent context in which a competing code sequence (e.g. thread or signal handler) may have an opportunity to call the same function or otherwise influence its state.,NA
664,"The software does not maintain or incorrectly maintains control over a resource throughout its lifetime of creation, use, and release.",NA
664,"Resources often have explicit instructions on how to be created, used and destroyed. When software does not follow these instructions, it can lead to unexpected behaviors and potentially exploitable states.",NA
664,"Even without explicit instructions, various principles are expected to be adhered to, such as ""Do not use an object until after its creation is complete,"" or ""do not use an object after it has been slated for destruction.""",NA
665,"The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.",NA
665,"This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",NA
665,"When reusing a resource such as memory or a program variable, the original contents of that resource may not be cleared before it is sent to an untrusted party.",NA
665,"If security-critical decisions rely on a variable having a ""0"" or equivalent value, and the programming language performs this initialization on behalf of the programmer, then a bypass of security may occur.",NA
665,"The uninitialized data may contain values that cause program flow to change in ways that the programmer did not intend. For example, if an uninitialized variable is used as an array index in C, then its previous contents may produce an index that is outside the range of the array, possibly causing a crash or an exit in other environments.",NA
665,"This weakness can occur in code paths that are not well-tested, such as rare error conditions. This is because the use of uninitialized data would be noticed as a bug during frequently-used functionality.",NA
666,"The software performs an operation on a resource at the wrong phase of the resource's lifecycle, which can lead to unexpected behaviors.",NA
666,"When a developer wants to initialize, use or release a resource, it is important to follow the specifications outlined for how to operate on that resource and to ensure that the resource is in the expected state. In this case, the software wants to perform a normally valid operation, initialization, use or release, on a resource when it is in the incorrect phase of its lifetime.",NA
667,"The software does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.",NA
667,Inconsistent locking discipline can lead to deadlock.,NA
668,"The product exposes a resource to the wrong control sphere, providing unintended actors with inappropriate access to the resource.",NA
668,"Resources such as files and directories may be inadvertently exposed through mechanisms such as insecure permissions, or when a program accidentally operates on the wrong object. For example, a program may intend that private files can only be provided to a specific user. This effectively defines a control sphere that is intended to prevent attackers from accessing these private files. If the file permissions are insecure, then parties other than the user will be able to access those files.",NA
668,"A separate control sphere might effectively require that the user can only access the private files, but not any other files on the system. If the program does not ensure that the user is only requesting private files, then the user might be able to access other files on the system.",NA
668,"In either case, the end result is that a resource has been exposed to the wrong party.",NA
668,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
669,"The product does not properly transfer a resource/behavior to another sphere, or improperly imports a resource/behavior from another sphere, in a manner that provides unintended control over that resource.",NA
669,"A ""control sphere"" is a set of resources and behaviors that are accessible to a single actor, or a group of actors. A product's security model will typically define multiple spheres, possibly implicitly. For example, a server might define one sphere for ""administrators"" who can create new user accounts with subdirectories under /home/server/, and a second sphere might cover the set of users who can create or delete files within their own subdirectories. A third sphere might be ""users who are authenticated to the operating system on which the product is installed."" Each sphere has different sets of actors and allowable behaviors.",NA
669,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
67,"The software constructs pathnames from user input, but it does not handle or incorrectly handles a pathname containing a Windows device name such as AUX or CON. This typically leads to denial of service or an information exposure when the application attempts to process the pathname as a regular file.",NA
67,"Not properly handling virtual filenames (e.g. AUX, CON, PRN, COM1, LPT1) can result in different types of vulnerabilities. In some cases an attacker can request a device via injection of a virtual filename in a URL, which may cause an error that leads to a denial of service or an error page that reveals sensitive information. A software system that allows device names to bypass filtering runs the risk of an attacker injecting malicious code in a file with the name of a device.",NA
67,"Historically, there was a bug in the Windows operating system that caused a blue screen of death. Even after that issue was fixed DOS device names continue to be a factor.",NA
670,"The code contains a control flow path that does not reflect the algorithm that the path is intended to implement, leading to incorrect behavior any time this path is navigated.",NA
670,"This weakness captures cases in which a particular code segment is always incorrect with respect to the algorithm that it is implementing. For example, if a C programmer intends to include multiple statements in a single block but does not include the enclosing braces (CWE-483), then the logic is always incorrect. This issue is in contrast to most weaknesses in which the code usually behaves correctly, except when it is externally manipulated in malicious ways.",NA
670,"This issue typically appears in rarely-tested code, since the ""always-incorrect"" nature will be detected as a bug during normal usage.",NA
671,The product uses security features in a way that prevents the product's administrator from tailoring security settings to reflect the environment in which the product is being used. This introduces resultant weaknesses or prevents it from operating at a level of security that is desired by the administrator.,NA
671,"If the product's administrator does not have the ability to manage security-related decisions at all times, then protecting the product from outside threats - including the product's developer - can become impossible. For example, a hard-coded account name and password cannot be changed by the administrator, thus exposing that product to attacks that the administrator can not prevent.",NA
671,OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.,NA
672,"The software uses, accesses, or otherwise operates on a resource after that resource has been expired, released, or revoked.",NA
672,"If a released resource is subsequently reused or reallocated, then an attempt to use the original resource might allow access to sensitive data that is associated with a different user or entity.",NA
672,"When a resource is released it might not be in an expected state, later attempts to access the resource may lead to resultant errors that may lead to a crash.",NA
673,The product does not prevent the definition of control spheres from external actors.,NA
673,"Typically, a product defines its control sphere within the code itself, or through configuration by the product's administrator. In some cases, an external party can change the definition of the control sphere. This is typically a resultant weakness.",NA
673,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
674,"The product does not properly control the amount of recursion that takes place, which consumes excessive resources, such as allocated memory or the program stack.",NA
674,"Resources including CPU, memory, and stack memory could be rapidly consumed or exhausted, eventually leading to an exit or crash.",NA
674,"In some cases, an application's interpreter might kill a process or thread that appears to be consuming too much resources, such as with PHP's memory_limit setting. When the interpreter kills the process/thread, it might report an error containing detailed information such as the application's installation path.",NA
675,"The product performs the same operation on a resource two or more times, when the operation should only be applied once.",NA
676,"The program invokes a potentially dangerous function that could introduce a vulnerability if it is used incorrectly, but the function can also be used safely.",NA
676,"If the function is used incorrectly, then it could result in security problems.",NA
680,"The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow.",NA
681,"When converting from one data type to another, such as long to integer, data can be omitted or translated in a way that produces unexpected values. If the resulting values are used in a sensitive context, then dangerous behaviors may occur.",NA
681,"The program could wind up using the wrong number and generate incorrect results. If the number is used to allocate resources or make a security decision, then this could introduce a vulnerability.",NA
682,The software performs a calculation that generates incorrect or unintended results that are later used in security-critical decisions or resource management.,NA
682,"When software performs a security-critical calculation incorrectly, it might lead to incorrect resource allocations, incorrect privilege assignments, or failed comparisons among other things. Many of the direct results of an incorrect calculation can lead to even larger problems such as failed protection mechanisms or even arbitrary code execution.",NA
682,"If the incorrect calculation causes the program to move into an unexpected state, it may lead to a crash or impairment of service.",NA
682,"If the incorrect calculation is used in the context of resource allocation, it could lead to an out-of-bounds operation (CWE-119) leading to a crash or even arbitrary code execution. Alternatively, it may result in an integer overflow (CWE-190) and / or a resource consumption problem (CWE-400).",NA
682,"In the context of privilege or permissions assignment, an incorrect calculation can provide an attacker with access to sensitive resources.",NA
682,"If the incorrect calculation leads to an insufficient comparison (CWE-697), it may compromise a protection mechanism such as a validation routine and allow an attacker to bypass the security-critical code.",NA
683,"The software calls a function, procedure, or routine, but the caller specifies the arguments in an incorrect order, leading to resultant weaknesses.",NA
683,"While this weakness might be caught by the compiler in some languages, it can occur more frequently in cases in which the called function accepts variable numbers or types of arguments, such as format strings in C. It also can occur in languages or environments that do not enforce strong typing.",NA
683,"This problem typically occurs when the programmer makes a typo, or copy and paste errors.",NA
684,"The code does not function according to its published specifications, potentially leading to incorrect usage.",NA
684,"When providing functionality to an external party, it is important that the software behaves in accordance with the details specified. When requirements of nuances are not documented, the functionality may produce unintended behaviors for the caller, possibly leading to an exploitable state.",NA
685,"The software calls a function, procedure, or routine, but the caller specifies too many arguments, or too few arguments, which may lead to undefined behavior and resultant weaknesses.",NA
685,"This problem typically occurs when the programmer makes a typo, or copy and paste errors.",NA
686,"The software calls a function, procedure, or routine, but the caller specifies an argument that is the wrong data type, which may lead to resultant weaknesses.",NA
686,"This weakness is most likely to occur in loosely typed languages, or in strongly typed languages in which the types of variable arguments cannot be enforced at compilation time, or where there is implicit casting.",NA
687,"The software calls a function, procedure, or routine, but the caller specifies an argument that contains the wrong value, which may lead to resultant weaknesses.",NA
688,"The software calls a function, procedure, or routine, but the caller specifies the wrong variable or reference as one of the arguments, which may lead to undefined behavior and resultant weaknesses.",NA
688,"This problem typically occurs when the programmer makes a typo, or copy and paste errors.",NA
689,"The product, while copying or cloning a resource, does not set the resource's permissions or access control until the copy is complete, leaving the resource exposed to other spheres while the copy is taking place.",NA
69,"The software does not properly prevent access to, or detect usage of, alternate data streams (ADS).",NA
69,"An attacker can use an ADS to hide information about a file (e.g. size, the name of the process) from a system or file browser tools such as Windows Explorer and 'dir' at the command line utility. Alternately, the attacker might be able to bypass intended access restrictions for the associated data fork.",NA
69,"Alternate data streams (ADS) were first implemented in the Windows NT operating system to provide compatibility between NTFS and the Macintosh Hierarchical File System (HFS). In HFS, data and resource forks are used to store information about a file. The data fork provides information about the contents of the file while the resource fork stores metadata such as file type.",NA
690,"The product does not check for an error after calling a function that can return with a NULL pointer if the function fails, which leads to a resultant NULL pointer dereference.",NA
690,"While unchecked return value weaknesses are not limited to returns of NULL pointers (see the examples in CWE-252), functions often return NULL to indicate an error status. When this error condition is not checked, a NULL pointer dereference can occur.",NA
690,"A typical occurrence of this weakness occurs when an application includes user-controlled input to a malloc() call. The related code might be correct with respect to preventing buffer overflows, but if a large value is provided, the malloc() will fail due to insufficient memory. This problem also frequently occurs when a parsing routine expects that certain elements will always be present. If malformed input is provided, the parser might return NULL. For example, strtok() can return NULL.",NA
691,"The code does not sufficiently manage its control flow during execution, creating conditions in which the control flow can be modified in unexpected ways.",NA
692,"The product uses a blacklist-based protection mechanism to defend against XSS attacks, but the blacklist is incomplete, allowing XSS variants to succeed.",NA
692,"While XSS might seem simple to prevent, web browsers vary so widely in how they parse web pages, that a blacklist cannot keep track of all the variations. The ""XSS Cheat Sheet"" [REF-564] contains a large number of attacks that are intended to bypass incomplete blacklists.",NA
693,The product does not use or incorrectly uses a protection mechanism that provides sufficient defense against directed attacks against the product.,NA
693,"This weakness covers three distinct situations. A ""missing"" protection mechanism occurs when the application does not define any mechanism against a certain class of attack. An ""insufficient"" protection mechanism might provide some defenses - for example, against the most common attacks - but it does not protect against everything that is intended. Finally, an ""ignored"" mechanism occurs when a mechanism is available and in active use within the product, but the developer has not applied it in some code path.",NA
694,"The software uses multiple resources that can have the same identifier, in a context in which unique identifiers are required.",NA
694,"If the software assumes that each resource has a unique identifier, the software could operate on the wrong resource if attackers can cause multiple resources to be associated with the same identifier.",NA
694,"If unique identifiers are assumed when protecting sensitive resources, then duplicate identifiers might allow attackers to bypass the protection.",NA
695,The software uses low-level functionality that is explicitly prohibited by the framework or specification under which the software is supposed to operate.,NA
695,"The use of low-level functionality can violate the specification in unexpected ways that effectively disable built-in protection mechanisms, introduce exploitable inconsistencies, or otherwise expose the functionality to attack.",NA
696,"The software performs multiple related behaviors, but the behaviors are performed in the wrong order in ways which may produce resultant weaknesses.",NA
697,"The software compares two entities in a security-relevant context, but the comparison is incorrect, which may lead to resultant weaknesses.",NA
697,This weakness class covers several possibilities:,NA
698,"The web application sends a redirect to another location, but instead of exiting, it executes additional code.",NA
698,This weakness could affect the control flow of the application and allow execution of untrusted code.,NA
7,The default error page of a web application should not display sensitive information about the software system.,NA
7,"A Web application must define a default error page for 4xx errors (e.g. 404), 5xx (e.g. 500) errors and catch java.lang.Throwable exceptions to prevent attackers from mining information from the application container's built-in error response.",NA
7,"When an attacker explores a web site looking for vulnerabilities, the amount of information that the site provides is crucial to the eventual success or failure of any attempted attacks.",NA
7,"A stack trace might show the attacker a malformed SQL query string, the type of database being used, and the version of the application container. This information enables the attacker to target known vulnerabilities in these components.",NA
703,The software does not properly anticipate or handle exceptional conditions that rarely occur during normal operation of the software.,NA
703,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
704,"The software does not correctly convert an object, resource, or structure from one type to a different type.",NA
705,The software does not properly return control flow to the proper location after it has completed a task or detected an unusual condition.,NA
706,"The software uses a name or reference to access a resource, but the name/reference resolves to a resource that is outside of the intended control sphere.",NA
707,The product does not ensure or incorrectly ensures that structured messages or data are well-formed and that certain security properties at met before being read from an upstream component or sent to a downstream component.,NA
707,If a message is malformed it may cause the message to be incorrectly interpreted.,NA
707,"Neutralization is a general term that can refer to one or more of the following: filtering, canonicalization, encoding/decoding, escaping/unescaping, quoting/unquoting, or validation. It describes a process that is independent of the specific protection mechanism that performs the neutralization.",NA
707,"This weakness typically applies in cases where the product prepares a control message that another process must act on, such as a command or query, and malicious input that was intended as data, can enter the control plane instead. However, this weakness also applies to more general cases where there are not always control implications.",NA
707,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
708,"The software assigns an owner to a resource, but the owner is outside of the intended control sphere.",NA
708,This may allow the resource to be manipulated by actors outside of the intended control sphere.,NA
708,An attacker could read and modify data for which they do not have permissions to access directly.,NA
708,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
71,This entry has been deprecated as it represents a specific observed example of a UNIX Hard Link weakness type rather than its own individual weakness type. Please refer to CWE-62.,NA
710,"The software does not follow certain coding rules for development, which can lead to resultant weaknesses or increase the severity of the associated vulnerabilities.",NA
72,The software does not properly handle special paths that may identify the data or resource fork of a file on the HFS+ file system.,NA
72,"If the software chooses actions to take based on the file name, then if an attacker provides the data or resource fork, the software may take unexpected actions. Further, if the software intends to restrict access to a file, then an attacker might still be able to bypass intended access restrictions by requesting the data or resource fork for that file.",NA
73,The software allows user input to control or influence paths or file names that are used in filesystem operations.,NA
73,This could allow an attacker to access or modify system files or other files that are critical to the application.,NA
73,Path manipulation errors occur when the following two conditions are met:,NA
73,"For example, the program may give the attacker the ability to overwrite the specified file or run with a configuration controlled by the attacker.",NA
73,The application can operate on unexpected files. Confidentiality is violated when the targeted filename is not directly readable by the attacker.,NA
73,"The application can operate on unexpected files. This may violate integrity if the filename is written to, or if the filename is for a program or other form of executable code.",NA
73,"The application can operate on unexpected files. Availability can be violated if the attacker specifies an unexpected file that the application modifies. Availability can also be affected if the attacker specifies a filename for a large file, or points to a special device or a file that does not have the format that the application expects.",NA
73,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
732,The product specifies permissions for a security-critical resource in a way that allows that resource to be read or modified by unintended actors.,NA
732,"When a resource is given a permissions setting that provides access to a wider range of actors than required, it could lead to the exposure of sensitive information, or the modification of that resource by unintended parties. This is especially dangerous when the resource is related to program configuration, execution or sensitive user data.",NA
732,"An attacker may be able to read sensitive information from the associated resource, such as credentials or configuration information stored in a file.",NA
732,"An attacker may be able to modify critical properties of the associated resource to gain privileges, such as replacing a world-writable executable with a Trojan horse.",NA
732,"An attacker may be able to destroy or corrupt critical data in the associated resource, such as deletion of records from a database.",NA
732,"The developer may set loose permissions in order to minimize problems when the user first runs the program, then create documentation stating that permissions should be tightened. Since system administrators and users do not always read the documentation, this can result in insecure permissions being left unchanged.",NA
733,"The developer builds a security-critical protection mechanism into the software, but the compiler optimizes the program such that the mechanism is removed or modified.",NA
74,"The software constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.",NA
74,"Software has certain assumptions about what constitutes data and control respectively. It is the lack of verification of these assumptions for user-controlled input that leads to injection problems. Injection problems encompass a wide variety of issues -- all mitigated in very different ways and usually attempted in order to alter the control flow of the process. For this reason, the most effective way to discuss these weaknesses is to note the distinct features which classify them as injection weaknesses. The most important issue to note is that all injection problems share one thing in common -- i.e., they allow for the injection of control plane data into the user-controlled data plane. This means that the execution of the process may be altered by sending code in through legitimate data channels, using no other mechanism. While buffer overflows, and many other flaws, involve the use of some further issue to gain execution, injection problems need only for the data to be parsed. The most classic instantiations of this category of weakness are SQL injection and format string vulnerabilities.",NA
74,Many injection attacks involve the disclosure of important information -- in terms of both data sensitivity and usefulness in further exploitation.,NA
74,"In some cases, injectable code controls authentication; this may lead to a remote vulnerability.",NA
74,"Injection attacks are characterized by the ability to significantly change the flow of a given process, and in some cases, to the execution of arbitrary code.",NA
74,Data injection attacks lead to loss of data integrity in nearly all cases as the control-plane data injected is always incidental to data recall or writing.,NA
74,Often the actions performed by injected control code are unlogged.,NA
74,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
749,"The software provides an Applications Programming Interface (API) or similar interface for interaction with external actors, but the interface includes a dangerous method or function that is not properly restricted.",NA
749,"This weakness can lead to a wide variety of resultant weaknesses, depending on the behavior of the exposed method. It can apply to any number of technologies and approaches, such as ActiveX controls, Java functions, IOCTLs, and so on.",NA
749,The exposure can occur in a few different ways:,NA
749,Exposing critical functionality essentially provides an attacker with the privilege level of the exposed functionality. This could result in the modification or exposure of sensitive data or possibly even execution of arbitrary code.,NA
75,The software does not adequately filter user-controlled input for special elements with control implications.,NA
75,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
754,The software does not check or incorrectly checks for unusual or exceptional conditions that are not expected to occur frequently during day to day operation of the software.,NA
754,"The programmer may assume that certain events or conditions will never occur or do not need to be worried about, such as low memory conditions, lack of access to resources due to restrictive permissions, or misbehaving clients or components. However, attackers may intentionally trigger these unusual conditions, thus violating the programmer's assumptions, possibly introducing instability, incorrect behavior, or a vulnerability.",NA
754,"Note that this entry is not exclusively about the use of exceptions and exception handling, which are mechanisms for both checking and handling unusual or unexpected conditions.",NA
754,Many functions will return some value about the success of their actions. This will alert the program whether or not to handle any errors caused by that function.,NA
754,"The data which were produced as a result of a function call could be in a bad state upon return. If the return value is not checked, then this bad data may be used in operations, possibly leading to a crash or other unintended behaviors.",NA
754,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
755,The software does not handle or incorrectly handles an exceptional condition.,NA
755,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
756,"The software does not return custom error pages to the user, possibly exposing sensitive information.",NA
756,"Attackers can leverage the additional information provided by a default error page to mount attacks targeted on the framework, database, or other resources used by the application.",NA
757,"A protocol or its implementation supports interaction between multiple actors and allows those actors to negotiate which algorithm should be used as a protection mechanism such as encryption or authentication, but it does not select the strongest algorithm that is available to both parties.",NA
757,"When a security mechanism can be forced to downgrade to use a less secure algorithm, this can make it easier for attackers to compromise the software by exploiting weaker algorithm. The victim might not be aware that the less secure algorithm is being used. For example, if an attacker can force a communications channel to use cleartext instead of strongly-encrypted data, then the attacker could read the channel by sniffing, instead of going through extra effort of trying to decrypt the data using brute force techniques.",NA
757,COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.,NA
758,"The software uses an API function, data structure, or other entity in a way that relies on properties that are not always guaranteed to hold for that entity.",NA
758,"This can lead to resultant weaknesses when the required properties change, such as when the software is ported to a different platform or if an interaction error (CWE-435) occurs.",NA
759,"The software uses a one-way cryptographic hash against an input that should not be reversible, such as a password, but the software does not also use a salt as part of the input.",NA
759,This makes it easier for attackers to pre-compute the hash value using dictionary attack techniques such as rainbow tables.,NA
759,"It should be noted that, despite common perceptions, the use of a good salt with a hash does not sufficiently increase the effort for an attacker who is targeting an individual password, or who has a large amount of computing resources available, such as with cloud-based services or specialized, inexpensive hardware. Offline password cracking can still be effective if the hash function is not expensive to compute; many cryptographic functions are designed to be efficient and can be vulnerable to attacks using massive computing resources, even if the hash is cryptographically strong. The use of a salt only slightly increases the computing requirements for an attacker compared to other strategies such as adaptive hash functions. See CWE-916 for more details.",NA
759,"In cryptography, salt refers to some random addition of data to an input before hashing to make dictionary attacks more difficult.",NA
759,"If an attacker can gain access to the hashes, then the lack of a salt makes it easier to conduct brute force attacks using techniques such as rainbow tables.",NA
759,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
76,"The software properly neutralizes certain special elements, but it improperly neutralizes equivalent special elements.",NA
76,"The software may have a fixed list of special characters it believes is complete. However, there may be alternate encodings, or representations that also have the same meaning. For example, the software may filter out a leading slash (/) to prevent absolute path names, but does not account for a tilde (~) followed by a user name, which on some *nix systems could be expanded to an absolute pathname. Alternately, the software might filter a dangerous ""-e"" command-line switch when calling an external program, but it might not account for ""--exec"" or other switches that have the same semantics.",NA
76,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
760,"The software uses a one-way cryptographic hash against an input that should not be reversible, such as a password, but the software uses a predictable salt as part of the input.",NA
760,"This makes it easier for attackers to pre-compute the hash value using dictionary attack techniques such as rainbow tables, effectively disabling the protection that an unpredictable salt would provide.",NA
760,"It should be noted that, despite common perceptions, the use of a good salt with a hash does not sufficiently increase the effort for an attacker who is targeting an individual password, or who has a large amount of computing resources available, such as with cloud-based services or specialized, inexpensive hardware. Offline password cracking can still be effective if the hash function is not expensive to compute; many cryptographic functions are designed to be efficient and can be vulnerable to attacks using massive computing resources, even if the hash is cryptographically strong. The use of a salt only slightly increases the computing requirements for an attacker compared to other strategies such as adaptive hash functions. See CWE-916 for more details.",NA
760,"In cryptography, salt refers to some random addition of data to an input before hashing to make dictionary attacks more difficult.",NA
760,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
761,"The application calls free() on a pointer to a memory resource that was allocated on the heap, but the pointer is not at the start of the buffer.",NA
761,"This can cause the application to crash, or in some cases, modify critical program variables or execute code.",NA
761,"This weakness often occurs when the memory is allocated explicitly on the heap with one of the malloc() family functions and free() is called, but pointer arithmetic has caused the pointer to be in the interior or end of the buffer.",NA
762,"The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource.",NA
762,"This weakness can be generally described as mismatching memory management routines, such as:",NA
762,"When the memory management functions are mismatched, the consequences may be as severe as code execution, memory corruption, or program crash. Consequences and ease of exploit will vary depending on the implementation of the routines and the object being managed.",NA
763,"The application attempts to return a memory resource to the system, but calls the wrong release function or calls the appropriate release function incorrectly.",NA
763,"This weakness can take several forms, such as:",NA
763,"This weakness may result in the corruption of memory, and perhaps instructions, possibly leading to a crash. If the corrupted memory can be effectively controlled, it may be possible to execute arbitrary code.",NA
764,"The software locks a critical resource more times than intended, leading to an unexpected state in the system.",NA
764,"When software is operating in a concurrent environment and repeatedly locks a critical resource, the consequences will vary based on the type of lock, the lock's implementation, and the resource being protected. In some situations such as with semaphores, the resources are pooled and extra locking calls will reduce the size of the total available pool, possibly leading to degraded performance or a denial of service. If this can be triggered by an attacker, it will be similar to an unrestricted lock (CWE-412). In the context of a binary lock, it is likely that any duplicate locking attempts will never succeed since the lock is already held and progress may not be possible.",NA
765,"The software unlocks a critical resource more times than intended, leading to an unexpected state in the system.",NA
765,"When software is operating in a concurrent environment and repeatedly unlocks a critical resource, the consequences will vary based on the type of lock, the lock's implementation, and the resource being protected. In some situations such as with semaphores, the resources are pooled and extra calls to unlock will increase the count for the number of available resources, likely resulting in a crash or unpredictable behavior when the system nears capacity.",NA
766,"The software declares a critical variable, field, or member to be public when intended security policy requires it to be private.",NA
766,Making a critical variable public allows anyone with access to the object in which the variable is contained to alter or read the value.,NA
767,The software defines a public method that reads or modifies a private variable.,NA
767,"If an attacker modifies the variable to contain unexpected values, this could violate assumptions from other parts of the code. Additionally, if an attacker can read the private variable, it may expose sensitive information or make it easier to launch further attacks.",NA
768,"The software contains a conditional statement with multiple logical expressions in which one of the non-leading expressions may produce side effects. This may lead to an unexpected state in the program after the execution of the conditional, because short-circuiting logic may prevent the side effects from occurring.",NA
768,"Usage of short circuit evaluation, though well-defined in the C standard, may alter control flow in a way that introduces logic errors that are difficult to detect, possibly causing errors later during the software's execution. If an attacker can discover such an inconsistency, it may be exploitable to gain arbitrary control over a system.",NA
768,"If the first condition of an ""or"" statement is assumed to be true under normal circumstances, or if the first condition of an ""and"" statement is assumed to be false, then any subsequent conditional may contain its own logic errors that are not detected during code review or testing.",NA
768,"Finally, the usage of short circuit evaluation may decrease the maintainability of the code.",NA
768,"Widely varied consequences are possible if an attacker is aware of an unexpected state in the software after a conditional. It may lead to information exposure, a system crash, or even complete attacker control of the system.",NA
769,This entry has been deprecated because it was a duplicate of CWE-774. All content has been transferred to CWE-774.,NA
77,"The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.",NA
77,Command injection vulnerabilities typically occur when:,NA
77,Command injection is a common problem with wrapper programs.,NA
77,"If a malicious user injects a character (such as a semi-colon) that delimits the end of one command and the beginning of another, it may be possible to then insert an entirely new and unrelated command that was not intended to be executed.",NA
77,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
770,"The software allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor.",NA
770,"When allocating resources without limits, an attacker could prevent other systems, applications, or processes from accessing the same type of resource.",NA
770,OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.,NA
771,"The software does not properly maintain a reference to a resource that has been allocated, which prevents the resource from being reclaimed.",NA
771,"This does not necessarily apply in languages or frameworks that automatically perform garbage collection, since the removal of all references may act as a signal that the resource is ready to be reclaimed.",NA
771,An attacker that can influence the allocation of resources that are not properly maintained could deplete the available resource pool and prevent all other processes from accessing the same type of resource.,NA
772,"The software does not release a resource after its effective lifetime has ended, i.e., after the resource is no longer needed.",NA
772,"When a resource is not released after use, it can allow attackers to cause a denial of service by causing the allocation of resources without triggering their release. Frequently-affected resources include memory, CPU, disk space, power or battery, etc.",NA
772,An attacker that can influence the allocation of resources that are not properly released could deplete the available resource pool and prevent all other processes from accessing the same type of resource.,NA
773,"The software does not properly maintain references to a file descriptor or handle, which prevents that file descriptor/handle from being reclaimed.",NA
773,"This can cause the software to consume all available file descriptors or handles, which can prevent other processes from performing critical file processing operations.",NA
773,An attacker that can influence the allocation of resources that are not properly maintained could deplete the available resource pool and prevent all other processes from accessing the same type of resource.,NA
774,"The software allocates file descriptors or handles on behalf of an actor without imposing any restrictions on how many descriptors can be allocated, in violation of the intended security policy for that actor.",NA
774,"This can cause the software to consume all available file descriptors or handles, which can prevent other processes from performing critical file processing operations.",NA
774,"When allocating resources without limits, an attacker could prevent all other processes from accessing the same type of resource.",NA
775,"The software does not release a file descriptor or handle after its effective lifetime has ended, i.e., after the file descriptor/handle is no longer needed.",NA
775,"When a file descriptor or handle is not released after use (typically by explicitly closing it), attackers can cause a denial of service by consuming all available file descriptors/handles, or otherwise preventing other system processes from obtaining their own file descriptors/handles.",NA
775,An attacker that can influence the allocation of resources that are not properly released could deplete the available resource pool and prevent all other processes from accessing the same type of resource.,NA
776,"The software uses XML documents and allows their structure to be defined with a Document Type Definition (DTD), but it does not properly control the number of recursive definitions of entities.",NA
776,"If the DTD contains a large number of nested or recursive entities, this can lead to explosive growth of data when parsed, causing a denial of service.",NA
776,"If parsed, recursive entity references allow the attacker to expand data exponentially, quickly consuming all system resources.",NA
777,"The software uses a regular expression to perform neutralization, but the regular expression is not anchored and may allow malicious or malformed data to slip through.",NA
777,"When performing tasks such as whitelist validation, data is examined and possibly modified to ensure that it is well-formed and adheres to a list of safe values. If the regular expression is not anchored, malicious or malformed data may be included before or after any string matching the regular expression. The type of malicious data that is allowed will depend on the context of the application and which anchors are omitted from the regular expression.",NA
777,"Regular expressions are typically used to match a pattern of text. Anchors are used in regular expressions to specify where the pattern should match: at the beginning, the end, or both (the whole input).",NA
777,"An unanchored regular expression in the context of a whitelist will possibly result in a protection mechanism failure, allowing malicious or malformed data to enter trusted regions of the program. The specific consequences will depend on what functionality the whitelist was protecting.",NA
778,"When a security-critical event occurs, the software either does not record the event or omits important details about the event when logging it.",NA
778,"When security-critical events are not logged properly, such as a failed login attempt, this can make malicious behavior more difficult to detect and may hinder forensic analysis after an attack succeeds.",NA
778,"If security critical information is not recorded, there will be no trail for forensic analysis and discovering the cause of problems or the source of attacks may become more difficult or impossible.",NA
778,COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.,NA
779,"The software logs too much information, making log files hard to process and possibly hindering recovery efforts or forensic analysis after an attack.",NA
779,"While logging is a good practice in general, and very high levels of logging are appropriate for debugging stages of development, too much logging in a production environment might hinder a system administrator's ability to detect anomalous conditions. This can provide cover for an attacker while attempting to penetrate a system, clutter the audit trail for forensic analysis, or make it more difficult to debug problems in a production environment.",NA
779,"Log files can become so large that they consume excessive resources, such as disk and CPU, which can hinder the performance of the system.",NA
779,Logging too much information can make the log files of less use to forensics analysts and developers when trying to diagnose a problem or recover from an attack.,NA
779,"If system administrators are unable to effectively process log files, attempted attacks may go undetected, possibly leading to eventual system compromise.",NA
779,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
78,"The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.",NA
78,"This could allow attackers to execute unexpected, dangerous commands directly on the operating system. This weakness can lead to a vulnerability in environments in which the attacker does not have direct access to the operating system, such as in web applications. Alternately, if the weakness occurs in a privileged program, it could allow the attacker to specify commands that normally would not be accessible, or to call alternate commands with privileges that the attacker does not have. The problem is exacerbated if the compromised process does not follow the principle of least privilege, because the attacker-controlled commands may run with special system privileges that increases the amount of damage.",NA
78,There are at least two subtypes of OS command injection:,NA
78,"From a weakness standpoint, these variants represent distinct programmer errors. In the first variant, the programmer clearly intends that input from untrusted parties will be part of the arguments in the command to be executed. In the second variant, the programmer does not intend for the command to be accessible to any untrusted party, but the programmer probably has not accounted for alternate ways in which malicious attackers can provide input.",NA
78,"Attackers could execute unauthorized commands, which could then be used to disable the software, or read and modify data for which the attacker does not have permissions to access directly. Since the targeted application is directly executing the commands instead of the attacker, any malicious activities may appear to come from the application or the application's owner.",NA
78,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
780,"The software uses the RSA algorithm but does not incorporate Optimal Asymmetric Encryption Padding (OAEP), which might weaken the encryption.",NA
780,Padding schemes are often used with cryptographic algorithms to make the plaintext less predictable and complicate attack efforts. The OAEP scheme is often used with RSA to nullify the impact of predictable common text.,NA
780,"Without OAEP in RSA encryption, it will take less work for an attacker to decrypt the data or to infer patterns from the ciphertext.",NA
780,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
781,"The software defines an IOCTL that uses METHOD_NEITHER for I/O, but it does not validate or incorrectly validates the addresses that are provided.",NA
781,"When an IOCTL uses the METHOD_NEITHER option for I/O control, it is the responsibility of the IOCTL to validate the addresses that have been supplied to it. If validation is missing or incorrect, attackers can supply arbitrary memory addresses, leading to code execution or a denial of service.",NA
781,"An attacker may be able to access memory that belongs to another process or user. If the attacker can control the contents that the IOCTL writes, it may lead to code execution at high privilege levels. At the least, a crash can occur.",NA
782,"The software implements an IOCTL with functionality that should be restricted, but it does not properly enforce access control for the IOCTL.",NA
782,"When an IOCTL contains privileged functionality and is exposed unnecessarily, attackers may be able to access this functionality by invoking the IOCTL. Even if the functionality is benign, if the programmer has assumed that the IOCTL would only be accessed by a trusted process, there may be little or no validation of the incoming data, exposing weaknesses that would never be reachable if the attacker cannot call the IOCTL directly.",NA
782,"The implementations of IOCTLs will differ between operating system types and versions, so the methods of attack and prevention may vary widely.",NA
782,"Attackers can invoke any functionality that the IOCTL offers. Depending on the functionality, the consequences may include code execution, denial-of-service, and theft of data.",NA
782,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
783,The program uses an expression in which operator precedence causes incorrect logic to be used.,NA
783,"While often just a bug, operator precedence logic errors can have serious consequences if they are used in security-critical code, such as making an authentication decision.",NA
783,"The consequences will vary based on the context surrounding the incorrect precedence. In a security decision, integrity or confidentiality are the most likely results. Otherwise, a crash may occur due to the software reaching an unexpected state.",NA
783,"Logic errors related to operator precedence may cause problems even during normal operation, so they are probably discovered quickly during the testing phase. If testing is incomplete or there is a strong reliance on manual review of the code, then these errors may not be discovered before the software is deployed.",NA
784,"The application uses a protection mechanism that relies on the existence or values of a cookie, but it does not properly ensure that the cookie is valid for the associated user.",NA
784,"Attackers can easily modify cookies, within the browser or by implementing the client-side code outside of the browser. Attackers can bypass protection mechanisms such as authorization and authentication by modifying the cookie to contain an expected value.",NA
784,"It is dangerous to use cookies to set a user's privileges. The cookie can be manipulated to claim a high level of authorization, or to claim that successful authentication has occurred.",NA
784,OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.,NA
785,"The software invokes a function for normalizing paths or file names, but it provides an output buffer that is smaller than the maximum possible size, such as PATH_MAX.",NA
785,"Passing an inadequately-sized output buffer to a path manipulation function can result in a buffer overflow. Such functions include realpath(), readlink(), PathAppend(), and others.",NA
785,"Windows provides a large number of utility functions that manipulate buffers containing filenames. In most cases, the result is returned in a buffer that is passed in as input. (Usually the filename is modified in place.) Most functions require the buffer to be at least MAX_PATH bytes in length, but you should check the documentation for each function individually. If the buffer is not large enough to store the result of the manipulation, a buffer overflow can occur.",NA
786,The software reads or writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer.,NA
786,"This typically occurs when a pointer or its index is decremented to a position before the buffer, when pointer arithmetic results in a position before the beginning of the valid memory location, or when a negative index is used.",NA
786,"For an out-of-bounds read, the attacker may have access to sensitive information. If the sensitive information contains system details, such as the current buffers position in memory, this knowledge can be used to craft further attacks, possibly with more severe consequences.",NA
786,"Out of bounds memory access will very likely result in the corruption of relevant memory, and perhaps instructions, possibly leading to a crash.",NA
786,"If the corrupted memory can be effectively controlled, it may be possible to execute arbitrary code. If the corrupted memory is data rather than instructions, the system will continue to function with improper changes, possibly in violation of an implicit or explicit policy.",NA
787,"The software writes data past the end, or before the beginning, of the intended buffer.",NA
787,"Typically, this can result in corruption of data, a crash, or code execution.  The software may modify an index or perform pointer arithmetic that references a memory location that is outside of the boundaries of the buffer.  A subsequent write operation then produces undefined or unexpected results.",NA
788,The software reads or writes to a buffer using an index or pointer that references a memory location after the end of the buffer.,NA
788,"This typically occurs when a pointer or its index is decremented to a position before the buffer; when pointer arithmetic results in a position before the buffer; or when a negative index is used, which generates a position before the buffer.",NA
788,"For an out-of-bounds read, the attacker may have access to sensitive information. If the sensitive information contains system details, such as the current buffers position in memory, this knowledge can be used to craft further attacks, possibly with more severe consequences.",NA
788,"Out of bounds memory access will very likely result in the corruption of relevant memory, and perhaps instructions, possibly leading to a crash. Other attacks leading to lack of availability are possible, including putting the program into an infinite loop.",NA
788,"If the memory accessible by the attacker can be effectively controlled, it may be possible to execute arbitrary code, as with a standard buffer overflow. If the attacker can overwrite a pointer's worth of memory (usually 32 or 64 bits), they can redirect a function pointer to their own malicious code. Even when the attacker can only modify a single byte arbitrary code execution can be possible. Sometimes this is because the same problem can be exploited repeatedly to the same effect. Other times it is because the attacker can overwrite security-critical application-specific data -- such as a flag indicating whether the user is an administrator.",NA
789,"The product allocates memory based on an untrusted size value, but it does not validate or incorrectly validates the size, allowing arbitrary amounts of memory to be allocated.",NA
789,"Not controlling memory allocation can result in a request for too much system memory, possibly leading to a crash of the application due to out-of-memory conditions, or the consumption of a large amount of memory on the system.",NA
79,The software does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.,NA
79,Cross-site scripting (XSS) vulnerabilities occur when:,NA
79,There are three main kinds of XSS:,NA
79,"Once the malicious script is injected, the attacker can perform a variety of malicious activities. The attacker could transfer private information, such as cookies that may include session information, from the victim's machine to the attacker. The attacker could send malicious requests to a web site on behalf of the victim, which could be especially dangerous to the site if the victim has administrator privileges to manage that site. Phishing attacks could be used to emulate trusted web sites and trick the victim into entering a password, allowing the attacker to compromise the victim's account on that web site. Finally, the script could exploit a vulnerability in the web browser itself possibly taking over the victim's machine, sometimes referred to as ""drive-by hacking.""",NA
79,"In many cases, the attack can be launched without the victim even being aware of it. Even with careful users, attackers frequently use a variety of methods to encode the malicious portion of the attack, such as URL encoding or Unicode, so the request looks less suspicious.",NA
79,"The most common attack performed with cross-site scripting involves the disclosure of information stored in user cookies. Typically, a malicious user will craft a client-side script, which -- when parsed by a web browser -- performs some activity (such as sending all site cookies to a given E-mail address). This script will be loaded and run by each user visiting the web site. Since the site requesting to run the script has access to the cookies in question, the malicious script does also.",NA
79,In some circumstances it may be possible to run arbitrary code on a victim's computer when cross-site scripting is combined with other flaws.,NA
79,"The consequence of an XSS attack is the same regardless of whether it is stored or reflected. The difference is in how the payload arrives at the server. XSS can cause a variety of problems for the end user that range in severity from an annoyance to complete account compromise. Some cross-site scripting vulnerabilities can be exploited to manipulate or steal cookies, create requests that can be mistaken for those of a valid user, compromise confidential information, or execute malicious code on the end user systems for a variety of nefarious purposes. Other damaging attacks include the disclosure of end user files, installation of Trojan horse programs, redirecting the user to some other page or site, running ""Active X"" controls (under Microsoft Internet Explorer) from sites that a user perceives as trustworthy, and modifying presentation of content.",NA
79,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
790,"The software receives data from an upstream component, but does not filter or incorrectly filters special elements before sending it to a downstream component.",NA
790,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
791,"The software receives data from an upstream component, but does not completely filter special elements before sending it to a downstream component.",NA
791,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
792,"The software receives data from an upstream component, but does not completely filter one or more instances of special elements before sending it to a downstream component.",NA
792,Incomplete filtering of this nature involves either:,NA
792,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
793,"The software receives data from an upstream component, but only filters a single instance of a special element before sending it to a downstream component.",NA
793,"Incomplete filtering of this nature may be location-dependent, as in only the first or last element is filtered.",NA
793,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
794,"The software receives data from an upstream component, but does not filter all instances of a special element before sending it to a downstream component.",NA
794,Incomplete filtering of this nature may be applied to:,NA
794,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
795,"The software receives data from an upstream component, but only accounts for special elements at a specified location, thereby missing remaining special elements that may exist before sending it to a downstream component.",NA
795,A filter might only account for instances of special elements when they occur:,NA
795,"This may leave special elements in the data that did not match the filter position, but still may be dangerous.",NA
795,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
796,"The software receives data from an upstream component, but only accounts for special elements positioned relative to a marker (e.g. ""at the beginning/end of a string; the second argument""), thereby missing remaining special elements that may exist before sending it to a downstream component.",NA
796,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
797,"The software receives data from an upstream component, but only accounts for special elements at an absolute position (e.g. ""byte number 10""), thereby missing remaining special elements that may exist before sending it to a downstream component.",NA
797,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
798,"The software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data.",NA
798,"Hard-coded credentials typically create a significant hole that allows an attacker to bypass the authentication that has been configured by the software administrator. This hole might be difficult for the system administrator to detect. Even if detected, it can be difficult to fix, so the administrator may be forced into disabling the product entirely. There are two main variations:",NA
798,"In the Inbound variant, a default administration account is created, and a simple password is hard-coded into the product and associated with that account. This hard-coded password is the same for each installation of the product, and it usually cannot be changed or disabled by system administrators without manually modifying the program, or otherwise patching the software. If the password is ever discovered or published (a common occurrence on the Internet), then anybody with knowledge of this password can access the product. Finally, since all installations of the software will have the same password, even across different organizations, this enables massive attacks such as worms to take place.",NA
798,"The Outbound variant applies to front-end systems that authenticate with a back-end service. The back-end service may require a fixed password which can be easily discovered. The programmer may simply hard-code those back-end credentials into the front-end software. Any user of that program may be able to extract the password. Client-side systems with hard-coded passwords pose even more of a threat, since the extraction of a password from a binary is usually very simple.",NA
798,"If hard-coded passwords are used, it is almost certain that malicious users will gain access to the account in question.",NA
798,"This weakness can lead to the exposure of resources or functionality to unintended actors, possibly providing attackers with sensitive information or even execute arbitrary code.",NA
798,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
799,"The software does not properly limit the number or frequency of interactions that it has with an actor, such as the number of incoming requests.",NA
799,"This can allow the actor to perform actions more frequently than expected. The actor could be a human or an automated process such as a virus or bot. This could be used to cause a denial of service, compromise program logic (such as limiting humans to a single vote), or other consequences. For example, an authentication routine might not limit the number of times an attacker can guess a password. Or, a web site might conduct a poll but only expect humans to vote a maximum of once a day.",NA
8,"When an application exposes a remote interface for an entity bean, it might also expose methods that get or set the bean's data. These methods could be leveraged to read sensitive information, or to change data in ways that violate the application's expectations, potentially leading to other vulnerabilities.",NA
80,"The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special characters such as ""<"", "">"", and ""&"" that could be interpreted as web-scripting elements when they are sent to a downstream component that processes web pages.",NA
80,"This may allow such characters to be treated as control characters, which are executed client-side in the context of the user's session. Although this can be classified as an injection problem, the more pertinent issue is the improper conversion of such special characters to respective context-appropriate entities before displaying them to the user.",NA
804,"The software uses a CAPTCHA challenge, but the challenge can be guessed or automatically recognized by a non-human actor.",NA
804,"An automated attacker could bypass the intended protection of the CAPTCHA challenge and perform actions at a higher frequency than humanly possible, such as launching spam attacks.",NA
804,There can be several different causes of a guessable CAPTCHA:,NA
804,"When authorization, authentication, or another protection mechanism relies on CAPTCHA entities to ensure that only human actors can access certain functionality, then an automated attacker such as a bot may access the restricted functionality by guessing the CAPTCHA.",NA
805,"The software uses a sequential operation to read or write a buffer, but it uses an incorrect length value that causes it to access memory that is outside of the bounds of the buffer.",NA
805,"When the length value exceeds the size of the destination, a buffer overflow could occur.",NA
805,"Buffer overflows often can be used to execute arbitrary code, which is usually outside the scope of a program's implicit security policy. This can often be used to subvert any other security service.",NA
805,"Buffer overflows generally lead to crashes. Other attacks leading to lack of availability are possible, including putting the program into an infinite loop.",NA
806,"The software uses the size of a source buffer when reading from or writing to a destination buffer, which may cause it to access memory that is outside of the bounds of the buffer.",NA
806,"When the size of the destination is smaller than the size of the source, a buffer overflow could occur.",NA
806,"Buffer overflows generally lead to crashes. Other attacks leading to lack of availability are possible, including putting the program into an infinite loop.",NA
806,"Buffer overflows often can be used to execute arbitrary code, which is usually outside the scope of a program's implicit security policy.",NA
806,"When the consequence is arbitrary code execution, this can often be used to subvert any other security service.",NA
807,"The application uses a protection mechanism that relies on the existence or values of an input, but the input can be modified by an untrusted actor in a way that bypasses the protection mechanism.",NA
807,"Developers may assume that inputs such as cookies, environment variables, and hidden form fields cannot be modified. However, an attacker could change these inputs using customized clients or other attacks. This change might not be detected. When security decisions such as authentication and authorization are made based on the values of these inputs, attackers can bypass the security of the software.",NA
807,"Without sufficient encryption, integrity checking, or other mechanism, any input that originates from an outsider cannot be trusted.",NA
807,"Attackers can bypass the security decision to access whatever is being protected. The consequences will depend on the associated functionality, but they can range from granting additional privileges to untrusted users to bypassing important security checks. Ultimately, this weakness may lead to exposure or modification of sensitive data, system crash, or execution of arbitrary code.",NA
807,COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.,NA
81,"The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special characters that could be interpreted as web-scripting elements when they are sent to an error page.",NA
81,Error pages may include customized 403 Forbidden or 404 Not Found pages.,NA
81,"When an attacker can trigger an error that contains script syntax within the attacker's input, then cross-site scripting attacks may be possible.",NA
82,"The web application does not neutralize or incorrectly neutralizes scripting elements within attributes of HTML IMG tags, such as the src attribute.",NA
82,"Attackers can embed XSS exploits into the values for IMG attributes (e.g. SRC) that is streamed and then executed in a victim's browser. Note that when the page is loaded into a user's browsers, the exploit will automatically execute.",NA
820,The software utilizes a shared resource in a concurrent manner but does not attempt to synchronize access to the resource.,NA
820,"If access to a shared resource is not synchronized, then the resource may not be in a state that is expected by the software. This might lead to unexpected or insecure behaviors, especially if an attacker can influence the shared resource.",NA
821,"The software utilizes a shared resource in a concurrent manner, but it does not correctly synchronize access to the resource.",NA
821,"If access to a shared resource is not correctly synchronized, then the resource may not be in a state that is expected by the software. This might lead to unexpected or insecure behaviors, especially if an attacker can influence the shared resource.",NA
822,"The program obtains a value from an untrusted source, converts this value to a pointer, and dereferences the resulting pointer.",NA
822,"An attacker can supply a pointer for memory locations that the program is not expecting. If the pointer is dereferenced for a write operation, the attack might allow modification of critical program state variables, cause a crash, or execute code. If the dereferencing operation is for a read, then the attack might allow reading of sensitive data, cause a crash, or set a program variable to an unexpected value (since the value will be read from an unexpected memory location).",NA
822,"There are several variants of this weakness, including but not necessarily limited to:",NA
822,"If the untrusted pointer is used in a read operation, an attacker might be able to read sensitive portions of memory.",NA
822,"If the untrusted pointer references a memory location that is not accessible to the program, or points to a location that is ""malformed"" or larger than expected by a read or write operation, the application may terminate unexpectedly.",NA
822,"If the untrusted pointer is used in a function call, or points to unexpected data in a write operation, then code execution may be possible.",NA
823,"The program performs pointer arithmetic on a valid pointer, but it uses an offset that can point outside of the intended range of valid memory locations for the resulting pointer.",NA
823,"While a pointer can contain a reference to any arbitrary memory location, a program typically only intends to use the pointer to access limited portions of memory, such as contiguous memory used to access an individual array.",NA
823,"Programs may use offsets in order to access fields or sub-elements stored within structured data. The offset might be out-of-range if it comes from an untrusted source, is the result of an incorrect calculation, or occurs because of another error.",NA
823,"If an attacker can control or influence the offset so that it points outside of the intended boundaries of the structure, then the attacker may be able to read or write to memory locations that are used elsewhere in the program. As a result, the attack might change the state of the software as accessed through program variables, cause a crash or instable behavior, and possibly lead to code execution.",NA
823,"If the untrusted pointer is used in a read operation, an attacker might be able to read sensitive portions of memory.",NA
823,"If the untrusted pointer references a memory location that is not accessible to the program, or points to a location that is ""malformed"" or larger than expected by a read or write operation, the application may terminate unexpectedly.",NA
823,"If the untrusted pointer is used in a function call, or points to unexpected data in a write operation, then code execution may be possible.",NA
824,The program accesses or uses a pointer that has not been initialized.,NA
824,"If the pointer contains an uninitialized value, then the value might not point to a valid memory location. This could cause the program to read from or write to unexpected memory locations, leading to a denial of service. If the uninitialized pointer is used as a function call, then arbitrary functions could be invoked. If an attacker can influence the portion of uninitialized memory that is contained in the pointer, this weakness could be leveraged to execute code or perform other attacks.",NA
824,"Depending on memory layout, associated memory management behaviors, and program operation, the attacker might be able to influence the contents of the uninitialized pointer, thus gaining more fine-grained control of the memory location to be accessed.",NA
824,"If the uninitialized pointer is used in a read operation, an attacker might be able to read sensitive portions of memory.",NA
824,"If the uninitialized pointer references a memory location that is not accessible to the program, or points to a location that is ""malformed"" (such as NULL) or larger than expected by a read or write operation, then a crash may occur.",NA
824,"If the uninitialized pointer is used in a function call, or points to unexpected data in a write operation, then code execution may be possible.",NA
825,"The program dereferences a pointer that contains a location for memory that was previously valid, but is no longer valid.",NA
825,"When a program releases memory, but it maintains a pointer to that memory, then the memory might be re-allocated at a later time. If the original pointer is accessed to read or write data, then this could cause the program to read or modify data that is in use by a different function or process. Depending on how the newly-allocated memory is used, this could lead to a denial of service, information exposure, or code execution.",NA
825,"If the expired pointer is used in a read operation, an attacker might be able to control data read in by the application.",NA
825,"If the expired pointer references a memory location that is not accessible to the program, or points to a location that is ""malformed"" (such as NULL) or larger than expected by a read or write operation, then a crash may occur.",NA
825,"If the expired pointer is used in a function call, or points to unexpected data in a write operation, then code execution may be possible.",NA
826,The program releases a resource that is still intended to be used by the program itself or another actor.,NA
826,"This weakness focuses on errors in which the program should not release a resource, but performs the release anyway. This is different than a weakness in which the program releases a resource at the appropriate time, but it maintains a reference to the resource, which it later accesses. For this weakness, the resource should still be valid upon the subsequent access.",NA
826,"When a program releases a resource that is still being used, it is possible that operations will still be taken on this resource, which may have been repurposed in the meantime, leading to issues similar to CWE-825. Consequences may include denial of service, information exposure, or code execution.",NA
826,"If the released resource is subsequently reused or reallocated, then a read operation on the original resource might access sensitive data that is associated with a different user or entity.",NA
826,"When the resource is released, the software might modify some of its structure, or close associated channels (such as a file descriptor). When the software later accesses the resource as if it is valid, the resource might not be in an expected state, leading to resultant errors that may lead to a crash.",NA
826,"When the resource is released, the software might modify some of its structure. This might affect program logic in the sections of code that still assume the resource is active. If the released resource is related to memory and is used in a function call, or points to unexpected data in a write operation, then code execution may be possible upon subsequent accesses.",NA
827,"The software does not restrict a reference to a Document Type Definition (DTD) to the intended control sphere. This might allow attackers to reference arbitrary DTDs, possibly causing the software to expose files, consume excessive system resources, or execute arbitrary http requests on behalf of the attacker.",NA
827,"As DTDs are processed, they might try to read or include files on the machine performing the parsing. If an attacker is able to control the DTD, then the attacker might be able to specify sensitive resources or requests or provide malicious content.",NA
827,"For example, the SOAP specification prohibits SOAP messages from containing DTDs.",NA
827,"If the attacker is able to include a crafted DTD and a default entity resolver is enabled, the attacker may be able to access arbitrary files on the system.",NA
827,The DTD may cause the parser to consume excessive CPU cycles or memory using techniques such as nested or recursive entity references (CWE-776).,NA
827,The DTD may include arbitrary HTTP requests that the server may execute. This could lead to other attacks leveraging the server's trust relationship with other entities.,NA
827,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
828,"The software defines a signal handler that contains code sequences that are not asynchronous-safe, i.e., the functionality is not reentrant, or it can be interrupted.",NA
828,"This can lead to an unexpected system state with a variety of potential consequences depending on context, including denial of service and code execution.",NA
828,"Signal handlers are typically intended to interrupt normal functionality of a program, or even other signals, in order to notify the process of an event. When a signal handler uses global or static variables, or invokes functions that ultimately depend on such state or its associated metadata, then it could corrupt system state that is being used by normal functionality. This could subject the program to race conditions or other weaknesses that allow an attacker to cause the program state to be corrupted. While denial of service is frequently the consequence, in some cases this weakness could be leveraged for code execution.",NA
828,There are several different scenarios that introduce this issue:,NA
828,"Note that in some environments or contexts, it might be possible for the signal handler to be interrupted itself.",NA
828,"If both a signal handler and the normal behavior of the software have to operate on the same set of state variables, and a signal is received in the middle of the normal execution's modifications of those variables, the variables may be in an incorrect or corrupt state during signal handler execution, and possibly still incorrect or corrupt upon return.",NA
828,"The most common consequence will be a corruption of the state of the software, possibly leading to a crash or exit. However, if the signal handler is operating on state variables for security relevant libraries or protection mechanisms, the consequences can be far more severe, including protection mechanism bypass, privilege escalation, or information exposure.",NA
829,"The software imports, requires, or includes executable functionality (such as a library) from a source that is outside of the intended control sphere.",NA
829,"When including third-party functionality, such as a web widget, library, or other source of functionality, the software must effectively trust that functionality. Without sufficient protection mechanisms, the functionality could be malicious in nature (either by coming from an untrusted source, being spoofed, or being modified in transit from a trusted source). The functionality might also contain its own weaknesses, or grant access to additional functionality and state information that should be kept private to the base system, such as system state information, sensitive application data, or the DOM of a web application.",NA
829,"This might lead to many different consequences depending on the included functionality, but some examples include injection of malware, information exposure by granting excessive privileges or permissions to the untrusted functionality, DOM-based XSS vulnerabilities, stealing user's cookies, or open redirect to malware (CWE-601).",NA
829,"An attacker could insert malicious functionality into the program by causing the program to download code that the attacker has placed into the untrusted control sphere, such as a malicious web site.",NA
829,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
83,"The software does not neutralize or incorrectly neutralizes ""javascript:"" or other URIs from dangerous attributes within tags, such as onmouseover, onload, onerror, or style.",NA
830,"The software includes web functionality (such as a web widget) from another domain, which causes it to operate within the domain of the software, potentially granting total access and control of the software to the untrusted source.",NA
830,"Including third party functionality in a web-based environment is risky, especially if the source of the functionality is untrusted.",NA
830,"Even if the third party is a trusted source, the software may still be exposed to attacks and malicious behavior if that trusted source is compromised, or if the code is modified in transmission from the third party to the software.",NA
830,"This weakness is common in ""mashup"" development on the web, which may include source functionality from other domains. For example, Javascript-based web widgets may be inserted by using '<SCRIPT SRC=""http://other.domain.here"">' tags, which causes the code to run in the domain of the software, not the remote site from which the widget was loaded. As a result, the included code has access to the local DOM, including cookies and other data that the developer might not want the remote site to be able to access.",NA
830,"Such dependencies may be desirable, or even required, but sometimes programmers are not aware that a dependency exists.",NA
830,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
831,The software defines a function that is used as a handler for more than one signal.,NA
831,"While sometimes intentional and safe, when the same function is used to handle multiple signals, a race condition could occur if the function uses any state outside of its local declaration, such as global variables or non-reentrant functions, or has any side effects.",NA
831,"An attacker could send one signal that invokes the handler function; in many OSes, this will typically prevent the same signal from invoking the handler again, at least until the handler function has completed execution. However, the attacker could then send a different signal that is associated with the same handler function. This could interrupt the original handler function while it is still executing. If there is shared state, then the state could be corrupted. This can lead to a variety of potential consequences depending on context, including denial of service and code execution.",NA
831,"Another rarely-explored possibility arises when the signal handler is only designed to be executed once (if at all). By sending multiple signals, an attacker could invoke the function more than once. This may generate extra, unintended side effects. A race condition might not even be necessary; the attacker could send one signal, wait until it is handled, then send the other signal.",NA
831,"The most common consequence will be a corruption of the state of the software, possibly leading to a crash or exit. However, if the signal handler is operating on state variables for security relevant libraries or protection mechanisms, the consequences can be far more severe, including protection mechanism bypass, privilege escalation, or information exposure.",NA
832,The software attempts to unlock a resource that is not locked.,NA
832,"Depending on the locking functionality, an unlock of a non-locked resource might cause memory corruption or other modification to the resource (or its associated metadata that is used for tracking locks).",NA
832,"Depending on the locking being used, an unlock operation might not have any adverse effects. When effects exist, the most common consequence will be a corruption of the state of the software, possibly leading to a crash or exit; depending on the implementation of the unlocking, memory corruption or code execution could occur.",NA
833,"The software contains multiple threads or executable segments that are waiting for each other to release a necessary lock, resulting in deadlock.",NA
833,"Each thread of execution will ""hang"" and prevent tasks from completing. In some cases, CPU consumption may occur if a lock check occurs in a tight loop.",NA
834,The software performs an iteration or loop without sufficiently limiting the number of times that the loop is executed.,NA
834,"If the iteration can be influenced by an attacker, this weakness could allow attackers to consume excessive resources such as CPU or memory. In many cases, a loop does not need to be infinite in order to cause enough resource consumption to adversely affect the software or its host system; it depends on the amount of resources consumed per iteration.",NA
834,"Excessive looping will cause unexpected consumption of resources, such as CPU cycles or memory. The software's operation may slow down, or cause a long time to respond. If limited resources such as memory are consumed for each iteration, the loop may eventually cause a crash or program exit due to exhaustion of resources, such as an out-of-memory error.",NA
835,"The program contains an iteration or loop with an exit condition that cannot be reached, i.e., an infinite loop.",NA
835,"If the loop can be influenced by an attacker, this weakness could allow attackers to consume excessive resources such as CPU or memory.",NA
835,"An infinite loop will cause unexpected consumption of resources, such as CPU cycles or memory. The software's operation may slow down, or cause a long time to respond.",NA
836,"The software records password hashes in a data store, receives a hash of a password from a client, and compares the supplied hash to the hash obtained from the data store.",NA
836,"Some authentication mechanisms rely on the client to generate the hash for a password, possibly to reduce load on the server or avoid sending the password across the network. However, when the client is used to generate the hash, an attacker can bypass the authentication by obtaining a copy of the hash, e.g. by using SQL injection to compromise a database of authentication credentials, or by exploiting an information exposure. The attacker could then use a modified client to replay the stolen hash without having knowledge of the original password.",NA
836,"As a result, the server-side comparison against a client-side hash does not provide any more security than the use of passwords without hashing.",NA
836,An attacker could bypass the authentication routine without knowing the original password.,NA
836,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
837,"The software requires that an actor should only be able to perform an action once, or to have only one unique action, but the software does not enforce or improperly enforces this restriction.",NA
837,"In various applications, a user is only expected to perform a certain action once, such as voting, requesting a refund, or making a purchase. When this restriction is not enforced, sometimes this can have security implications. For example, in a voting application, an attacker could attempt to ""stuff the ballot box"" by voting multiple times. If these votes are counted separately, then the attacker could directly affect who wins the vote. This could have significant business impact depending on the purpose of the software.",NA
837,"An attacker might be able to gain advantage over other users by performing the action multiple times, or affect the correctness of the software.",NA
838,"The software uses or specifies an encoding when generating output to a downstream component, but the specified encoding is not the same as the encoding that is expected by the downstream component.",NA
838,"This weakness can cause the downstream component to use a decoding method that produces different data than what the software intended to send. When the wrong encoding is used - even if closely related - the downstream component could decode the data incorrectly. This can have security consequences when the provided boundaries between control and data are inadvertently broken, because the resulting data could introduce control characters or special elements that were not sent by the software. The resulting data could then be used to bypass protection mechanisms such as input validation, and enable injection attacks.",NA
838,"While using output encoding is essential for ensuring that communications between components are accurate, the use of the wrong encoding - even if closely related - could cause the downstream component to misinterpret the output.",NA
838,"For example, HTML entity encoding is used for elements in the HTML body of a web page. However, a programmer might use entity encoding when generating output for that is used within an attribute of an HTML tag, which could contain functional Javascript that is not affected by the HTML encoding.",NA
838,"While web applications have received the most attention for this problem, this weakness could potentially apply to any type of software that uses a communications stream that could support multiple encodings.",NA
838,"An attacker could modify the structure of the message or data being sent to the downstream component, possibly injecting commands.",NA
839,"The program checks a value to ensure that it is less than or equal to a maximum, but it does not also verify that the value is greater than or equal to the minimum.",NA
839,"Some programs use signed integers or floats even when their values are only expected to be positive or 0. An input validation check might assume that the value is positive, and only check for the maximum value. If the value is negative, but the code assumes that the value is positive, this can produce an error. The error may have security consequences if the negative value is used for memory allocation, array access, buffer access, etc. Ultimately, the error could lead to a buffer overflow or other type of memory corruption.",NA
839,"The use of a negative number in a positive-only context could have security implications for other types of resources. For example, a shopping cart might check that the user is not requesting more than 10 items, but a request for -3 items could cause the application to calculate a negative price and credit the attacker's account.",NA
839,"An attacker could modify the structure of the message or data being sent to the downstream component, possibly injecting commands.",NA
839,"in some contexts, a negative value could lead to resource consumption.",NA
839,"If a negative value is used to access memory, buffers, or other indexable structures, it could access memory outside the bounds of the buffer.",NA
84,The web application improperly neutralizes user-controlled input for executable script disguised with URI encodings.,NA
841,"The software supports a session in which more than one behavior must be performed by an actor, but it does not properly ensure that the actor performs the behaviors in the required sequence.",NA
841,"By performing actions in an unexpected order, or by omitting steps, an attacker could manipulate the business logic of the software or cause it to enter an invalid state. In some cases, this can also expose resultant weaknesses.",NA
841,"For example, a file-sharing protocol might require that an actor perform separate steps to provide a username, then a password, before being able to transfer files. If the file-sharing server accepts a password command followed by a transfer command, without any username being provided, the software might still perform the transfer.",NA
841,"Note that this is different than CWE-696, which focuses on when the software performs actions in the wrong sequence; this entry is closely related, but it is focused on ensuring that the actor performs actions in the correct sequence.",NA
841,Workflow-related behaviors include:,NA
841,"An attacker could cause the software to skip critical steps or perform them in the wrong order, bypassing its intended business logic. This can sometimes have security implications.",NA
841,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
842,The software or the administrator places a user into an incorrect group.,NA
842,"If the incorrect group has more access or privileges than the intended group, the user might be able to bypass intended security policy to access unexpected resources or perform unexpected actions. The access-control system might not be able to detect malicious usage of this group membership.",NA
843,"The program allocates or initializes a resource such as a pointer, object, or variable using one type, but it later accesses that resource using a type that is incompatible with the original type.",NA
843,"When the program accesses the resource using an incompatible type, this could trigger logical errors because the resource does not have expected properties. In languages without memory safety, such as C and C++, type confusion can lead to out-of-bounds memory access.",NA
843,"While this weakness is frequently associated with unions when parsing data with many different embedded object types in C, it can be present in any application that can interpret the same variable or memory location in multiple ways.",NA
843,"This weakness is not unique to C and C++. For example, errors in PHP applications can be triggered by providing array parameters when scalars are expected, or vice versa. Languages such as Perl, which perform automatic conversion of a variable of one type when it is accessed as if it were another type, can also contain these issues.",NA
85,The web application does not filter user-controlled input for executable script disguised using doubling of the involved characters.,NA
86,"The software does not neutralize or incorrectly neutralizes invalid characters or byte sequences in the middle of tag names, URI schemes, and other identifiers.",NA
86,"Some web browsers may remove these sequences, resulting in output that may have unintended control implications. For example, the software may attempt to remove a ""javascript:"" URI scheme, but a ""java%00script:"" URI may bypass this check and still be rendered as active javascript by some browsers, allowing XSS or other attacks.",NA
862,The software does not perform an authorization check when an actor attempts to access a resource or perform an action.,NA
862,"Assuming a user with a given identity, authorization is the process of determining whether that user can access a given resource, based on the user's privileges and any permissions or other access-control specifications that apply to the resource.",NA
862,"When access control checks are not applied, users are able to access data or perform actions that they should not be allowed to perform. This can lead to a wide range of problems, including information exposures, denial of service, and arbitrary code execution.",NA
862,"An access control list (ACL) represents who/what has permissions to a given object. Different operating systems implement (ACLs) in different ways. In UNIX, there are three types of permissions: read, write, and execute. Users are divided into three classes for file access: owner, group owner, and all other users where each class has a separate set of rights. In Windows NT, there are four basic types of permissions for files: ""No access"", ""Read access"", ""Change access"", and ""Full control"". Windows NT extends the concept of three types of users in UNIX to include a list of users and groups along with their associated permissions. A user can create an object (file) and assign specified permissions to that object.",NA
862,"An attacker could read sensitive data, either by reading the data directly from a data store that is not restricted, or by accessing insufficiently-protected, privileged functionality to read the data.",NA
862,"An attacker could modify sensitive data, either by writing the data directly to a data store that is not restricted, or by accessing insufficiently-protected, privileged functionality to write the data.",NA
862,"An attacker could gain privileges by modifying or reading critical data directly, or by accessing privileged functionality.",NA
862,"A developer may introduce authorization weaknesses because of a lack of understanding about the underlying technologies. For example, a developer may assume that attackers cannot modify certain inputs such as headers or cookies.",NA
863,"The software performs an authorization check when an actor attempts to access a resource or perform an action, but it does not correctly perform the check. This allows attackers to bypass intended access restrictions.",NA
863,"Assuming a user with a given identity, authorization is the process of determining whether that user can access a given resource, based on the user's privileges and any permissions or other access-control specifications that apply to the resource.",NA
863,"When access control checks are incorrectly applied, users are able to access data or perform actions that they should not be allowed to perform. This can lead to a wide range of problems, including information exposures, denial of service, and arbitrary code execution.",NA
863,"An access control list (ACL) represents who/what has permissions to a given object. Different operating systems implement (ACLs) in different ways. In UNIX, there are three types of permissions: read, write, and execute. Users are divided into three classes for file access: owner, group owner, and all other users where each class has a separate set of rights. In Windows NT, there are four basic types of permissions for files: ""No access"", ""Read access"", ""Change access"", and ""Full control"". Windows NT extends the concept of three types of users in UNIX to include a list of users and groups along with their associated permissions. A user can create an object (file) and assign specified permissions to that object.",NA
863,"An attacker could read sensitive data, either by reading the data directly from a data store that is not correctly restricted, or by accessing insufficiently-protected, privileged functionality to read the data.",NA
863,"An attacker could modify sensitive data, either by writing the data directly to a data store that is not correctly restricted, or by accessing insufficiently-protected, privileged functionality to write the data.",NA
863,"An attacker could gain privileges by modifying or reading critical data directly, or by accessing privileged functionality.",NA
863,Authorization weaknesses may arise when a single-user application is ported to a multi-user environment.,NA
87,The software does not neutralize or incorrectly neutralizes user-controlled input for alternate script syntax.,NA
88,"The software constructs a string for a command to executed by a separate component in another control sphere, but it does not properly delimit the intended arguments, options, or switches within that command string.",NA
88,"An attacker could include arguments that allow unintended commands or code to be executed, allow sensitive data to be read or modified or could cause other unintended behavior.",NA
88,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
89,"The software constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component.",NA
89,"Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data. This can be used to alter query logic to bypass security checks, or to insert additional statements that modify the back-end database, possibly including execution of system commands.",NA
89,"SQL injection has become a common issue with database-driven web sites. The flaw is easily detected, and easily exploited, and as such, any site or software package with even a minimal user base is likely to be subject to an attempted attack of this kind. This flaw depends on the fact that SQL makes no real distinction between the control and data planes.",NA
89,"Since SQL databases generally hold sensitive data, loss of confidentiality is a frequent problem with SQL injection vulnerabilities.",NA
89,"If poor SQL commands are used to check user names and passwords, it may be possible to connect to a system as another user with no previous knowledge of the password.",NA
89,"If authorization information is held in a SQL database, it may be possible to change this information through the successful exploitation of a SQL injection vulnerability.",NA
89,"Just as it may be possible to read sensitive information, it is also possible to make changes or even delete this information with a SQL injection attack.",NA
89,This weakness typically appears in data-rich applications that save user inputs in a database.,NA
89,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
9,"If elevated access rights are assigned to EJB methods, then an attacker can take advantage of the permissions to exploit the software system.",NA
9,"If the EJB deployment descriptor contains one or more method permissions that grant access to the special ANYONE role, it indicates that access control for the application has not been fully thought through or that the application is structured in such a way that reasonable access control restrictions are impossible.",NA
90,"The software constructs all or part of an LDAP query using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended LDAP query when it is sent to a downstream component.",NA
90,"An attacker could include input that changes the LDAP query which allows unintended commands or code to be executed, allows sensitive data to be read or modified or causes other unintended behavior.",NA
90,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
908,The software uses or accesses a resource that has not been initialized.,NA
908,"When a resource has not been properly initialized, the software may behave unexpectedly. This may lead to a crash or invalid memory access, but the consequences vary depending on the type of resource and how it is used within the software.",NA
908,"When reusing a resource such as memory or a program variable, the original contents of that resource may not be cleared before it is sent to an untrusted party.",NA
908,The uninitialized resource may contain values that cause program flow to change in ways that the programmer did not intend.,NA
909,The software does not initialize a critical resource.,NA
909,"Many resources require initialization before they can be properly used. If a resource is not initialized, it could contain unpredictable or expired data, or it could be initialized to defaults that are invalid. This can have security implications when the resource is expected to have certain properties or values.",NA
909,"When reusing a resource such as memory or a program variable, the original contents of that resource may not be cleared before it is sent to an untrusted party.",NA
909,The uninitialized resource may contain values that cause program flow to change in ways that the programmer did not intend.,NA
91,"The software does not properly neutralize special elements that are used in XML, allowing attackers to modify the syntax, content, or commands of the XML before it is processed by an end system.",NA
91,"Within XML, special elements could include reserved words or characters such as ""<"", "">"", """""", and ""&"", which could then be used to add new data or modify XML syntax.",NA
91,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
910,The software uses or accesses a file descriptor after it has been closed.,NA
910,"After a file descriptor for a particular file or device has been released, it can be reused. The code might not write to the original file, since the reused file descriptor might reference a different file or device.",NA
910,The program could read data from the wrong file.,NA
910,Accessing a file descriptor that has been closed can cause a crash.,NA
911,"The software uses a reference count to manage a resource, but it does not update or incorrectly updates the reference count.",NA
911,"Reference counts can be used when tracking how many objects contain a reference to a particular resource, such as in memory management or garbage collection. When the reference count reaches zero, the resource can be de-allocated or reused because there are no more objects that use it. If the reference count accidentally reaches zero, then the resource might be released too soon, even though it is still in use. If all objects no longer use the resource, but the reference count is not zero, then the resource might not ever be released.",NA
912,"The software contains functionality that is not documented, not part of the specification, and not accessible through an interface or command sequence that is obvious to the software's users or administrators.",NA
912,"Hidden functionality can take many forms, such as intentionally malicious code, ""Easter Eggs"" that contain extraneous functionality such as games, developer-friendly shortcuts that reduce maintenance or support costs such as hard-coded accounts, etc. From a security perspective, even when the functionality is not intentionally malicious or damaging, it can increase the software's attack surface and expose additional weaknesses beyond what is already exposed by the intended functionality. Even if it is not easily accessible, the hidden functionality could be useful for attacks that modify the control flow of the application.",NA
913,"The software does not properly restrict reading from or writing to dynamically-managed code resources such as variables, objects, classes, attributes, functions, or executable instructions or statements.",NA
913,"Many languages offer powerful features that allow the programmer to dynamically create or modify existing code, or resources used by code such as variables and objects. While these features can offer significant flexibility and reduce development time, they can be extremely dangerous if attackers can directly influence these code resources in unexpected ways.",NA
914,The software does not properly restrict reading from or writing to dynamically-identified variables.,NA
914,"Many languages offer powerful features that allow the programmer to access arbitrary variables that are specified by an input string. While these features can offer significant flexibility and reduce development time, they can be extremely dangerous if attackers can modify unintended variables that have security implications.",NA
914,An attacker could modify sensitive data or program variables.,NA
915,"The software receives input from an upstream component that specifies multiple attributes, properties, or fields that are to be initialized or updated in an object, but it does not properly control which attributes can be modified.",NA
915,"If the object contains attributes that were only intended for internal use, then their unexpected modification could lead to a vulnerability.",NA
915,"This weakness is sometimes known by the language-specific mechanisms that make it possible, such as mass assignment, autobinding, or object injection.",NA
915,An attacker could modify sensitive data or program variables.,NA
916,"The software generates a hash for a password, but it uses a scheme that does not provide a sufficient level of computational effort that would make password cracking attacks infeasible or expensive.",NA
916,"Many password storage mechanisms compute a hash and store the hash, instead of storing the original password in plaintext. In this design, authentication involves accepting an incoming password, computing its hash, and comparing it to the stored hash.",NA
916,"Many hash algorithms are designed to execute quickly with minimal overhead, even cryptographic hashes. However, this efficiency is a problem for password storage, because it can reduce an attacker's workload for brute-force password cracking. If an attacker can obtain the hashes through some other method (such as SQL injection on a database that stores hashes), then the attacker can store the hashes offline and use various techniques to crack the passwords by computing hashes efficiently. Without a built-in workload, modern attacks can compute large numbers of hashes, or even exhaust the entire space of all possible passwords, within a very short amount of time, using massively-parallel computing (such as cloud computing) and GPU, ASIC, or FPGA hardware. In such a scenario, an efficient hash algorithm helps the attacker.",NA
916,"There are several properties of a hash scheme that are relevant to its strength against an offline, massively-parallel attack:",NA
916,"Note that the security requirements for the software may vary depending on the environment and the value of the passwords. Different schemes might not provide all of these properties, yet may still provide sufficient security for the environment. Conversely, a solution might be very strong in preserving one property, which still being very weak for an attack against another property, or it might not be able to significantly reduce the efficiency of a massively-parallel attack.",NA
916,"If an attacker can gain access to the hashes, then the lack of sufficient computational effort will make it easier to conduct brute force attacks using techniques such as rainbow tables, or specialized hardware such as GPUs, which can be much faster than general-purpose CPUs for computing hashes.",NA
916,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
917,"The software constructs all or part of an expression language (EL) statement in a Java Server Page (JSP) using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended EL statement before it is executed.",NA
918,"The web server receives a URL or similar request from an upstream component and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination.",NA
918,"By providing URLs to unexpected hosts or ports, attackers can make it appear that the server is sending the request, possibly bypassing access controls such as firewalls that prevent the attackers from accessing the URLs directly. The server can be used as a proxy to conduct port scanning of hosts in internal networks, use other URLs such as that can access documents on the system (using file://), or use other protocols such as gopher:// or tftp://, which may provide greater control over the contents of requests.",NA
92,"This entry has been deprecated. It originally came from PLOVER, which sometimes defined ""other"" and ""miscellaneous"" categories in order to satisfy exhaustiveness requirements for taxonomies. Within the context of CWE, the use of a more abstract entry is preferred in mapping situations. CWE-75 is a more appropriate mapping.",NA
920,"The software operates in an environment in which power is a limited resource that cannot be automatically replenished, but the software does not properly restrict the amount of power that its operation consumes.",NA
920,"In environments such as embedded or mobile devices, power can be a limited resource such as a battery, which cannot be automatically replenished by the software itself, and the device might not always be directly attached to a reliable power source. If the software uses too much power too quickly, then this could cause the device (and subsequently, the software) to stop functioning until power is restored, or increase the financial burden on the device owner because of increased power costs.",NA
920,"Normal operation of an application will consume power. However, in some cases, an attacker could cause the application to consume more power than intended, using components such as:",NA
920,"The power source could be drained, causing the application - and the entire device - to cease functioning.",NA
921,The software stores sensitive information in a file system or device that does not have built-in access control.,NA
921,"While many modern file systems or devices utilize some form of access control in order to restrict access to data, not all storage mechanisms have this capability. For example, memory cards, floppy disks, CDs, and USB devices are typically made accessible to any user within the system. This can become a problem when sensitive data is stored in these mechanisms in a multi-user environment, because anybody on the system can read or write this data.",NA
921,"On Android devices, external storage is typically globally readable and writable by other applications on the device. External storage may also be easily accessible through the mobile device's USB connection or physically accessible through the device's memory card port.",NA
921,Attackers can read sensitive information by accessing the unrestricted storage mechanism.,NA
921,Attackers can modify or delete sensitive information by accessing the unrestricted storage mechanism.,NA
921,OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.,NA
922,The software stores sensitive information without properly limiting read or write access by unauthorized actors.,NA
922,"If read access is not properly restricted, then attackers can steal the sensitive information. If write access is not properly restricted, then attackers can modify and possibly delete the data, causing incorrect results and possibly a denial of service.",NA
922,Attackers can read sensitive information by accessing the unrestricted storage mechanism.,NA
922,Attackers can read sensitive information by accessing the unrestricted storage mechanism.,NA
922,OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.,NA
923,"The software establishes a communication channel to (or from) an endpoint for privileged or protected operations, but it does not properly ensure that it is communicating with the correct endpoint.",NA
923,"Attackers might be able to spoof the intended endpoint from a different system or process, thus gaining the same level of access as the intended endpoint.",NA
923,"While this issue frequently involves authentication between network-based clients and servers, other types of communication channels and endpoints can have this weakness.",NA
923,"If an attacker can spoof the endpoint, the attacker gains all the privileges that were intended for the original endpoint.",NA
923,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
924,"The software establishes a communication channel with an endpoint and receives a message from that endpoint, but it does not sufficiently ensure that the message was not modified during transmission.",NA
924,Attackers might be able to modify the message and spoof the endpoint by interfering with the data as it crosses the network or by redirecting the connection to a system under their control.,NA
924,"If an attackers can spoof the endpoint, the attacker gains all the privileges that were intended for the original endpoint.",NA
924,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
925,The Android application uses a Broadcast Receiver that receives an Intent but does not properly verify that the Intent came from an authorized source.,NA
925,"Certain types of Intents, identified by action string, can only be broadcast by the operating system itself, not by third-party applications. However, when an application registers to receive these implicit system intents, it is also registered to receive any explicit intents. While a malicious application cannot send an implicit system intent, it can send an explicit intent to the target application, which may assume that any received intent is a valid implicit system intent and not an explicit intent from another application. This may lead to unintended behavior.",NA
925,Another application can impersonate the operating system and cause the software to perform an unintended action.,NA
926,"The Android application exports a component for use by other applications, but does not properly restrict which applications can launch the component or access the data it contains.",NA
926,The attacks and consequences of improperly exporting a component may depend on the exported component:,NA
926,"Other applications, possibly untrusted, can launch the Activity.",NA
926,"Other applications, possibly untrusted, can bind to the Service.",NA
926,"Other applications, possibly untrusted, can read or modify the data that is offered by the Content Provider.",NA
927,The Android application uses an implicit intent for transmitting sensitive data to other applications.,NA
927,"Since an implicit intent does not specify a particular application to receive the data, any application can process the intent by using an Intent Filter for that intent. This can allow untrusted applications to obtain sensitive data. There are two variations on the standard broadcast intent, ordered and sticky.",NA
927,"Ordered broadcast intents are delivered to a series of registered receivers in order of priority as declared by the Receivers. A malicious receiver can give itself a high priority and cause a denial of service by stopping the broadcast from propagating further down the chain. There is also the possibility of malicious data modification, as a receiver may also alter the data within the Intent before passing it on to the next receiver. The downstream components have no way of asserting that the data has not been altered earlier in the chain.",NA
927,"Sticky broadcast intents remain accessible after the initial broadcast. An old sticky intent will be broadcast again to any new receivers that register for it in the future, greatly increasing the chances of information exposure over time. Also, sticky broadcasts cannot be protected by permissions that may apply to other kinds of intents.",NA
927,"In addition, any broadcast intent may include a URI that references data that the receiving component does not normally have the privileges to access. The sender of the intent can include special privileges that grant the receiver read or write access to the specific URI included in the intent. A malicious receiver that intercepts this intent will also gain those privileges and be able to read or write the resource at the specified URI.",NA
927,"Other applications, possibly untrusted, can read the data that is offered through the Intent.",NA
927,"The application may handle responses from untrusted applications on the device, which could cause it to perform unexpected or unauthorized actions.",NA
93,"The software uses CRLF (carriage return line feeds) as a special element, e.g. to separate lines or records, but it does not neutralize or incorrectly neutralizes CRLF sequences from inputs.",NA
93,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
939,"The software uses a handler for a custom URL scheme, but it does not properly restrict which actors can invoke the handler using the scheme.",NA
939,"Mobile platforms and other architectures allow the use of custom URL schemes to facilitate communication between applications. In the case of iOS, this is the only method to do inter-application communication. The implementation is at the developer's discretion which may open security flaws in the application. An example could be potentially dangerous functionality such as modifying files through a custom URL scheme.",NA
939,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
94,"The software constructs all or part of a code segment using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the syntax or behavior of the intended code segment.",NA
94,"When software allows a user's input to contain code syntax, it might be possible for an attacker to craft the code in such a way that it will alter the intended control flow of the software. Such an alteration could lead to arbitrary code execution.",NA
94,"Injection problems encompass a wide variety of issues -- all mitigated in very different ways. For this reason, the most effective way to discuss these weaknesses is to note the distinct features which classify them as injection weaknesses. The most important issue to note is that all injection problems share one thing in common -- i.e., they allow for the injection of control plane data into the user-controlled data plane. This means that the execution of the process may be altered by sending code in through legitimate data channels, using no other mechanism. While buffer overflows, and many other flaws, involve the use of some further issue to gain execution, injection problems need only for the data to be parsed. The most classic instantiations of this category of weakness are SQL injection and format string vulnerabilities.",NA
94,"In some cases, injectable code controls authentication; this may lead to a remote vulnerability.",NA
94,Injected code can access resources that the attacker is directly prevented from accessing.,NA
94,"Code injection attacks can lead to loss of data integrity in nearly all cases as the control-plane data injected is always incidental to data recall or writing. Additionally, code injection can often result in the execution of arbitrary code.",NA
94,Often the actions performed by injected control code are unlogged.,NA
94,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
940,"The software establishes a communication channel to handle an incoming request that has been initiated by an actor, but it does not properly verify that the request is coming from the expected origin.",NA
940,"When an attacker can successfully establish a communication channel from an untrusted origin, the attacker may be able to gain privileges and access unexpected functionality.",NA
940,An attacker can access any functionality that is inadvertently accessible to the source.,NA
940,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
941,"The software creates a communication channel to initiate an outgoing request to an actor, but it does not correctly specify the intended destination for that actor.",NA
941,Attackers at the destination may be able to spoof trusted servers to steal data or cause a denial of service.,NA
941,There are at least two distinct weaknesses that can cause the software to communicate with an unintended destination:,NA
941,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
942,The software uses a cross-domain policy file that includes domains that should not be trusted.,NA
942,"A cross-domain policy file (""crossdomain.xml"" in Flash and ""clientaccesspolicy.xml"" in Silverlight) defines a whitelist of domains from which a server is allowed to make cross-domain requests. When making a cross-domain request, the Flash or Silverlight client will first look for the policy file on the target server. If it is found, and the domain hosting the application is explicitly allowed to make requests, the request is made.",NA
942,"Therefore, if a cross-domain policy file includes domains that should not be trusted, such as when using wildcards, then the application could be attacked by these untrusted domains.",NA
942,"An overly permissive policy file allows many of the same attacks seen in Cross-Site Scripting (CWE-79). Once the user has executed a malicious Flash or Silverlight application, they are vulnerable to a variety of attacks. The attacker could transfer private information, such as cookies that may include session information, from the victim's machine to the attacker. The attacker could send malicious requests to a web site on behalf of the victim, which could be especially dangerous to the site if the victim has administrator privileges to manage that site.",NA
942,"In many cases, the attack can be launched without the victim even being aware of it.",NA
942,"An attacker may be able to bypass the web browser's same-origin policy. An attacker can exploit the weakness to manipulate or steal cookies, create requests that can be mistaken for those of a valid user, compromise confidential information, or execute malicious code on the end user systems for a variety of nefarious purposes. Other damaging attacks include the disclosure of end user files, installation of Trojan horse programs, redirecting the user to some other page or site, running ActiveX controls (under Microsoft Internet Explorer) from sites that a user perceives as trustworthy, and modifying presentation of content.",NA
942,COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.,NA
943,"The application generates a query intended to access or manipulate data in a data store such as a database, but it does not neutralize or incorrectly neutralizes special elements that can modify the intended logic of the query.",NA
943,"Depending on the capabilities of the query language, an attacker could inject additional logic into the query to:",NA
943,"The ability to execute additional commands or change which entities are returned has obvious risks. But when the application logic depends on the order or number of entities, this can also lead to vulnerabilities. For example, if the application query expects to return only one entity that specifies an administrative user, but an attacker can change which entities are returned, this could cause the logic to return information for a regular user and incorrectly assume that the user has administrative privileges.",NA
943,"While this weakness is most commonly associated with SQL injection, there are many other query languages that are also subject to injection attacks, including HTSQL, LDAP, DQL, XQuery, Xpath, and ""NoSQL"" languages.",NA
943,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
95,"The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before using the input in a dynamic evaluation call (e.g. ""eval"").",NA
95,"This may allow an attacker to execute arbitrary code, or at least modify what code can be executed.",NA
95,The injected code could access restricted data / files.,NA
95,"In some cases, injectable code controls authentication; this may lead to a remote vulnerability.",NA
95,Injected code can access resources that the attacker is directly prevented from accessing.,NA
95,"Code injection attacks can lead to loss of data integrity in nearly all cases as the control-plane data injected is always incidental to data recall or writing. Additionally, code injection can often result in the execution of arbitrary code.",NA
95,Often the actions performed by injected control code are unlogged.,NA
95,"This weakness is prevalent in handler/dispatch procedures that might want to invoke a large number of functions, or set a large number of variables.",NA
95,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
96,"The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before inserting the input into an executable resource, such as a library, configuration file, or template.",NA
96,The injected code could access restricted data / files.,NA
96,"In some cases, injectable code controls authentication; this may lead to a remote vulnerability.",NA
96,Injected code can access resources that the attacker is directly prevented from accessing.,NA
96,"Code injection attacks can lead to loss of data integrity in nearly all cases as the control-plane data injected is always incidental to data recall or writing. Additionally, code injection can often result in the execution of arbitrary code.",NA
96,Often the actions performed by injected control code are unlogged.,NA
96,"This issue is most frequently found in PHP applications that allow users to set configuration variables that are stored within executable PHP files. Technically, this could also be performed in some compiled code (e.g. by byte-patching an executable), although it is highly unlikely.",NA
96,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
97,"The software generates a web page, but does not neutralize or incorrectly neutralizes user-controllable input that could be interpreted as a server-side include (SSI) directive.",NA
97,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
98,"The PHP application receives input from an upstream component, but it does not restrict or incorrectly restricts the input before its usage in ""require,"" ""include,"" or similar functions.",NA
98,"In certain versions and configurations of PHP, this can allow an attacker to specify a URL to a remote location from which the software will obtain the code to execute. In other cases in association with path traversal, the attacker can specify a local file that may contain executable statements that can be parsed by PHP.",NA
98,"The attacker may be able to specify arbitrary code to be executed from a remote location. Alternatively, it may be possible to use normal program behavior to insert php code into files on the local machine which can then be included and force the code to execute since php ignores everything in the file except for the content between php specifiers.",NA
98,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
99,"The software receives input from an upstream component, but it does not restrict or incorrectly restricts the input before it is used as an identifier for a resource that may be outside the intended sphere of control.",NA
99,A resource injection issue occurs when the following two conditions are met:,NA
99,This may enable an attacker to access or modify otherwise protected system resources.,NA
99,An attacker could gain access to or modify sensitive data or system resources. This could allow access to protected files or directories including configuration files and files containing sensitive information.,NA
99,REALIZATION: This weakness is caused during implementation of an architectural security tactic.,NA
